
/private/var/folders/jp/8cvzydc904n1td9j3y4ntcgm0000gn/T/arduino-sketch-A693075986D8149E02339963D9CBA8D8/DualModeExample.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	fe c0       	rjmp	.+508    	; 0x1fe <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	31 c1       	rjmp	.+610    	; 0x268 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	2f c1       	rjmp	.+606    	; 0x268 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	2d c1       	rjmp	.+602    	; 0x268 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	b2 c7       	rjmp	.+3940   	; 0xf76 <__vector_4>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	29 c1       	rjmp	.+594    	; 0x268 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	27 c1       	rjmp	.+590    	; 0x268 <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	25 c1       	rjmp	.+586    	; 0x268 <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	23 c1       	rjmp	.+582    	; 0x268 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	21 c1       	rjmp	.+578    	; 0x268 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	1f c1       	rjmp	.+574    	; 0x268 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	1d c1       	rjmp	.+570    	; 0x268 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	1b c1       	rjmp	.+566    	; 0x268 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	19 c1       	rjmp	.+562    	; 0x268 <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	17 c1       	rjmp	.+558    	; 0x268 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	15 c1       	rjmp	.+554    	; 0x268 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	71 c7       	rjmp	.+3810   	; 0xf24 <__vector_16>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	11 c1       	rjmp	.+546    	; 0x268 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	0f c1       	rjmp	.+542    	; 0x268 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	0d c1       	rjmp	.+538    	; 0x268 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	0b c1       	rjmp	.+534    	; 0x268 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	09 c1       	rjmp	.+530    	; 0x268 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	07 c1       	rjmp	.+526    	; 0x268 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	05 c1       	rjmp	.+522    	; 0x268 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	03 c1       	rjmp	.+518    	; 0x268 <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	01 c1       	rjmp	.+514    	; 0x268 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	ff c0       	rjmp	.+510    	; 0x268 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	fd c0       	rjmp	.+506    	; 0x268 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	fb c0       	rjmp	.+502    	; 0x268 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	f9 c0       	rjmp	.+498    	; 0x268 <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	92 c6       	rjmp	.+3364   	; 0xd9e <__vector_30>
      7a:	00 00       	nop
../../../../crt1/gcrt1.S:97
      7c:	bd c6       	rjmp	.+3450   	; 0xdf8 <__vector_31>
      7e:	00 00       	nop
../../../../crt1/gcrt1.S:98
      80:	b6 c6       	rjmp	.+3436   	; 0xdee <__vector_32>
      82:	00 00       	nop
../../../../crt1/gcrt1.S:99
      84:	be c6       	rjmp	.+3452   	; 0xe02 <__vector_33>
      86:	00 00       	nop
../../../../crt1/gcrt1.S:100
      88:	ef c0       	rjmp	.+478    	; 0x268 <__bad_interrupt>
      8a:	00 00       	nop
../../../../crt1/gcrt1.S:101
      8c:	ed c0       	rjmp	.+474    	; 0x268 <__bad_interrupt>
      8e:	00 00       	nop
../../../../crt1/gcrt1.S:102
      90:	eb c0       	rjmp	.+470    	; 0x268 <__bad_interrupt>
      92:	00 00       	nop
../../../../crt1/gcrt1.S:103
      94:	e9 c0       	rjmp	.+466    	; 0x268 <__bad_interrupt>
      96:	00 00       	nop
../../../../crt1/gcrt1.S:104
      98:	e7 c0       	rjmp	.+462    	; 0x268 <__bad_interrupt>
      9a:	00 00       	nop
../../../../crt1/gcrt1.S:105
      9c:	e5 c0       	rjmp	.+458    	; 0x268 <__bad_interrupt>
      9e:	00 00       	nop
../../../../crt1/gcrt1.S:106
      a0:	e3 c0       	rjmp	.+454    	; 0x268 <__bad_interrupt>
      a2:	00 00       	nop
../../../../crt1/gcrt1.S:107
      a4:	e1 c0       	rjmp	.+450    	; 0x268 <__bad_interrupt>
      a6:	00 00       	nop
../../../../crt1/gcrt1.S:108
      a8:	14 c7       	rjmp	.+3624   	; 0xed2 <__vector_42>
      aa:	00 00       	nop
../../../../crt1/gcrt1.S:109
      ac:	dd c0       	rjmp	.+442    	; 0x268 <__bad_interrupt>
      ae:	00 00       	nop
../../../../crt1/gcrt1.S:110
      b0:	db c0       	rjmp	.+438    	; 0x268 <__bad_interrupt>
      b2:	00 00       	nop
../../../../crt1/gcrt1.S:111
      b4:	d9 c0       	rjmp	.+434    	; 0x268 <__bad_interrupt>
      b6:	00 00       	nop
../../../../crt1/gcrt1.S:112
      b8:	d7 c0       	rjmp	.+430    	; 0x268 <__bad_interrupt>
      ba:	00 00       	nop
../../../../crt1/gcrt1.S:113
      bc:	d5 c0       	rjmp	.+426    	; 0x268 <__bad_interrupt>
      be:	00 00       	nop
../../../../crt1/gcrt1.S:114
      c0:	d3 c0       	rjmp	.+422    	; 0x268 <__bad_interrupt>
      c2:	00 00       	nop
../../../../crt1/gcrt1.S:115
      c4:	d1 c0       	rjmp	.+418    	; 0x268 <__bad_interrupt>
      c6:	00 00       	nop
../../../../crt1/gcrt1.S:116
      c8:	cf c0       	rjmp	.+414    	; 0x268 <__bad_interrupt>
      ca:	00 00       	nop
../../../../crt1/gcrt1.S:117
      cc:	cd c0       	rjmp	.+410    	; 0x268 <__bad_interrupt>
      ce:	00 00       	nop
../../../../crt1/gcrt1.S:118
      d0:	cb c0       	rjmp	.+406    	; 0x268 <__bad_interrupt>
      d2:	00 00       	nop
../../../../crt1/gcrt1.S:119
      d4:	c9 c0       	rjmp	.+402    	; 0x268 <__bad_interrupt>
      d6:	00 00       	nop
../../../../crt1/gcrt1.S:120
      d8:	c7 c0       	rjmp	.+398    	; 0x268 <__bad_interrupt>
      da:	00 00       	nop
../../../../crt1/gcrt1.S:121
      dc:	c5 c0       	rjmp	.+394    	; 0x268 <__bad_interrupt>
      de:	00 00       	nop
../../../../crt1/gcrt1.S:122
      e0:	c3 c0       	rjmp	.+390    	; 0x268 <__bad_interrupt>
      e2:	00 00       	nop
../../../../crt1/gcrt1.S:123
      e4:	c1 c0       	rjmp	.+386    	; 0x268 <__bad_interrupt>
	...

000000e8 <__trampolines_end>:
__trampolines_start():
      e8:	52 54       	subi	r21, 0x42	; 66
      ea:	43 20       	and	r4, r3
      ec:	69 6e       	ori	r22, 0xE9	; 233
      ee:	69 74       	andi	r22, 0x49	; 73
      f0:	69 61       	ori	r22, 0x19	; 25
      f2:	6c 69       	ori	r22, 0x9C	; 156
      f4:	7a 65       	ori	r23, 0x5A	; 90
      f6:	64 20       	and	r6, r4
      f8:	75 73       	andi	r23, 0x35	; 53
      fa:	69 6e       	ori	r22, 0xE9	; 233
      fc:	67 20       	and	r6, r7
      fe:	58 4f       	sbci	r21, 0xF8	; 248
     100:	53 43       	sbci	r21, 0x33	; 51
     102:	33 32       	cpi	r19, 0x23	; 35
     104:	4b 00       	.word	0x004b	; ????

00000106 <RTC_init()::__c>:
     106:	58 4f 53 43 33 32 4b 20 73 74 61 72 74 65 64 2e     XOSC32K started.
     116:	20 49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54      Initializing RT
     126:	43 2e 00                                            C..

00000129 <RTC_init()::__c>:
     129:	52 54 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 20     RTC initialized 
     139:	75 73 69 6e 67 20 4f 53 43 55 4c 50 33 32 4b 00     using OSCULP32K.

00000149 <RTC_init()::__c>:
     149:	58 4f 53 43 33 32 4b 20 73 74 61 72 74 75 70 20     XOSC32K startup 
     159:	46 41 49 4c 45 44 00                                FAILED.

00000160 <RTC_init()::__c>:
     160:	43 4c 4b 43 54 52 4c 5f 58 4f 53 43 33 32 4b 53     CLKCTRL_XOSC32KS
     170:	5f 62 6d 3a 20 00                                   _bm: .

00000176 <RTC_init()::__c>:
     176:	4d 43 4c 4b 53 54 41 54 55 53 3a 20 00              MCLKSTATUS: .

00000183 <RTC_init()::__c>:
     183:	58 4f 53 43 33 32 4b 43 54 52 4c 41 3a 20 00        XOSC32KCTRLA: .

00000192 <RTC_init()::__c>:
     192:	57 61 69 74 69 6e 67 20 66 6f 72 20 58 4f 53 43     Waiting for XOSC
     1a2:	33 32 4b 20 74 6f 20 73 74 61 72 74 2e 2e 2e 00     32K to start....

000001b2 <crc32_table>:
     1b2:	00 00 00 00 64 10 b7 1d c8 20 6e 3b ac 30 d9 26     ....d.... n;.0.&
     1c2:	90 41 dc 76 f4 51 6b 6b 58 61 b2 4d 3c 71 05 50     .A.v.QkkXa.M<q.P
     1d2:	20 83 b8 ed 44 93 0f f0 e8 a3 d6 d6 8c b3 61 cb      ...D.........a.
     1e2:	b0 c2 64 9b d4 d2 d3 86 78 e2 0a a0 1c f2 bd bd     ..d.....x.......

000001f2 <_usart1_pins>:
     1f2:	00 0e 10 04 12 14 0c 00 0c 00                       ..........

000001fc <__ctors_start>:
__ctors_start():
     1fc:	e5 07       	cpc	r30, r21

000001fe <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     1fe:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     200:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     202:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     204:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     206:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
     208:	de bf       	out	0x3e, r29	; 62

0000020a <_initThreeStuff()>:
init_reset_flags():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:100

  /* Minimum: Reset if we wound up here through malfunction - this relies on user clearing the  *
   * register on startup, which is rarely done in Arduino land.                                 */
  void __attribute__((weak)) init_reset_flags() ;
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
     20a:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x7e0040>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:101
    RSTCTRL.RSTFR = flags;
     20e:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7e0040>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:102
    if (flags == 0) {
     212:	81 11       	cpse	r24, r1
     214:	05 c0       	rjmp	.+10     	; 0x220 <_initThreeStuff()+0x16>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:103
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
     216:	98 ed       	ldi	r25, 0xD8	; 216
     218:	21 e0       	ldi	r18, 0x01	; 1
     21a:	94 bf       	out	0x34, r25	; 52
     21c:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <__TEXT_REGION_LENGTH__+0x7e0041>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:105
    }
    GPIOR0 = flags;
     220:	8c bb       	out	0x1c, r24	; 28

00000222 <__do_copy_data>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     222:	11 e4       	ldi	r17, 0x41	; 65
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     224:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     226:	b0 e4       	ldi	r27, 0x40	; 64
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     228:	e2 e1       	ldi	r30, 0x12	; 18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     22a:	fd e1       	ldi	r31, 0x1D	; 29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     22c:	00 e0       	ldi	r16, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     22e:	0b bf       	out	0x3b, r16	; 59
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     232:	07 90       	elpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     234:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     236:	a2 34       	cpi	r26, 0x42	; 66
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     238:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>

0000023c <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     23c:	25 e4       	ldi	r18, 0x45	; 69
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     23e:	a2 e4       	ldi	r26, 0x42	; 66
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     240:	b1 e4       	ldi	r27, 0x41	; 65
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     242:	01 c0       	rjmp	.+2      	; 0x246 <.do_clear_bss_start>

00000244 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     244:	1d 92       	st	X+, r1

00000246 <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     246:	a1 3a       	cpi	r26, 0xA1	; 161
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     248:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     24a:	e1 f7       	brne	.-8      	; 0x244 <.do_clear_bss_loop>

0000024c <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     24c:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     24e:	cf ef       	ldi	r28, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     250:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     252:	04 c0       	rjmp	.+8      	; 0x25c <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     254:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     256:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     258:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     25c:	ce 3f       	cpi	r28, 0xFE	; 254
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     25e:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     260:	c9 f7       	brne	.-14     	; 0x254 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     262:	ee d6       	rcall	.+3548   	; 0x1040 <main>
../../../../crt1/gcrt1.S:315
     264:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <_exit>

00000268 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     268:	cb ce       	rjmp	.-618    	; 0x0 <__vectors>

0000026a <TWI_MasterWrite.constprop.55>:
TWI_MasterWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:311
  #else                                                   // Separate tx/rx Buffers
    uint8_t* txHead   = &(_data->_bytesToWrite);
    uint8_t* txBuffer =   _data->_txBuffer;
  #endif

  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
     26a:	e0 91 0b 44 	lds	r30, 0x440B	; 0x80440b <Wire+0xc>
     26e:	f0 91 0c 44 	lds	r31, 0x440C	; 0x80440c <Wire+0xd>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:320
  uint8_t currentStatus;
  uint8_t dataWritten = 0;
  uint16_t timeout = 0;


    if (((module->MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_UNKNOWN_gc) || // If the bus was not initialized
     272:	85 81       	ldd	r24, Z+5	; 0x05
     274:	83 70       	andi	r24, 0x03	; 3
     276:	09 f4       	brne	.+2      	; 0x27a <TWI_MasterWrite.constprop.55+0x10>
     278:	42 c0       	rjmp	.+132    	; 0x2fe <TWI_MasterWrite.constprop.55+0x94>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:321
      ((module->MCTRLA & TWI_ENABLE_bm) == false)) {  // Or is disabled,
     27a:	83 81       	ldd	r24, Z+3	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:320
  uint8_t currentStatus;
  uint8_t dataWritten = 0;
  uint16_t timeout = 0;


    if (((module->MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_UNKNOWN_gc) || // If the bus was not initialized
     27c:	80 ff       	sbrs	r24, 0
     27e:	3f c0       	rjmp	.+126    	; 0x2fe <TWI_MasterWrite.constprop.55+0x94>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:349
        TWI_SET_ERROR(TWI_ERR_BUS_ARB);         // set error flag
        break;                                  // leave TX loop
    }

    if (currentSM == TWI_BUSSTATE_IDLE_gc) {                      // Bus has not sent START yet and is not BUSY
        module->MADDR = ADD_WRITE_BIT(_data->_clientAddress);
     280:	50 91 0f 44 	lds	r21, 0x440F	; 0x80440f <Wire+0x10>
     284:	5e 7f       	andi	r21, 0xFE	; 254
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:317
                                      // creates bloat-y code, this fixes it
  TWI_INIT_ERROR;
  uint8_t currentSM;
  uint8_t currentStatus;
  uint8_t dataWritten = 0;
  uint16_t timeout = 0;
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	20 e0       	ldi	r18, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:316
  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
                                      // creates bloat-y code, this fixes it
  TWI_INIT_ERROR;
  uint8_t currentSM;
  uint8_t currentStatus;
  uint8_t dataWritten = 0;
     28a:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:326
      ((module->MCTRLA & TWI_ENABLE_bm) == false)) {  // Or is disabled,
      return TWI_ERR_UNINIT;                          // return
    }

  while (true) {
    currentStatus = module->MSTATUS;
     28c:	45 81       	ldd	r20, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:327
    currentSM = currentStatus & TWI_BUSSTATE_gm;  // get the current mode of the state machine
     28e:	84 2f       	mov	r24, r20
     290:	83 70       	andi	r24, 0x03	; 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:330

    #if defined(TWI_TIMEOUT_ENABLE)
      if (++timeout > (F_CPU/1000)) {
     292:	2f 5f       	subi	r18, 0xFF	; 255
     294:	3f 4f       	sbci	r19, 0xFF	; 255
     296:	21 31       	cpi	r18, 0x11	; 17
     298:	67 e2       	ldi	r22, 0x27	; 39
     29a:	36 07       	cpc	r19, r22
     29c:	40 f0       	brcs	.+16     	; 0x2ae <TWI_MasterWrite.constprop.55+0x44>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:331
        if        (currentSM == TWI_BUSSTATE_OWNER_gc) {
     29e:	82 30       	cpi	r24, 0x02	; 2
     2a0:	41 f1       	breq	.+80     	; 0x2f2 <TWI_MasterWrite.constprop.55+0x88>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:333
          TWI_SET_ERROR(TWI_ERR_TIMEOUT);
        } else if (currentSM == TWI_BUSSTATE_IDLE_gc) {
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	41 f1       	breq	.+80     	; 0x2f6 <TWI_MasterWrite.constprop.55+0x8c>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:336
          TWI_SET_ERROR(TWI_ERR_PULLUP);
        } else {
          TWI_SET_ERROR(TWI_ERR_UNDEFINED);
     2a6:	84 e0       	ldi	r24, 0x04	; 4
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:372
    }
  }


  if ((send_stop != 0) || (TWI_ERR_SUCCESS != TWI_GET_ERROR)) {
    module->MCTRLB = TWI_MCMD_STOP_gc;                        // Send STOP
     2a8:	93 e0       	ldi	r25, 0x03	; 3
     2aa:	94 83       	std	Z+4, r25	; 0x04
     2ac:	08 95       	ret
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:342
        }
        break;
      }
    #endif

    if   (currentStatus & TWI_ARBLOST_bm) {     // Check for Bus error
     2ae:	43 ff       	sbrs	r20, 3
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <TWI_MasterWrite.constprop.55+0x50>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:343
        module->MSTATUS = TWI_ARBLOST_bm;       // reset error flags
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	85 83       	std	Z+5, r24	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:344
        TWI_SET_ERROR(TWI_ERR_BUS_ARB);         // set error flag
     2b6:	82 e1       	ldi	r24, 0x12	; 18
     2b8:	f7 cf       	rjmp	.-18     	; 0x2a8 <TWI_MasterWrite.constprop.55+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:348
        break;                                  // leave TX loop
    }

    if (currentSM == TWI_BUSSTATE_IDLE_gc) {                      // Bus has not sent START yet and is not BUSY
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	21 f4       	brne	.+8      	; 0x2c6 <TWI_MasterWrite.constprop.55+0x5c>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:349
        module->MADDR = ADD_WRITE_BIT(_data->_clientAddress);
     2be:	57 83       	std	Z+7, r21	; 0x07
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:361
          break;                                                  // leave loop
        } else {                                                  // otherwise WRITE was ACKed
          if (dataWritten < (*txHead)) {                          // check if there is data to be written
            module->MDATA = txBuffer[dataWritten];                // Writing to the register to send data
            dataWritten++;                                        // data was Written
            timeout = 0;                                          // reset timeout
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	e3 cf       	rjmp	.-58     	; 0x28c <TWI_MasterWrite.constprop.55+0x22>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:351
    }

    if (currentSM == TWI_BUSSTATE_IDLE_gc) {                      // Bus has not sent START yet and is not BUSY
        module->MADDR = ADD_WRITE_BIT(_data->_clientAddress);
        timeout = 0;
    } else if (currentSM == TWI_BUSSTATE_OWNER_gc) {              // Address was sent, host is owner
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	09 f7       	brne	.-62     	; 0x28c <TWI_MasterWrite.constprop.55+0x22>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:352
      if     (currentStatus & TWI_WIF_bm) {                       // data sent
     2ca:	46 ff       	sbrs	r20, 6
     2cc:	df cf       	rjmp	.-66     	; 0x28c <TWI_MasterWrite.constprop.55+0x22>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:353
        if   (currentStatus & TWI_RXACK_bm) {                     // AND the RXACK bit is set, last byte has failed
     2ce:	44 ff       	sbrs	r20, 4
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <TWI_MasterWrite.constprop.55+0x70>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:354
          if (dataWritten == 0) TWI_SET_ERROR(TWI_ERR_ACK_ADR);   // if dataWritten is 0, no payload was sent, so address was NACKed
     2d2:	99 23       	and	r25, r25
     2d4:	49 f3       	breq	.-46     	; 0x2a8 <TWI_MasterWrite.constprop.55+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:355
          else                  TWI_SET_ERROR(TWI_ERR_ACK_DAT);   // else payload was NACKed
     2d6:	83 e0       	ldi	r24, 0x03	; 3
     2d8:	e7 cf       	rjmp	.-50     	; 0x2a8 <TWI_MasterWrite.constprop.55+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:358
          break;                                                  // leave loop
        } else {                                                  // otherwise WRITE was ACKed
          if (dataWritten < (*txHead)) {                          // check if there is data to be written
     2da:	80 91 10 44 	lds	r24, 0x4410	; 0x804410 <Wire+0x11>
     2de:	98 17       	cp	r25, r24
     2e0:	60 f4       	brcc	.+24     	; 0x2fa <TWI_MasterWrite.constprop.55+0x90>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:359
            module->MDATA = txBuffer[dataWritten];                // Writing to the register to send data
     2e2:	a9 2f       	mov	r26, r25
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	a5 5e       	subi	r26, 0xE5	; 229
     2e8:	bb 4b       	sbci	r27, 0xBB	; 187
     2ea:	8c 91       	ld	r24, X
     2ec:	80 87       	std	Z+8, r24	; 0x08
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:360
            dataWritten++;                                        // data was Written
     2ee:	9f 5f       	subi	r25, 0xFF	; 255
     2f0:	e7 cf       	rjmp	.-50     	; 0x2c0 <TWI_MasterWrite.constprop.55+0x56>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:332
    currentSM = currentStatus & TWI_BUSSTATE_gm;  // get the current mode of the state machine

    #if defined(TWI_TIMEOUT_ENABLE)
      if (++timeout > (F_CPU/1000)) {
        if        (currentSM == TWI_BUSSTATE_OWNER_gc) {
          TWI_SET_ERROR(TWI_ERR_TIMEOUT);
     2f2:	85 e0       	ldi	r24, 0x05	; 5
     2f4:	d9 cf       	rjmp	.-78     	; 0x2a8 <TWI_MasterWrite.constprop.55+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:334
        } else if (currentSM == TWI_BUSSTATE_IDLE_gc) {
          TWI_SET_ERROR(TWI_ERR_PULLUP);
     2f6:	81 e1       	ldi	r24, 0x11	; 17
     2f8:	d7 cf       	rjmp	.-82     	; 0x2a8 <TWI_MasterWrite.constprop.55+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:313
    uint8_t* txBuffer =   _data->_txBuffer;
  #endif

  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
                                      // creates bloat-y code, this fixes it
  TWI_INIT_ERROR;
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	d5 cf       	rjmp	.-86     	; 0x2a8 <TWI_MasterWrite.constprop.55+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:322
  uint16_t timeout = 0;


    if (((module->MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_UNKNOWN_gc) || // If the bus was not initialized
      ((module->MCTRLA & TWI_ENABLE_bm) == false)) {  // Or is disabled,
      return TWI_ERR_UNINIT;                          // return
     2fe:	80 e1       	ldi	r24, 0x10	; 16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:375

  if ((send_stop != 0) || (TWI_ERR_SUCCESS != TWI_GET_ERROR)) {
    module->MCTRLB = TWI_MCMD_STOP_gc;                        // Send STOP
  }
  return TWI_GET_ERROR;
}
     300:	08 95       	ret

00000302 <TwoWire::slaveTransactionOpen() [clone .constprop.6]>:
slaveTransactionOpen():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:615
 *              must be polled if it is necessary to know when this has concluded, as the
 *              onRequest handler is called at the start of a read only.
 */

uint8_t TwoWire::slaveTransactionOpen() {
   if (vars._module->SSTATUS & (TWI_DIR_bm | TWI_AP_bm)) return 2;
     302:	e0 91 0b 44 	lds	r30, 0x440B	; 0x80440b <Wire+0xc>
     306:	f0 91 0c 44 	lds	r31, 0x440C	; 0x80440c <Wire+0xd>
     30a:	83 85       	ldd	r24, Z+11	; 0x0b
     30c:	83 70       	andi	r24, 0x03	; 3
     30e:	19 f4       	brne	.+6      	; 0x316 <TwoWire::slaveTransactionOpen() [clone .constprop.6]+0x14>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:616
   if (vars._module->SSTATUS & TWI_AP_bm) return 1; // Slave Status is a volatile register, thus two loads
     310:	83 85       	ldd	r24, Z+11	; 0x0b
     312:	81 70       	andi	r24, 0x01	; 1
     314:	08 95       	ret
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:615
 *              must be polled if it is necessary to know when this has concluded, as the
 *              onRequest handler is called at the start of a read only.
 */

uint8_t TwoWire::slaveTransactionOpen() {
   if (vars._module->SSTATUS & (TWI_DIR_bm | TWI_AP_bm)) return 2;
     316:	82 e0       	ldi	r24, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:618
   if (vars._module->SSTATUS & TWI_AP_bm) return 1; // Slave Status is a volatile register, thus two loads
   return 0;
}
     318:	08 95       	ret

0000031a <micros>:
micros():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:210
      #else
        uint8_t ticks;
      #endif
      uint8_t flags;
      /* Save current state and disable interrupts */
      uint8_t oldSREG = SREG;
     31a:	9f b7       	in	r25, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:211
      cli();
     31c:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:226
        TCD0.CTRLE = TCD_SCAPTUREA_bm;
        while (!(TCD0.STATUS & TCD_CMDRDY_bm)); // wait for sync - should be only one iteration of this loop
        flags = TCD0.INTFLAGS;
        ticks = TCD0.CAPTUREA;
      #else
        ticks = _timer->CNT;
     31e:	e0 91 2a 0b 	lds	r30, 0x0B2A	; 0x800b2a <__TEXT_REGION_LENGTH__+0x7e0b2a>
     322:	f0 91 2b 0b 	lds	r31, 0x0B2B	; 0x800b2b <__TEXT_REGION_LENGTH__+0x7e0b2b>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:227
        flags = _timer->INTFLAGS;
     326:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:238
       * Next, get the current number of overflows
       */
      #if defined(MILLIS_USE_TIMERA0) || defined(MILLIS_USE_TIMERA1) || defined(MILLIS_USE_TIMERD0)
        overflows = timer_overflow_count;
      #else
        overflows = timer_millis;
     32a:	20 91 c2 41 	lds	r18, 0x41C2	; 0x8041c2 <timer_millis>
     32e:	30 91 c3 41 	lds	r19, 0x41C3	; 0x8041c3 <timer_millis+0x1>
     332:	40 91 c4 41 	lds	r20, 0x41C4	; 0x8041c4 <timer_millis+0x2>
     336:	50 91 c5 41 	lds	r21, 0x41C5	; 0x8041c5 <timer_millis+0x3>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:242
      #endif

      /* Turn interrupts back on, assuming they were on when micros was called. */
      SREG = oldSREG;
     33a:	9f bf       	out	0x3f, r25	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:263
          }
        #else
          // here, ticks is F_CPU/2000 so it's trickier to pick something to check against.
          // Why not just do a damned normal compare? that bitwise and saved like 2-3 clocks, and vastly decreased our tolerance to disabled interrupts.
          #define OVERFLOW_THRESHOLD ((F_CPU / 2000) - 500)
          if ((flags & TCB_CAPT_bm) && (ticks < OVERFLOW_THRESHOLD)) {
     33c:	80 ff       	sbrs	r24, 0
     33e:	08 c0       	rjmp	.+16     	; 0x350 <micros+0x36>
     340:	e4 39       	cpi	r30, 0x94	; 148
     342:	81 e1       	ldi	r24, 0x11	; 17
     344:	f8 07       	cpc	r31, r24
     346:	20 f4       	brcc	.+8      	; 0x350 <micros+0x36>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:264
            overflows++;
     348:	2f 5f       	subi	r18, 0xFF	; 255
     34a:	3f 4f       	sbci	r19, 0xFF	; 255
     34c:	4f 4f       	sbci	r20, 0xFF	; 255
     34e:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:476
         * 46 replaced with 25 save 21 clocks @ 10 = 2.5 us saved
         * 56 replaced with 27 save 29 clocks @ 20 = 1.5 us saved
         * 66 replaced with 29 save 37 clocks @ 40 = 1 us saved
         */
        #elif (F_CPU == 40000000UL || F_CPU == 20000000UL || F_CPU == 10000000UL || F_CPU == 5000000UL)
          __asm__ __volatile__(
     350:	0f 01       	movw	r0, r30
     352:	16 94       	lsr	r1
     354:	07 94       	ror	r0
     356:	16 94       	lsr	r1
     358:	07 94       	ror	r0
     35a:	f0 01       	movw	r30, r0
     35c:	16 94       	lsr	r1
     35e:	07 94       	ror	r0
     360:	16 94       	lsr	r1
     362:	07 94       	ror	r0
     364:	e0 19       	sub	r30, r0
     366:	f1 09       	sbc	r31, r1
     368:	16 94       	lsr	r1
     36a:	07 94       	ror	r0
     36c:	06 94       	lsr	r0
     36e:	10 2c       	mov	r1, r0
     370:	16 94       	lsr	r1
     372:	16 94       	lsr	r1
     374:	01 18       	sub	r0, r1
     376:	16 94       	lsr	r1
     378:	16 94       	lsr	r1
     37a:	01 0c       	add	r0, r1
     37c:	11 24       	eor	r1, r1
     37e:	e0 0d       	add	r30, r0
     380:	f1 1d       	adc	r31, r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:513
            "add r0,r1"     "\n\t"  // + ticks >> 8
            "eor r1,r1"     "\n\t"  // restore zero_reg
            "add %A0,r0"    "\n\t"  // add to the shifted ticks
            "adc %B0,r1"    "\n"    // carry
            : "+r" (ticks));        // Do the rest in C
          microseconds = overflows * 1000 + ticks;
     382:	a8 ee       	ldi	r26, 0xE8	; 232
     384:	b3 e0       	ldi	r27, 0x03	; 3
     386:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__muluhisi3>
     38a:	6e 0f       	add	r22, r30
     38c:	7f 1f       	adc	r23, r31
     38e:	81 1d       	adc	r24, r1
     390:	91 1d       	adc	r25, r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:614
          microseconds = ((overflows *  clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                            + (ticks * (clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
        #endif
      #endif // end of timer-specific part of micros calculations
      return microseconds;
    }
     392:	08 95       	ret

00000394 <delay>:
delay():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:649

#if (!(defined(MILLIS_USE_TIMERNONE) || defined(MILLIS_USE_TIMERRTC) || (F_CPU == 7000000L || F_CPU == 14000000)))
  // delay implementation when we do have micros() - we know it won't work at 7 or 14, and those can be generated
  // from internal, and switch logic is in even though micros isn't.
  void delay(unsigned long ms)
  {
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	4b 01       	movw	r8, r22
     3a6:	5c 01       	movw	r10, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:650
    uint32_t start = micros();
     3a8:	b8 df       	rcall	.-144    	; 0x31a <micros>
     3aa:	6b 01       	movw	r12, r22
     3ac:	7c 01       	movw	r14, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:653
    while (ms > 0) {
      yield();
      while (ms > 0 && (micros() - start) >= 1000) {
     3ae:	b5 df       	rcall	.-150    	; 0x31a <micros>
     3b0:	6c 19       	sub	r22, r12
     3b2:	7d 09       	sbc	r23, r13
     3b4:	8e 09       	sbc	r24, r14
     3b6:	9f 09       	sbc	r25, r15
     3b8:	68 3e       	cpi	r22, 0xE8	; 232
     3ba:	73 40       	sbci	r23, 0x03	; 3
     3bc:	81 05       	cpc	r24, r1
     3be:	91 05       	cpc	r25, r1
     3c0:	b0 f3       	brcs	.-20     	; 0x3ae <delay+0x1a>
     3c2:	21 e0       	ldi	r18, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:654
        ms--;
     3c4:	82 1a       	sub	r8, r18
     3c6:	91 08       	sbc	r9, r1
     3c8:	a1 08       	sbc	r10, r1
     3ca:	b1 08       	sbc	r11, r1
     3cc:	88 ee       	ldi	r24, 0xE8	; 232
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:655
        start += 1000;
     3ce:	c8 0e       	add	r12, r24
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	d8 1e       	adc	r13, r24
     3d4:	e1 1c       	adc	r14, r1
     3d6:	f1 1c       	adc	r15, r1
     3d8:	81 14       	cp	r8, r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:653
  void delay(unsigned long ms)
  {
    uint32_t start = micros();
    while (ms > 0) {
      yield();
      while (ms > 0 && (micros() - start) >= 1000) {
     3da:	91 04       	cpc	r9, r1
     3dc:	a1 04       	cpc	r10, r1
     3de:	b1 04       	cpc	r11, r1
     3e0:	31 f7       	brne	.-52     	; 0x3ae <delay+0x1a>
     3e2:	ff 90       	pop	r15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:658
        ms--;
        start += 1000;
      }
    }
  }
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	bf 90       	pop	r11
     3ec:	af 90       	pop	r10
     3ee:	9f 90       	pop	r9
     3f0:	8f 90       	pop	r8
     3f2:	08 95       	ret

000003f4 <Print::write(unsigned char const*, unsigned int)>:
write():
     3f4:	af 92       	push	r10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:30

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	6c 01       	movw	r12, r24
     40a:	7b 01       	movw	r14, r22
     40c:	8b 01       	movw	r16, r22
     40e:	04 0f       	add	r16, r20
     410:	15 1f       	adc	r17, r21
     412:	eb 01       	movw	r28, r22
     414:	5e 01       	movw	r10, r28
     416:	ae 18       	sub	r10, r14
     418:	bf 08       	sbc	r11, r15
     41a:	c0 17       	cp	r28, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:32
  size_t n = 0;
  while (size--) {
     41c:	d1 07       	cpc	r29, r17
     41e:	59 f0       	breq	.+22     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     420:	69 91       	ld	r22, Y+
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:33
    if (write(*buffer++)) n++;
     422:	d6 01       	movw	r26, r12
     424:	ed 91       	ld	r30, X+
     426:	fc 91       	ld	r31, X
     428:	01 90       	ld	r0, Z+
     42a:	f0 81       	ld	r31, Z
     42c:	e0 2d       	mov	r30, r0
     42e:	c6 01       	movw	r24, r12
     430:	09 95       	icall
     432:	89 2b       	or	r24, r25
     434:	79 f7       	brne	.-34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     436:	c5 01       	movw	r24, r10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:37
    else break;
  }
  return n;
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	08 95       	ret

0000044e <UartClass::availableForWrite()>:
availableForWrite():
     44e:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:458
int UartClass::availableForWrite(void) {
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     450:	55 89       	ldd	r21, Z+21	; 0x15
     452:	46 89       	ldd	r20, Z+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:459
    tail = _tx_buffer_tail;
     454:	25 2f       	mov	r18, r21
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	84 2f       	mov	r24, r20
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	82 1b       	sub	r24, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:462
  }
  if (head >= tail) {
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     45e:	93 0b       	sbc	r25, r19
     460:	54 17       	cp	r21, r20
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:461

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    tail = _tx_buffer_tail;
  }
  if (head >= tail) {
     462:	10 f0       	brcs	.+4      	; 0x468 <UartClass::availableForWrite()+0x1a>
     464:	cf 96       	adiw	r24, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:462
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     466:	08 95       	ret
     468:	01 97       	sbiw	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:464
  }
  return tail - head - 1;
     46a:	08 95       	ret

0000046c <UartClass::read()>:
read():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:465
}
     46c:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:442
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}

int UartClass::read(void) {
     46e:	93 89       	ldd	r25, Z+19	; 0x13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:444
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     470:	84 89       	ldd	r24, Z+20	; 0x14
     472:	98 17       	cp	r25, r24
     474:	61 f0       	breq	.+24     	; 0x48e <UartClass::read()+0x22>
     476:	a4 89       	ldd	r26, Z+20	; 0x14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:447
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     478:	ae 0f       	add	r26, r30
     47a:	bf 2f       	mov	r27, r31
     47c:	b1 1d       	adc	r27, r1
     47e:	57 96       	adiw	r26, 0x17	; 23
     480:	8c 91       	ld	r24, X
     482:	94 89       	ldd	r25, Z+20	; 0x14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:448
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1);   // % SERIAL_RX_BUFFER_SIZE;
     484:	9f 5f       	subi	r25, 0xFF	; 255
     486:	9f 73       	andi	r25, 0x3F	; 63
     488:	94 8b       	std	Z+20, r25	; 0x14
     48a:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:449
    return c;
     48c:	08 95       	ret
     48e:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:445
}

int UartClass::read(void) {
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     490:	9f ef       	ldi	r25, 0xFF	; 255
     492:	08 95       	ret

00000494 <UartClass::peek()>:
peek():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:451
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1);   // % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     494:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:434

int UartClass::available(void) {
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
}

int UartClass::peek(void) {
     496:	93 89       	ldd	r25, Z+19	; 0x13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:435
  if (_rx_buffer_head == _rx_buffer_tail) {
     498:	84 89       	ldd	r24, Z+20	; 0x14
     49a:	98 17       	cp	r25, r24
     49c:	31 f0       	breq	.+12     	; 0x4aa <UartClass::peek()+0x16>
     49e:	84 89       	ldd	r24, Z+20	; 0x14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:438
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     4a0:	e8 0f       	add	r30, r24
     4a2:	f1 1d       	adc	r31, r1
     4a4:	87 89       	ldd	r24, Z+23	; 0x17
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	08 95       	ret
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:436
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
}

int UartClass::peek(void) {
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     4ac:	9f ef       	ldi	r25, 0xFF	; 255
     4ae:	08 95       	ret

000004b0 <UartClass::available()>:
available():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:440
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     4b0:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:430
  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
}

int UartClass::available(void) {
     4b2:	93 89       	ldd	r25, Z+19	; 0x13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:431
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
     4b4:	24 89       	ldd	r18, Z+20	; 0x14
     4b6:	89 2f       	mov	r24, r25
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	80 5c       	subi	r24, 0xC0	; 192
     4bc:	9f 4f       	sbci	r25, 0xFF	; 255
     4be:	82 1b       	sub	r24, r18
     4c0:	91 09       	sbc	r25, r1
     4c2:	8f 73       	andi	r24, 0x3F	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:432
}
     4c4:	99 27       	eor	r25, r25
     4c6:	08 95       	ret

000004c8 <UartClass::end()>:
end():
     4c8:	cf 93       	push	r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:415
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_usart_pins, _mux_count, _pin_set, setpinmask);
  SREG=oldSREG;
}

void UartClass::end() {
     4ca:	df 93       	push	r29
     4cc:	ec 01       	movw	r28, r24
     4ce:	e8 81       	ld	r30, Y
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:417
  // wait for transmission of outgoing data
  flush();
     4d0:	f9 81       	ldd	r31, Y+1	; 0x01
     4d2:	06 80       	ldd	r0, Z+6	; 0x06
     4d4:	f7 81       	ldd	r31, Z+7	; 0x07
     4d6:	e0 2d       	mov	r30, r0
     4d8:	09 95       	icall
     4da:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:419
  // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
  volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
     4dc:	fd 85       	ldd	r31, Y+13	; 0x0d
     4de:	86 81       	ldd	r24, Z+6	; 0x06
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:420
  temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
     4e0:	16 82       	std	Z+6, r1	; 0x06
     4e2:	85 81       	ldd	r24, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:421
  temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
     4e4:	15 82       	std	Z+5, r1	; 0x05
     4e6:	80 e4       	ldi	r24, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:422
  temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error. TXCIE only used in half duplex
     4e8:	84 83       	std	Z+4, r24	; 0x04
     4ea:	8c 89       	ldd	r24, Y+20	; 0x14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:424
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     4ec:	8b 8b       	std	Y+19, r24	; 0x13
     4ee:	1a 8a       	std	Y+18, r1	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:427
  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
     4f0:	df 91       	pop	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:428
}
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <UartClass::begin(unsigned long, unsigned int)>:
begin():
     4f6:	8f 92       	push	r8
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:359
    _pin_set = 0;
  }
  return false;
}

void UartClass::begin(unsigned long baud, uint16_t options) {
     4f8:	9f 92       	push	r9
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	8c 01       	movw	r16, r24
     50a:	4a 01       	movw	r8, r20
     50c:	5b 01       	movw	r10, r22
     50e:	d2 2f       	mov	r29, r18
     510:	c3 2f       	mov	r28, r19
     512:	dc 01       	movw	r26, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:362
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_state & 1) {
     514:	52 96       	adiw	r26, 0x12	; 18
     516:	8c 91       	ld	r24, X
     518:	52 97       	sbiw	r26, 0x12	; 18
     51a:	80 ff       	sbrs	r24, 0
     51c:	07 c0       	rjmp	.+14     	; 0x52c <UartClass::begin(unsigned long, unsigned int)+0x36>
     51e:	ed 91       	ld	r30, X+
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:363
    this->end();
     520:	fc 91       	ld	r31, X
     522:	02 88       	ldd	r0, Z+18	; 0x12
     524:	f3 89       	ldd	r31, Z+19	; 0x13
     526:	e0 2d       	mov	r30, r0
     528:	c8 01       	movw	r24, r16
     52a:	09 95       	icall
     52c:	d1 11       	cpse	r29, r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:367
  }

  uint8_t ctrlc = (uint8_t) options;
  if (ctrlc == 0) {                                 // low byte of 0 could mean they want SERIAL_5N1.
     52e:	01 c0       	rjmp	.+2      	; 0x532 <UartClass::begin(unsigned long, unsigned int)+0x3c>
     530:	d3 e0       	ldi	r29, 0x03	; 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:368
    ctrlc = (uint8_t)SERIAL_8N1;                    // Or that they were expecting to modify the default.
     532:	fd 2e       	mov	r15, r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:370
  }                                                 // unused bit 0x04 is set 1 for the special case of 5N1 only, and we unset it...
  ctrlc &= ~0x04;                                   // ... as none of the values with it set are supported.
     534:	e8 94       	clt
     536:	f2 f8       	bld	r15, 2
     538:	dc 2f       	mov	r29, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:373
  uint8_t   ctrla =(uint8_t) (options >> 8);        // CTRLA will get the remains of the options high byte.
  uint16_t baud_setting = 0;                        // at this point it should be able to reuse those 2 registers that it received options in!
  uint8_t         ctrlb = (~ctrla & 0xC0);          // Top two bits (TXEN RXEN), inverted so they match he sense in the registers - we could return here, but we don't cae about speed, and it'd be 4 more bytes
     53a:	d0 95       	com	r29
     53c:	d0 7c       	andi	r29, 0xC0	; 192
     53e:	b9 e6       	ldi	r27, 0x69	; 105
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:374
  if (baud > F_CPU / 16) {                          // if this baud is too fast for non-U2X
     540:	8b 16       	cp	r8, r27
     542:	b9 e8       	ldi	r27, 0x89	; 137
     544:	9b 06       	cpc	r9, r27
     546:	b9 e0       	ldi	r27, 0x09	; 9
     548:	ab 06       	cpc	r10, r27
     54a:	b1 04       	cpc	r11, r1
     54c:	28 f0       	brcs	.+10     	; 0x558 <UartClass::begin(unsigned long, unsigned int)+0x62>
     54e:	d2 60       	ori	r29, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:375
    ctrlb              |= USART_RXMODE0_bm;         // set the U2X bit in what will become CTRLB
     550:	b6 94       	lsr	r11
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:376
    baud              >>= 1;                        // And lower the baud rate by haldf
     552:	a7 94       	ror	r10
     554:	97 94       	ror	r9
     556:	87 94       	ror	r8
     558:	60 e0       	ldi	r22, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:378
  }
  baud_setting          = (((4 * F_CPU) / baud));   // And now the registers that baud was passed in are done.
     55a:	7a e5       	ldi	r23, 0x5A	; 90
     55c:	82 e6       	ldi	r24, 0x62	; 98
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	a5 01       	movw	r20, r10
     562:	94 01       	movw	r18, r8
     564:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__udivmodsi4>
     568:	c9 01       	movw	r24, r18
     56a:	20 34       	cpi	r18, 0x40	; 64
     56c:	31 05       	cpc	r19, r1
     56e:	10 f4       	brcc	.+4      	; 0x574 <UartClass::begin(unsigned long, unsigned int)+0x7e>
     570:	80 e4       	ldi	r24, 0x40	; 64
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	3c 2f       	mov	r19, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:384
  if (baud_setting < 64){                           // so set to the maximum baud rate setting.
    baud_setting = 64;       // set the U2X bit in what will become CTRLB
  }
  // Baud setting done now we do the other options.
  // that aren't in CTRLC;
  ctrla &= 0x2B;                            // Only LBME and RS485 (both of them); will get written to CTRLA, but we leave the event bit.
     576:	3b 72       	andi	r19, 0x2B	; 43
     578:	d7 fd       	sbrc	r29, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:385
  if (ctrlb & USART_RXEN_bm) {              // if RX is to be enabled
     57a:	30 68       	ori	r19, 0x80	; 128
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:386
    ctrla  |= USART_RXCIE_bm;               // we will want to enable the ISR.
     57c:	4d 2f       	mov	r20, r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:388
  }
  uint8_t setpinmask = ctrlb & 0xC8;        // ODME in bit 3, TX and RX enabled in bit 6, 7
     57e:	48 7c       	andi	r20, 0xC8	; 200
     580:	30 fd       	sbrc	r19, 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:393
  if ((ctrla & USART_LBME_bm) && (setpinmask == 0xC8)) { // if it's open-drain and loopback AND both TX and RX are enabled, need to set state bit 2.
    _state                 |= 2;            // since that changes some behavior (RXC disabled while sending) // Now we should be able to ST _state.
    setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
  }
  if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
     582:	41 60       	ori	r20, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:394
    setpinmask             |= 0x01;         // set pin output if we need to do that.
     584:	5f b7       	in	r21, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:396
  }
  uint8_t oldSREG = SREG;
     586:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:397
  cli();
     588:	d8 01       	movw	r26, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:398
  volatile USART_t* MyUSART = _hwserial_module;
     58a:	1c 96       	adiw	r26, 0x0c	; 12
     58c:	ed 91       	ld	r30, X+
     58e:	fc 91       	ld	r31, X
     590:	16 82       	std	Z+6, r1	; 0x06
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:399
  (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
     592:	f7 82       	std	Z+7, r15	; 0x07
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:400
  (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
     594:	80 87       	std	Z+8, r24	; 0x08
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:401
  (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
     596:	91 87       	std	Z+9, r25	; 0x09
     598:	35 ff       	sbrs	r19, 5
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:402
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
     59a:	8f c0       	rjmp	.+286    	; 0x6ba <UartClass::begin(unsigned long, unsigned int)+0x1c4>
     59c:	4f 77       	andi	r20, 0x7F	; 127
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:403
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
     59e:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:404
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
     5a0:	84 87       	std	Z+12, r24	; 0x0c
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:405
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
     5a4:	85 87       	std	Z+13, r24	; 0x0d
     5a6:	3f 7d       	andi	r19, 0xDF	; 223
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:409
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
     5a8:	35 83       	std	Z+5, r19	; 0x05
     5aa:	d6 83       	std	Z+6, r29	; 0x06
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:410
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
     5ac:	f8 01       	movw	r30, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:411
  _set_pins(_usart_pins, _mux_count, _pin_set, setpinmask);
     5ae:	21 89       	ldd	r18, Z+17	; 0x11
     5b0:	c0 89       	ldd	r28, Z+16	; 0x10
     5b2:	86 85       	ldd	r24, Z+14	; 0x0e
     5b4:	97 85       	ldd	r25, Z+15	; 0x0f
_set_pins():
     5b6:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:538
//  1  1  1  0      TX set output, RX not changed. Loopback mode: you can only see what you send since TX is OUTPUT and that's what's connected to RX.
//  1  1  1  1      TX set input pullup. Half-duplex mode.
// * indicates that RS485 mode if requested will be enabled, even though it is inappropriate. These configurations are documented unsupported.
// Static
void UartClass::_set_pins(uint8_t* mux_table_ptr, uint8_t mux_count, uint8_t mux_setting, uint8_t enmask) {
  uint8_t* mux_row_ptr   = mux_table_ptr + (mux_setting * USART_PINS_WIDTH);
     5b8:	33 e0       	ldi	r19, 0x03	; 3
     5ba:	23 9f       	mul	r18, r19
     5bc:	e0 0d       	add	r30, r0
     5be:	f1 1d       	adc	r31, r1
     5c0:	11 24       	eor	r1, r1
     5c2:	65 91       	lpm	r22, Z+
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:539
  uint16_t mux_row_gc_tx = pgm_read_word_near(mux_row_ptr); // Clever trick for faster PGM reads of consecutive bytes!
     5c4:	74 91       	lpm	r23, Z
     5c6:	2c 17       	cp	r18, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:541
  uint8_t mux_group_code = (uint8_t) (mux_row_gc_tx);       // this is the mux
  if (mux_setting < mux_count) {              // if false, pinmux none was selected, and we skip the pin configuration.
     5c8:	08 f0       	brcs	.+2      	; 0x5cc <UartClass::begin(unsigned long, unsigned int)+0xd6>
     5ca:	59 c0       	rjmp	.+178    	; 0x67e <UartClass::begin(unsigned long, unsigned int)+0x188>
     5cc:	27 2f       	mov	r18, r23
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:542
    uint8_t mux_pin_tx   = (uint8_t) (mux_row_gc_tx >> 8);
     5ce:	46 ff       	sbrs	r20, 6
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:543
    if ((enmask & 0x40 && !(enmask & 0x08))) {
     5d0:	76 c0       	rjmp	.+236    	; 0x6be <UartClass::begin(unsigned long, unsigned int)+0x1c8>
_pinMode():
     5d2:	79 32       	cpi	r23, 0x29	; 41
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     5d4:	88 f4       	brcc	.+34     	; 0x5f8 <UartClass::begin(unsigned long, unsigned int)+0x102>
check_valid_digital_pin():
     5d6:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:32
#include "pins_arduino.h"


inline __attribute__((always_inline)) void check_valid_digital_pin(uint8_t pin)
{
  if(__builtin_constant_p(pin)) {
     5d8:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     5da:	e0 50       	subi	r30, 0x00	; 0
     5dc:	f0 4c       	sbci	r31, 0xC0	; 192
     5de:	a0 81       	ld	r26, Z
     5e0:	af 3f       	cpi	r26, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:223
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
     5e2:	51 f0       	breq	.+20     	; 0x5f8 <UartClass::begin(unsigned long, unsigned int)+0x102>
     5e4:	27 5d       	subi	r18, 0xD7	; 215
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:226
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
     5e6:	3f 4b       	sbci	r19, 0xBF	; 191
     5e8:	f9 01       	movw	r30, r18
     5ea:	30 81       	ld	r19, Z
     5ec:	20 e2       	ldi	r18, 0x20	; 32
     5ee:	32 9f       	mul	r19, r18
     5f0:	f0 01       	movw	r30, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	fc 5f       	subi	r31, 0xFC	; 252
     5f6:	a1 83       	std	Z+1, r26	; 0x01
_set_pins():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:229
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
     5f8:	47 ff       	sbrs	r20, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:548
      pinMode(mux_pin_tx, OUTPUT);            // If and only if TX is enabled and open drain isn't should the TX pin be output.
    } else if (enmask & 0x50) {               // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
      pinMode(mux_pin_tx, INPUT_PULLUP);      // TX should be INPUT_PULLUP.
    }
    if (enmask & 0x80 && !(enmask & 0x10)) {  // Likewise if RX is enabled, unless loopback mode is too
     5fa:	2a c0       	rjmp	.+84     	; 0x650 <UartClass::begin(unsigned long, unsigned int)+0x15a>
     5fc:	21 e0       	ldi	r18, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:549
      pinMode(mux_pin_tx + 1, INPUT_PULLUP);  // (in which case we caught it above), it should be pulled up
     5fe:	27 0f       	add	r18, r23
_pinMode():
     600:	29 32       	cpi	r18, 0x29	; 41
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     602:	30 f5       	brcc	.+76     	; 0x650 <UartClass::begin(unsigned long, unsigned int)+0x15a>
check_valid_digital_pin():
     604:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:32
#include "pins_arduino.h"


inline __attribute__((always_inline)) void check_valid_digital_pin(uint8_t pin)
{
  if(__builtin_constant_p(pin)) {
     606:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     608:	e0 50       	subi	r30, 0x00	; 0
     60a:	f0 4c       	sbci	r31, 0xC0	; 192
     60c:	d0 81       	ld	r29, Z
     60e:	df 3f       	cpi	r29, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:223
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
     610:	f9 f0       	breq	.+62     	; 0x650 <UartClass::begin(unsigned long, unsigned int)+0x15a>
     612:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:226
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
     614:	e7 5d       	subi	r30, 0xD7	; 215
     616:	ff 4b       	sbci	r31, 0xBF	; 191
     618:	a0 81       	ld	r26, Z
     61a:	f0 e2       	ldi	r31, 0x20	; 32
     61c:	af 9f       	mul	r26, r31
     61e:	d0 01       	movw	r26, r0
     620:	11 24       	eor	r1, r1
     622:	bc 5f       	subi	r27, 0xFC	; 252
     624:	2e 5a       	subi	r18, 0xAE	; 174
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:232
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
     626:	3f 4b       	sbci	r19, 0xBF	; 191
     628:	f9 01       	movw	r30, r18
     62a:	10 81       	ld	r17, Z
begin():
     62c:	f0 e0       	ldi	r31, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:233
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
     62e:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
     630:	18 30       	cpi	r17, 0x08	; 8
     632:	30 f4       	brcc	.+12     	; 0x640 <UartClass::begin(unsigned long, unsigned int)+0x14a>
     634:	9d 01       	movw	r18, r26
     636:	20 5f       	subi	r18, 0xF0	; 240
     638:	3f 4f       	sbci	r19, 0xFF	; 255
     63a:	f9 01       	movw	r30, r18
     63c:	e1 0f       	add	r30, r17
     63e:	f1 1d       	adc	r31, r1
     640:	3f b7       	in	r19, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:234
    uint8_t status = SREG;              /* Save state */
     642:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
     644:	12 96       	adiw	r26, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
     646:	dc 93       	st	X, r29
     648:	20 81       	ld	r18, Z
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
     64a:	28 60       	ori	r18, 0x08	; 8
     64c:	20 83       	st	Z, r18
     64e:	3f bf       	out	0x3f, r19	; 63
_set_pins():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
     650:	40 ff       	sbrs	r20, 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:551
    }
    if (enmask & 1) {
     652:	15 c0       	rjmp	.+42     	; 0x67e <UartClass::begin(unsigned long, unsigned int)+0x188>
     654:	23 e0       	ldi	r18, 0x03	; 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:552
      pinMode(mux_pin_tx + 3, OUTPUT);        // in RS485 mode we need to make sure that XDIR is an output
     656:	27 0f       	add	r18, r23
_pinMode():
     658:	29 32       	cpi	r18, 0x29	; 41
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     65a:	88 f4       	brcc	.+34     	; 0x67e <UartClass::begin(unsigned long, unsigned int)+0x188>
check_valid_digital_pin():
     65c:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:32
#include "pins_arduino.h"


inline __attribute__((always_inline)) void check_valid_digital_pin(uint8_t pin)
{
  if(__builtin_constant_p(pin)) {
     65e:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     660:	e0 50       	subi	r30, 0x00	; 0
     662:	f0 4c       	sbci	r31, 0xC0	; 192
     664:	40 81       	ld	r20, Z
     666:	4f 3f       	cpi	r20, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:223
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
     668:	51 f0       	breq	.+20     	; 0x67e <UartClass::begin(unsigned long, unsigned int)+0x188>
     66a:	27 5d       	subi	r18, 0xD7	; 215
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:226
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
     66c:	3f 4b       	sbci	r19, 0xBF	; 191
     66e:	d9 01       	movw	r26, r18
     670:	ec 91       	ld	r30, X
     672:	b0 e2       	ldi	r27, 0x20	; 32
     674:	eb 9f       	mul	r30, r27
     676:	f0 01       	movw	r30, r0
     678:	11 24       	eor	r1, r1
     67a:	fc 5f       	subi	r31, 0xFC	; 252
     67c:	41 83       	std	Z+1, r20	; 0x01
_mux_set():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:229
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
     67e:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:498
}

// Static
void UartClass::_mux_set(uint8_t* mux_table_ptr, uint8_t mux_count, uint8_t mux_code) {
#if HWSERIAL_MUX_REG_COUNT > 1  // for big pincount devices that have more then one USART PORTMUX register
  uint8_t* mux_info_ptr = mux_table_ptr + (mux_count * USART_PINS_WIDTH) + 1;
     680:	23 e0       	ldi	r18, 0x03	; 3
     682:	c2 9f       	mul	r28, r18
     684:	e0 0d       	add	r30, r0
     686:	f1 1d       	adc	r31, r1
     688:	11 24       	eor	r1, r1
     68a:	31 96       	adiw	r30, 0x01	; 1
     68c:	25 91       	lpm	r18, Z+
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:499
  uint16_t mux_options_off_gm = pgm_read_word_near(mux_info_ptr);  /* pointer offset to the second columun
     68e:	34 91       	lpm	r19, Z
     690:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:502
  at the end bottom row of the table, with info about the mux options, rather than a specefic option
  Low byte is the offset from USARTROUTEA, second byte is the group mask. */
  volatile uint8_t* portmux  = (uint8_t*)(HWSERIAL_MUX_REGISTER_BASE + (uint8_t)mux_options_off_gm); // offset
     692:	ff 27       	eor	r31, r31
     694:	ee 51       	subi	r30, 0x1E	; 30
     696:	fa 4f       	sbci	r31, 0xFA	; 250
     698:	90 81       	ld	r25, Z
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:503
  uint8_t temp   = *portmux;
     69a:	83 2f       	mov	r24, r19
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:504
  temp          &= ~((uint8_t) (mux_options_off_gm >> 8)); // Group Mask
     69c:	80 95       	com	r24
     69e:	89 23       	and	r24, r25
     6a0:	68 2b       	or	r22, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:505
  temp          |= mux_code;
     6a2:	60 83       	st	Z, r22
begin():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:506
  *portmux       = temp;
     6a4:	5f bf       	out	0x3f, r21	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:412
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_usart_pins, _mux_count, _pin_set, setpinmask);
  SREG=oldSREG;
     6a6:	df 91       	pop	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:413
}
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	bf 90       	pop	r11
     6b2:	af 90       	pop	r10
     6b4:	9f 90       	pop	r9
     6b6:	8f 90       	pop	r8
     6b8:	08 95       	ret
     6ba:	14 86       	std	Z+12, r1	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:407
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
     6bc:	74 cf       	rjmp	.-280    	; 0x5a6 <UartClass::begin(unsigned long, unsigned int)+0xb0>
_set_pins():
     6be:	34 2f       	mov	r19, r20
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:545
  uint8_t mux_group_code = (uint8_t) (mux_row_gc_tx);       // this is the mux
  if (mux_setting < mux_count) {              // if false, pinmux none was selected, and we skip the pin configuration.
    uint8_t mux_pin_tx   = (uint8_t) (mux_row_gc_tx >> 8);
    if ((enmask & 0x40 && !(enmask & 0x08))) {
      pinMode(mux_pin_tx, OUTPUT);            // If and only if TX is enabled and open drain isn't should the TX pin be output.
    } else if (enmask & 0x50) {               // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
     6c0:	30 75       	andi	r19, 0x50	; 80
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <UartClass::begin(unsigned long, unsigned int)+0x1d0>
     6c4:	99 cf       	rjmp	.-206    	; 0x5f8 <UartClass::begin(unsigned long, unsigned int)+0x102>
_pinMode():
     6c6:	79 32       	cpi	r23, 0x29	; 41
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <UartClass::begin(unsigned long, unsigned int)+0x1d6>
     6ca:	96 cf       	rjmp	.-212    	; 0x5f8 <UartClass::begin(unsigned long, unsigned int)+0x102>
check_valid_digital_pin():
     6cc:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:32
#include "pins_arduino.h"


inline __attribute__((always_inline)) void check_valid_digital_pin(uint8_t pin)
{
  if(__builtin_constant_p(pin)) {
     6ce:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     6d0:	e0 50       	subi	r30, 0x00	; 0
     6d2:	f0 4c       	sbci	r31, 0xC0	; 192
     6d4:	d0 81       	ld	r29, Z
     6d6:	df 3f       	cpi	r29, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:223
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
     6d8:	09 f4       	brne	.+2      	; 0x6dc <UartClass::begin(unsigned long, unsigned int)+0x1e6>
     6da:	8e cf       	rjmp	.-228    	; 0x5f8 <UartClass::begin(unsigned long, unsigned int)+0x102>
     6dc:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:226
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
     6de:	e7 5d       	subi	r30, 0xD7	; 215
     6e0:	ff 4b       	sbci	r31, 0xBF	; 191
     6e2:	a0 81       	ld	r26, Z
     6e4:	e0 e2       	ldi	r30, 0x20	; 32
     6e6:	ae 9f       	mul	r26, r30
     6e8:	d0 01       	movw	r26, r0
     6ea:	11 24       	eor	r1, r1
     6ec:	bc 5f       	subi	r27, 0xFC	; 252
     6ee:	2e 5a       	subi	r18, 0xAE	; 174
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:232
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
     6f0:	3f 4b       	sbci	r19, 0xBF	; 191
     6f2:	f9 01       	movw	r30, r18
     6f4:	10 81       	ld	r17, Z
begin():
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:233
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
     6f8:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
     6fa:	18 30       	cpi	r17, 0x08	; 8
     6fc:	30 f4       	brcc	.+12     	; 0x70a <UartClass::begin(unsigned long, unsigned int)+0x214>
     6fe:	9d 01       	movw	r18, r26
     700:	20 5f       	subi	r18, 0xF0	; 240
     702:	3f 4f       	sbci	r19, 0xFF	; 255
     704:	f9 01       	movw	r30, r18
     706:	e1 0f       	add	r30, r17
     708:	f1 1d       	adc	r31, r1
     70a:	3f b7       	in	r19, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:234
    uint8_t status = SREG;              /* Save state */
     70c:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
     70e:	12 96       	adiw	r26, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
     710:	dc 93       	st	X, r29
     712:	20 81       	ld	r18, Z
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
     714:	28 60       	ori	r18, 0x08	; 8
     716:	20 83       	st	Z, r18
     718:	3f bf       	out	0x3f, r19	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
     71a:	6e cf       	rjmp	.-292    	; 0x5f8 <UartClass::begin(unsigned long, unsigned int)+0x102>

0000071c <UartClass::_poll_tx_data_empty()>:
_poll_tx_data_empty():
     71c:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:285
    uartClass._tx_buffer_tail = txTail;
  }
#endif

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     71e:	0f b6       	in	r0, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:286
  if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     720:	07 fe       	sbrs	r0, 7
     722:	04 c0       	rjmp	.+8      	; 0x72c <UartClass::_poll_tx_data_empty()+0x10>
     724:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7e0111>
     728:	88 23       	and	r24, r24
     72a:	a1 f0       	breq	.+40     	; 0x754 <_poll_dre_done>
     72c:	a4 85       	ldd	r26, Z+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:303
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.
    // -Spence 10/23/20
    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     72e:	b5 85       	ldd	r27, Z+13	; 0x0d
     730:	14 96       	adiw	r26, 0x04	; 4
     732:	8c 91       	ld	r24, X
     734:	14 97       	sbiw	r26, 0x04	; 4
     736:	85 ff       	sbrs	r24, 5
     738:	0d c0       	rjmp	.+26     	; 0x754 <_poll_dre_done>
     73a:	95 89       	ldd	r25, Z+21	; 0x15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:304
      if (_tx_buffer_head != _tx_buffer_tail) {
     73c:	86 89       	ldd	r24, Z+22	; 0x16
     73e:	98 17       	cp	r25, r24
     740:	39 f0       	breq	.+14     	; 0x750 <UartClass::_poll_tx_data_empty()+0x34>
     742:	15 96       	adiw	r26, 0x05	; 5
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:306
        // Buffer empty, so disable "data register empty" interrupt
        (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     744:	8c 91       	ld	r24, X
     746:	15 97       	sbiw	r26, 0x05	; 5
     748:	8f 7d       	andi	r24, 0xDF	; 223
     74a:	15 96       	adiw	r26, 0x05	; 5
     74c:	8c 93       	st	X, r24
     74e:	08 95       	ret
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:324
#else
                "rjmp _poll_dre"    "\n\t"
#endif
                "_poll_dre_done:"    "\n"
                ::"z"((uint16_t)thisSerial)
                : "r18","r19","r24","r25","r26","r27");
     750:	e8 94       	clt
     752:	62 c3       	rjmp	.+1732   	; 0xe18 <_poll_dre>

00000754 <_poll_dre_done>:
     754:	08 95       	ret

00000756 <UartClass::write(unsigned char)>:
write():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:331
    }
    // In case interrupts are enabled, the interrupt routine will be invoked by itself
    // Note that this currently does not handle cases where the DRE interruopt becomes
    // disabled, yet you are actually attempting to send. I don't think it can happen.
  }
}
     756:	0f 93       	push	r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:612
  }
  return base; // RX = TX + 1. XDIR = XCK + 1 for all Dx and Ex parts!
}


size_t UartClass::write(uint8_t c) {
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ec 01       	movw	r28, r24
     760:	8a 89       	ldd	r24, Y+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:613
  _state |= 1;
     762:	98 2f       	mov	r25, r24
     764:	91 60       	ori	r25, 0x01	; 1
     766:	9a 8b       	std	Y+18, r25	; 0x12
     768:	2d 89       	ldd	r18, Y+21	; 0x15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:619

  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective data rate at high (>
  // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
  if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     76a:	9e 89       	ldd	r25, Y+22	; 0x16
     76c:	29 13       	cpse	r18, r25
     76e:	0a c0       	rjmp	.+20     	; 0x784 <UartClass::write(unsigned char)+0x2e>
     770:	ec 85       	ldd	r30, Y+12	; 0x0c
     772:	fd 85       	ldd	r31, Y+13	; 0x0d
     774:	94 81       	ldd	r25, Z+4	; 0x04
     776:	95 ff       	sbrs	r25, 5
     778:	05 c0       	rjmp	.+10     	; 0x784 <UartClass::write(unsigned char)+0x2e>
     77a:	81 fd       	sbrc	r24, 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:620
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     77c:	0d c0       	rjmp	.+26     	; 0x798 <UartClass::write(unsigned char)+0x42>
     77e:	80 e4       	ldi	r24, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:627
      ctrla                      &= ~USART_RXCIE_bm;
      ctrla                      |= USART_TXCIE_bm;
      (*_hwserial_module).STATUS  = USART_TXCIF_bm;
      (*_hwserial_module).CTRLA   = ctrla;
    } else {
      (*_hwserial_module).STATUS  = USART_TXCIF_bm;
     780:	84 83       	std	Z+4, r24	; 0x04
     782:	12 c0       	rjmp	.+36     	; 0x7a8 <UartClass::write(unsigned char)+0x52>
     784:	06 2f       	mov	r16, r22
     786:	1d 89       	ldd	r17, Y+21	; 0x15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:649
*/

    return 1;
  }

  tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     788:	1f 5f       	subi	r17, 0xFF	; 255
     78a:	1f 73       	andi	r17, 0x3F	; 63
     78c:	8e 89       	ldd	r24, Y+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:653

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit (or emulate interrupts)
  while (i == _tx_buffer_tail) {
     78e:	81 13       	cpse	r24, r17
     790:	15 c0       	rjmp	.+42     	; 0x7bc <UartClass::write(unsigned char)+0x66>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:654
    _poll_tx_data_empty();
     792:	ce 01       	movw	r24, r28
     794:	c3 df       	rcall	.-122    	; 0x71c <UartClass::_poll_tx_data_empty()>
     796:	fa cf       	rjmp	.-12     	; 0x78c <UartClass::write(unsigned char)+0x36>
     798:	85 81       	ldd	r24, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:621
  // to the data register and be done. This shortcut helps
  // significantly improve the effective data rate at high (>
  // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
  if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
      uint8_t ctrla               = (*_hwserial_module).CTRLA;
     79a:	8f 77       	andi	r24, 0x7F	; 127
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:622
      ctrla                      &= ~USART_RXCIE_bm;
     79c:	80 64       	ori	r24, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:623
      ctrla                      |= USART_TXCIE_bm;
     79e:	90 e4       	ldi	r25, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:624
      (*_hwserial_module).STATUS  = USART_TXCIF_bm;
     7a0:	94 83       	std	Z+4, r25	; 0x04
     7a2:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:625
      (*_hwserial_module).CTRLA   = ctrla;
     7a4:	fd 85       	ldd	r31, Y+13	; 0x0d
     7a6:	85 83       	std	Z+5, r24	; 0x05
     7a8:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:630
    } else {
      (*_hwserial_module).STATUS  = USART_TXCIF_bm;
    }
    // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
    (*_hwserial_module).TXDATAL   = c;
     7aa:	fd 85       	ldd	r31, Y+13	; 0x0d
     7ac:	62 83       	std	Z+2, r22	; 0x02
     7ae:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:669
  } else { // Enable "data register empty interrupt"
    (*_hwserial_module).CTRLA |= USART_DREIE_bm;
  }

  return 1;
}
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	08 95       	ret
     7bc:	ed 89       	ldd	r30, Y+21	; 0x15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:656
  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit (or emulate interrupts)
  while (i == _tx_buffer_tail) {
    _poll_tx_data_empty();
  }
  _tx_buffer[_tx_buffer_head]  = c;
     7be:	ec 0f       	add	r30, r28
     7c0:	fd 2f       	mov	r31, r29
     7c2:	f1 1d       	adc	r31, r1
     7c4:	e9 5a       	subi	r30, 0xA9	; 169
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	00 83       	st	Z, r16
     7ca:	1d 8b       	std	Y+21, r17	; 0x15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:657
  _tx_buffer_head              = i;
     7cc:	ec 85       	ldd	r30, Y+12	; 0x0c
     7ce:	fd 85       	ldd	r31, Y+13	; 0x0d
     7d0:	8a 89       	ldd	r24, Y+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:658
  if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     7d2:	81 ff       	sbrs	r24, 1
     7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <UartClass::write(unsigned char)+0x92>
     7d6:	85 81       	ldd	r24, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:659
    uint8_t ctrla              = (*_hwserial_module).CTRLA;
     7d8:	8f 77       	andi	r24, 0x7F	; 127
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:660
    ctrla                     &= ~USART_RXCIE_bm;
     7da:	80 66       	ori	r24, 0x60	; 96
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:661
    ctrla                     |= USART_TXCIE_bm | USART_DREIE_bm;
     7dc:	90 e4       	ldi	r25, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:662
    (*_hwserial_module).STATUS = USART_TXCIF_bm;
     7de:	94 83       	std	Z+4, r25	; 0x04
     7e0:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:663
    (*_hwserial_module).CTRLA  = ctrla;
     7e2:	fd 85       	ldd	r31, Y+13	; 0x0d
     7e4:	85 83       	std	Z+5, r24	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:665
  } else { // Enable "data register empty interrupt"
    (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     7e6:	e3 cf       	rjmp	.-58     	; 0x7ae <UartClass::write(unsigned char)+0x58>
     7e8:	85 81       	ldd	r24, Z+5	; 0x05
     7ea:	80 62       	ori	r24, 0x20	; 32
     7ec:	fb cf       	rjmp	.-10     	; 0x7e4 <UartClass::write(unsigned char)+0x8e>

000007ee <Print::print(__FlashStringHelper const*) [clone .constprop.43]>:
print():
     7ee:	0f 93       	push	r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:39

size_t Print::print(const __FlashStringHelper *ifsh)
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	8c 01       	movw	r16, r24
     7f8:	d0 e0       	ldi	r29, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:43
{
#if defined(__AVR__)
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     7fa:	c0 e0       	ldi	r28, 0x00	; 0
     7fc:	f8 01       	movw	r30, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:45
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     7fe:	ec 0f       	add	r30, r28
     800:	fd 1f       	adc	r31, r29
     802:	64 91       	lpm	r22, Z
     804:	66 23       	and	r22, r22
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:46
    if (c == 0) break;
     806:	39 f0       	breq	.+14     	; 0x816 <Print::print(__FlashStringHelper const*) [clone .constprop.43]+0x28>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:47
    if (write(c)) n++;
     808:	86 ec       	ldi	r24, 0xC6	; 198
     80a:	91 e4       	ldi	r25, 0x41	; 65
     80c:	a4 df       	rcall	.-184    	; 0x756 <UartClass::write(unsigned char)>
     80e:	89 2b       	or	r24, r25
     810:	11 f0       	breq	.+4      	; 0x816 <Print::print(__FlashStringHelper const*) [clone .constprop.43]+0x28>
     812:	21 96       	adiw	r28, 0x01	; 1
     814:	f3 cf       	rjmp	.-26     	; 0x7fc <Print::print(__FlashStringHelper const*) [clone .constprop.43]+0xe>
     816:	ce 01       	movw	r24, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:54
  }
  return n;
#else
  return print(reinterpret_cast<const char *>(ifsh));
#endif
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <Print::print(char) [clone .constprop.39]>:
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:68
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     822:	68 2f       	mov	r22, r24
     824:	86 ec       	ldi	r24, 0xC6	; 198
     826:	91 e4       	ldi	r25, 0x41	; 65
     828:	96 cf       	rjmp	.-212    	; 0x756 <UartClass::write(unsigned char)>

0000082a <UartClass::flush()>:
flush():
     82a:	cf 93       	push	r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:467
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  }
  return tail - head - 1;
}

void UartClass::flush() {
     82c:	df 93       	push	r29
     82e:	ec 01       	movw	r28, r24
     830:	8a 89       	ldd	r24, Y+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:471
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXCIF (transmit
  // complete) bit to 1 during initialization
  if (!(_state & 1)) {
     832:	80 ff       	sbrs	r24, 0
     834:	0b c0       	rjmp	.+22     	; 0x84c <UartClass::flush()+0x22>
     836:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:487
  // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
  // and in that case flush(), and write() with full buffer would just straight up hang...


  // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
  while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     838:	fd 85       	ldd	r31, Y+13	; 0x0d
     83a:	85 81       	ldd	r24, Z+5	; 0x05
     83c:	85 fd       	sbrc	r24, 5
     83e:	03 c0       	rjmp	.+6      	; 0x846 <UartClass::flush()+0x1c>
     840:	84 81       	ldd	r24, Z+4	; 0x04
     842:	86 fd       	sbrc	r24, 6
     844:	03 c0       	rjmp	.+6      	; 0x84c <UartClass::flush()+0x22>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:489
    // poll this, which will ensure that bytes keep getting sent even if interrupts are disabled or something.
    _poll_tx_data_empty();
     846:	ce 01       	movw	r24, r28
     848:	69 df       	rcall	.-302    	; 0x71c <UartClass::_poll_tx_data_empty()>
     84a:	f5 cf       	rjmp	.-22     	; 0x836 <UartClass::flush()+0xc>
     84c:	df 91       	pop	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:493
  }
  // When we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <UartClass::operator bool()>:
operator 3():
     852:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.h:200
    inline  size_t         write(unsigned long n) {return                   write((uint8_t)n);}
    inline  size_t         write(long          n) {return                   write((uint8_t)n);}
    inline  size_t         write(unsigned int  n) {return                   write((uint8_t)n);}
    inline  size_t         write(int           n) {return                   write((uint8_t)n);}
    using Print::write;   // pull in write(str) and write(buf, size) from Print
    explicit operator       bool()                {return                                true;}
     854:	08 95       	ret

00000856 <TWI1_ClearPins>:
TWI1_ClearPins():
     856:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7e05e5>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:347
}
#if defined(TWI1)
void TWI1_ClearPins() {
  #if defined(PORTMUX_TWIROUTEA)
    #if defined(PIN_WIRE1_SDA_PINSWAP_2)
      if ((PORTMUX.TWIROUTEA & PORTMUX_TWI1_gm) == PORTMUX_TWI1_ALT2_gc) {
     85a:	8c 70       	andi	r24, 0x0C	; 12
     85c:	88 30       	cpi	r24, 0x08	; 8
     85e:	21 f4       	brne	.+8      	; 0x868 <TWI1_ClearPins+0x12>
     860:	8c e0       	ldi	r24, 0x0C	; 12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:350
      // make sure we don't get errata'ed - make sure their bits in the
      // PORTx.OUT registers are 0.
      PORTB.OUTCLR = 0x0C;  // bits 2 and 3
     862:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x7e0426>
     866:	08 95       	ret
     868:	8c e0       	ldi	r24, 0x0C	; 12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:354
      } else
    #endif
    {
      PORTF.OUTCLR = 0x0C;  // bits 2 and 3
     86a:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7e04a6>
     86e:	08 95       	ret

00000870 <TWI0_ClearPins>:
TWI0_ClearPins():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:366
          PORTB.OUTCLR = 0xC0;  // bits 6 and 7
        }
      }
    #endif
  #endif   // Only Dx-Series has 2 TWI
}
     870:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7e05e5>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:76
  return true;
}

void TWI0_ClearPins() {
  #ifdef PORTMUX_TWIROUTEA
    uint8_t portmux = PORTMUX.TWIROUTEA & PORTMUX_TWI0_gm; // registers are volatile, so this is bulky to recheck multiple times.
     874:	83 70       	andi	r24, 0x03	; 3
     876:	82 30       	cpi	r24, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:77
    if (portmux == PORTMUX_TWI0_ALT2_gc) {
     878:	21 f4       	brne	.+8      	; 0x882 <TWI0_ClearPins+0x12>
     87a:	8c e0       	ldi	r24, 0x0C	; 12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:80
      // make sure we don't get errata'ed - make sure their bits in the
      // PORTx.OUT registers are 0.
      PORTC.OUTCLR = 0x0C;  // bits 2 and 3
     87c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7e0446>
     880:	08 95       	ret
     882:	8c e0       	ldi	r24, 0x0C	; 12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:83
    } else {
      #if !defined(__AVR_DD__)
        PORTA.OUTCLR = 0x0C;  // bits 2 and 3
     884:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7e0406>
     888:	08 95       	ret

0000088a <NotifyUser_onReceive>:
NotifyUser_onReceive():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:116
      PORTA.OUTCLR = 0x06;  // 8-pin parts always have it on PA1/2
    #else
      PORTB.OUTCLR = 0x03;  // else, zero series, no remapping, it's on PB0, PB1
  #endif
#endif
}
     88a:	dc 01       	movw	r26, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:783
      rxHead   = &(_data->_bytesToReadWrite);
    #else
      rxHead   = &(_data->_bytesToRead);
    #endif
  #endif
  if (_data->user_onReceive != NULL) {
     88c:	1e 96       	adiw	r26, 0x0e	; 14
     88e:	ed 91       	ld	r30, X+
     890:	fc 91       	ld	r31, X
     892:	1f 97       	sbiw	r26, 0x0f	; 15
     894:	30 97       	sbiw	r30, 0x00	; 0
     896:	31 f0       	breq	.+12     	; 0x8a4 <NotifyUser_onReceive+0x1a>
     898:	1a 96       	adiw	r26, 0x0a	; 10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:784
    if ((*rxHead) > 0) {
     89a:	8c 91       	ld	r24, X
     89c:	88 23       	and	r24, r24
     89e:	11 f0       	breq	.+4      	; 0x8a4 <NotifyUser_onReceive+0x1a>
     8a0:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:785
      _data->user_onReceive((*rxHead));
     8a2:	09 94       	ijmp
     8a4:	08 95       	ret

000008a6 <TWI_HandleSlaveIRQ>:
TWI_HandleSlaveIRQ():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:788
    }
  }
}
     8a6:	cf 93       	push	r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:509
 *
 *@param      struct twiData *_data is a pointer to the structure that holds the Wire variables
 *
 *@return     void
 */
void TWI_HandleSlaveIRQ(struct twiData *_data) {
     8a8:	df 93       	push	r29
     8aa:	ec 01       	movw	r28, r24
     8ac:	e8 81       	ld	r30, Y
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:510
  uint8_t clientStatus = _data->_module->SSTATUS;
     8ae:	f9 81       	ldd	r31, Y+1	; 0x01
     8b0:	93 85       	ldd	r25, Z+11	; 0x0b
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:513

  #if defined(TWI_MANDS)
    _data->_bools._toggleStreamFn = 0x01;             // reroute stream functions to slave elements
     8b4:	80 61       	ori	r24, 0x10	; 16
     8b6:	8a 83       	std	Y+2, r24	; 0x02
     8b8:	96 ff       	sbrs	r25, 6
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:516
  #endif

  if (clientStatus & TWI_APIF_bm) {  // Address/Stop Bit set
     8ba:	21 c0       	rjmp	.+66     	; 0x8fe <TWI_HandleSlaveIRQ+0x58>
     8bc:	90 ff       	sbrs	r25, 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:517
    if (clientStatus & TWI_AP_bm) {    // Address bit set
     8be:	14 c0       	rjmp	.+40     	; 0x8e8 <TWI_HandleSlaveIRQ+0x42>
SlaveIRQ_AddrRead():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:569
      txHead   = &(_data->_bytesToWrite);
      txTail   = &(_data->_bytesWritten);
    #endif
  #endif

  (*address) = _data->_module->SDATA;       // saving address to expose to the user sketch
     8c0:	85 85       	ldd	r24, Z+13	; 0x0d
     8c2:	89 87       	std	Y+9, r24	; 0x09
TWI_HandleSlaveIRQ():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:518
    _data->_bools._toggleStreamFn = 0x01;             // reroute stream functions to slave elements
  #endif

  if (clientStatus & TWI_APIF_bm) {  // Address/Stop Bit set
    if (clientStatus & TWI_AP_bm) {    // Address bit set
      if (clientStatus & TWI_DIR_bm) {  // Master is reading
     8c4:	91 ff       	sbrs	r25, 1
     8c6:	0c c0       	rjmp	.+24     	; 0x8e0 <TWI_HandleSlaveIRQ+0x3a>
SlaveIRQ_AddrRead():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:572
  #endif

  (*address) = _data->_module->SDATA;       // saving address to expose to the user sketch

                                            // There is no way to identify a REPSTART, so when a Master Read occurs after a Master write
  NotifyUser_onReceive(_data);              // Notify user program "onReceive" if necessary
     8c8:	ce 01       	movw	r24, r28
     8ca:	df df       	rcall	.-66     	; 0x88a <NotifyUser_onReceive>
     8cc:	1a 86       	std	Y+10, r1	; 0x0a
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:574

  (*txHead) = 0;                            // reset buffer positions so the Slave can start writing at zero.
     8ce:	1b 86       	std	Y+11, r1	; 0x0b
NotifyUser_onRequest():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:575
  (*txTail) = 0;
     8d0:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:755
 *@param      struct twiData *_data is a pointer to the structure that holds the Wire variables
 *
 *@return     void
 */
void NotifyUser_onRequest(struct twiData *_data) {
  if (_data->user_onRequest != NULL) {
     8d2:	fd 85       	ldd	r31, Y+13	; 0x0d
     8d4:	30 97       	sbiw	r30, 0x00	; 0
     8d6:	09 f0       	breq	.+2      	; 0x8da <TWI_HandleSlaveIRQ+0x34>
     8d8:	09 95       	icall
SlaveIRQ_DataWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:756
    _data->user_onRequest();
     8da:	e8 81       	ld	r30, Y
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:736
  uint8_t payload = _data->_module->SDATA;

  if ((*rxHead) < BUFFER_LENGTH) {                // if buffer is not full
    rxBuffer[(*rxHead)] = payload;                  // Load data into the buffer
    (*rxHead)++;                                    // Advance Head
    _data->_module->SCTRLB = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
     8dc:	f9 81       	ldd	r31, Y+1	; 0x01
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <TWI_HandleSlaveIRQ+0x3e>
SlaveIRQ_AddrWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:607
      rxTail   = &(_data->_bytesRead);
    #endif
  #endif

  (*address) = _data->_module->SDATA;
  (*rxHead) = 0;                                    // reset buffer positions so the Master can start writing at zero.
     8e0:	1a 86       	std	Y+10, r1	; 0x0a
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:608
  (*rxTail) = 0;
     8e2:	1b 86       	std	Y+11, r1	; 0x0b
SlaveIRQ_DataWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:736
  uint8_t payload = _data->_module->SDATA;

  if ((*rxHead) < BUFFER_LENGTH) {                // if buffer is not full
    rxBuffer[(*rxHead)] = payload;                  // Load data into the buffer
    (*rxHead)++;                                    // Advance Head
    _data->_module->SCTRLB = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	31 c0       	rjmp	.+98     	; 0x94a <TWI_HandleSlaveIRQ+0xa4>
SlaveIRQ_Stop():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:635
      txHead   = &(_data->_bytesToWrite);
      rxHead   = &(_data->_bytesToRead);
    #endif
  #endif

  _data->_module->SSTATUS = TWI_APIF_bm;      // Clear Flag, no further action needed
     8e8:	80 e4       	ldi	r24, 0x40	; 64
     8ea:	83 87       	std	Z+11, r24	; 0x0b
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:636
  NotifyUser_onReceive(_data);                // Notify user program "onReceive" if necessary
     8ec:	ce 01       	movw	r24, r28
     8ee:	cd df       	rcall	.-102    	; 0x88a <NotifyUser_onReceive>
SlaveIRQ_DataReadNack():
     8f0:	1a 86       	std	Y+10, r1	; 0x0a
TWI_HandleSlaveIRQ():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:664
  #endif


  _data->_bools._ackMatters = false;                // stop checking for NACK
  _data->_module->SCTRLB = TWI_SCMD_COMPTRANS_gc;   // "Wait for any Start (S/Sr) condition"
  (*txHead) = 0;                                    // Abort further data writes
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:540
      SlaveIRQ_DataWrite(_data);
    }
  }

  #if defined(TWI_MANDS)
    _data->_bools._toggleStreamFn = 0x00;
     8f4:	8f 7e       	andi	r24, 0xEF	; 239
     8f6:	8a 83       	std	Y+2, r24	; 0x02
     8f8:	df 91       	pop	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:542
  #endif
}
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret
     8fe:	97 ff       	sbrs	r25, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:526
        SlaveIRQ_AddrWrite(_data);
      }
    } else {                          // Stop bit set
      SlaveIRQ_Stop(_data);
    }
  } else if (clientStatus & TWI_DIF_bm) {  // Data bit set
     900:	f8 cf       	rjmp	.-16     	; 0x8f2 <TWI_HandleSlaveIRQ+0x4c>
     902:	91 ff       	sbrs	r25, 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:527
    if (clientStatus & TWI_DIR_bm) {         // Master is reading
     904:	24 c0       	rjmp	.+72     	; 0x94e <TWI_HandleSlaveIRQ+0xa8>
     906:	93 fd       	sbrc	r25, 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:528
      if ((clientStatus & TWI_COLL_bm) ||    // If a collision was detected, or
     908:	04 c0       	rjmp	.+8      	; 0x912 <TWI_HandleSlaveIRQ+0x6c>
     90a:	94 ff       	sbrs	r25, 4
     90c:	07 c0       	rjmp	.+14     	; 0x91c <TWI_HandleSlaveIRQ+0x76>
     90e:	87 ff       	sbrs	r24, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:529
         ((clientStatus & TWI_RXACK_bm) && _data->_bools._ackMatters)) {  // RXACK bit is set and it matters
     910:	05 c0       	rjmp	.+10     	; 0x91c <TWI_HandleSlaveIRQ+0x76>
SlaveIRQ_DataReadNack():
     912:	8f 77       	andi	r24, 0x7F	; 127
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:662
      txHead   = &(_data->_bytesToWrite);
    #endif
  #endif


  _data->_bools._ackMatters = false;                // stop checking for NACK
     914:	8a 83       	std	Y+2, r24	; 0x02
     916:	82 e0       	ldi	r24, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:663
  _data->_module->SCTRLB = TWI_SCMD_COMPTRANS_gc;   // "Wait for any Start (S/Sr) condition"
     918:	82 87       	std	Z+10, r24	; 0x0a
     91a:	ea cf       	rjmp	.-44     	; 0x8f0 <TWI_HandleSlaveIRQ+0x4a>
SlaveIRQ_DataReadAck():
     91c:	80 68       	ori	r24, 0x80	; 128
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:692
      txTail   = &(_data->_bytesWritten);
      txBuffer =   _data->_txBuffer;
    #endif
  #endif

  _data->_bools._ackMatters = true;             // start checking for NACK
     91e:	8a 83       	std	Y+2, r24	; 0x02
     920:	8b 81       	ldd	r24, Y+3	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:693
  _data->_bytesTransmittedS++;                  // increment bytes transmitted counter (for register model)
     922:	8f 5f       	subi	r24, 0xFF	; 255
     924:	8b 83       	std	Y+3, r24	; 0x03
     926:	ab 85       	ldd	r26, Y+11	; 0x0b
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:694
  if ((*txTail) < (*txHead)) {                  // Data is available
     928:	8a 85       	ldd	r24, Y+10	; 0x0a
     92a:	a8 17       	cp	r26, r24
     92c:	68 f4       	brcc	.+26     	; 0x948 <TWI_HandleSlaveIRQ+0xa2>
     92e:	ac 0f       	add	r26, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:695
    _data->_module->SDATA = txBuffer[(*txTail)];    // Writing to the register to send data
     930:	bd 2f       	mov	r27, r29
     932:	b1 1d       	adc	r27, r1
     934:	ac 5e       	subi	r26, 0xEC	; 236
     936:	be 4f       	sbci	r27, 0xFE	; 254
     938:	8c 91       	ld	r24, X
     93a:	85 87       	std	Z+13, r24	; 0x0d
     93c:	83 e0       	ldi	r24, 0x03	; 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:696
    _data->_module->SCTRLB = TWI_SCMD_RESPONSE_gc;  // "Execute a byte read operation followed by Acknowledge Action"
     93e:	82 87       	std	Z+10, r24	; 0x0a
     940:	8b 85       	ldd	r24, Y+11	; 0x0b
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:697
    (*txTail)++;                                    // Increment counter for sent bytes
     942:	8f 5f       	subi	r24, 0xFF	; 255
     944:	8b 87       	std	Y+11, r24	; 0x0b
     946:	d5 cf       	rjmp	.-86     	; 0x8f2 <TWI_HandleSlaveIRQ+0x4c>
     948:	82 e0       	ldi	r24, 0x02	; 2
SlaveIRQ_DataWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:700

  } else {                                            // No more data available
    _data->_module->SCTRLB = TWI_SCMD_COMPTRANS_gc;   // "Wait for any Start (S/Sr) condition"
     94a:	82 87       	std	Z+10, r24	; 0x0a
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:736
  uint8_t payload = _data->_module->SDATA;

  if ((*rxHead) < BUFFER_LENGTH) {                // if buffer is not full
    rxBuffer[(*rxHead)] = payload;                  // Load data into the buffer
    (*rxHead)++;                                    // Advance Head
    _data->_module->SCTRLB = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
     94c:	d2 cf       	rjmp	.-92     	; 0x8f2 <TWI_HandleSlaveIRQ+0x4c>
     94e:	95 85       	ldd	r25, Z+13	; 0x0d
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:731
      rxBuffer =   _data->_rxBuffer;
    #endif
  #endif


  uint8_t payload = _data->_module->SDATA;
     950:	8a 85       	ldd	r24, Y+10	; 0x0a
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:733

  if ((*rxHead) < BUFFER_LENGTH) {                // if buffer is not full
     952:	82 38       	cpi	r24, 0x82	; 130
     954:	50 f4       	brcc	.+20     	; 0x96a <TWI_HandleSlaveIRQ+0xc4>
     956:	fe 01       	movw	r30, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:734
    rxBuffer[(*rxHead)] = payload;                  // Load data into the buffer
     958:	e8 0f       	add	r30, r24
     95a:	f1 1d       	adc	r31, r1
     95c:	ec 5e       	subi	r30, 0xEC	; 236
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	90 83       	st	Z, r25
     962:	8a 85       	ldd	r24, Y+10	; 0x0a
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:735
    (*rxHead)++;                                    // Advance Head
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	8a 87       	std	Y+10, r24	; 0x0a
     968:	b8 cf       	rjmp	.-144    	; 0x8da <TWI_HandleSlaveIRQ+0x34>
     96a:	86 e0       	ldi	r24, 0x06	; 6
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:738
    _data->_module->SCTRLB = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
  } else {                                          // else buffer is full
    _data->_module->SCTRLB = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;  // "Execute ACK Action succeeded by waiting for any Start (S/Sr) condition"
     96c:	82 87       	std	Z+10, r24	; 0x0a
     96e:	1a 86       	std	Y+10, r1	; 0x0a
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:739
    (*rxHead) = 0;                                           // Dismiss all received Data since data integrity can't be guaranteed
     970:	1b 86       	std	Y+11, r1	; 0x0b
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:740
    (*rxTail) = 0;  // Make sure available will return 0
     972:	bf cf       	rjmp	.-130    	; 0x8f2 <TWI_HandleSlaveIRQ+0x4c>

00000974 <TwoWire::flush()>:
TWI_Flush():
     974:	dc 01       	movw	r26, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:133
 */
void TWI_Flush(struct twiData *_data) {
  #if defined(ERRATA_TWI_FLUSH)
    // badCall("The AVR DA-series parts are impacted by an errata that leaves the TWI peripheral in a non-functioning state when using flush.");
    // restarting TWI hardware by hand. Extra size shouldn't matter on DA series
    uint8_t temp_MCTRLA     = _data->_module->MCTRLA;
     976:	1c 96       	adiw	r26, 0x0c	; 12
     978:	ed 91       	ld	r30, X+
     97a:	fc 91       	ld	r31, X
     97c:	93 81       	ldd	r25, Z+3	; 0x03
     97e:	81 85       	ldd	r24, Z+9	; 0x09
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:134
    uint8_t temp_SCTRLA     = _data->_module->SCTRLA;
     980:	13 82       	std	Z+3, r1	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:135
    _data->_module->MCTRLA  = 0x00;
     982:	11 86       	std	Z+9, r1	; 0x09
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:136
    _data->_module->SCTRLA  = 0x00;
     984:	93 83       	std	Z+3, r25	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:137
    _data->_module->MCTRLA  = temp_MCTRLA;
     986:	91 e0       	ldi	r25, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:138
    _data->_module->MSTATUS = 0x01;  // force TWI state machine into idle state
     988:	95 83       	std	Z+5, r25	; 0x05
     98a:	81 87       	std	Z+9, r24	; 0x09
flush():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:139
    _data->_module->SCTRLA  = temp_SCTRLA;
     98c:	08 95       	ret

0000098e <TwoWire::peek()>:
peek():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:559
 *@return     void
 */
void TwoWire::flush(void) {
  /* Turn off and on TWI module */
  TWI_Flush(&vars);
}
     98e:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:519
 *@param      void
 *
 *@return     int
 *@retval     byte in the buffer or -1 if buffer is empty
 */
int TwoWire::peek(void) {
     990:	86 85       	ldd	r24, Z+14	; 0x0e
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:523
  uint8_t *rxHead, *rxTail, *rxBuffer;

  #if defined(TWI_MANDS)                         // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     992:	84 ff       	sbrs	r24, 4
     994:	0d c0       	rjmp	.+26     	; 0x9b0 <TwoWire::peek()+0x22>
     996:	cf 01       	movw	r24, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:526
      rxHead   = &(vars._bytesToReadWriteS);
      rxTail   = &(vars._bytesReadWrittenS);
      rxBuffer =   vars._trBufferS;
     998:	80 5e       	subi	r24, 0xE0	; 224
     99a:	9e 4f       	sbci	r25, 0xFE	; 254
     99c:	26 89       	ldd	r18, Z+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:524
int TwoWire::peek(void) {
  uint8_t *rxHead, *rxTail, *rxBuffer;

  #if defined(TWI_MANDS)                         // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
      rxHead   = &(vars._bytesToReadWriteS);
     99e:	e7 89       	ldd	r30, Z+23	; 0x17
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:525
      rxTail   = &(vars._bytesReadWrittenS);
     9a0:	e2 17       	cp	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:541
      rxTail   = &(vars._bytesRead);
      rxBuffer =   vars._rxBuffer;
    #endif
  }

  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
     9a2:	60 f4       	brcc	.+24     	; 0x9bc <TwoWire::peek()+0x2e>
     9a4:	e8 0f       	add	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:542
    return rxBuffer[(*rxTail)];
     9a6:	f9 2f       	mov	r31, r25
     9a8:	f1 1d       	adc	r31, r1
     9aa:	80 81       	ld	r24, Z
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	08 95       	ret
     9b0:	cf 01       	movw	r24, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:537
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
      rxTail   = &(vars._bytesRead);
      rxBuffer =   vars._rxBuffer;
     9b2:	82 56       	subi	r24, 0x62	; 98
     9b4:	9f 4f       	sbci	r25, 0xFF	; 255
     9b6:	22 89       	ldd	r18, Z+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:535
    #if defined(TWI_MERGE_BUFFERS)               // Same Buffers for tx/rx
      rxHead   = &(vars._bytesToReadWrite);
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
     9b8:	e3 89       	ldd	r30, Z+19	; 0x13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:536
      rxTail   = &(vars._bytesRead);
     9ba:	f2 cf       	rjmp	.-28     	; 0x9a0 <TwoWire::peek()+0x12>
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:544
  }

  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
    return rxBuffer[(*rxTail)];
  } else {      // No bytes to read
    return -1;
     9be:	9f ef       	ldi	r25, 0xFF	; 255
     9c0:	08 95       	ret

000009c2 <TwoWire::read()>:
read():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:546
  }
}
     9c2:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:446
 *@param      void
 *
 *@return     int
 *@retval     byte in the buffer or -1 if buffer is empty
 */
int TwoWire::read(void) {
     9c4:	86 85       	ldd	r24, Z+14	; 0x0e
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:450
  uint8_t *rxHead, *rxTail, *rxBuffer;

  #if defined(TWI_MANDS)                         // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     9c6:	df 01       	movw	r26, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:452
      rxHead   = &(vars._bytesToReadWriteS);
      rxTail   = &(vars._bytesReadWrittenS);
     9c8:	84 ff       	sbrs	r24, 4
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:450
 */
int TwoWire::read(void) {
  uint8_t *rxHead, *rxTail, *rxBuffer;

  #if defined(TWI_MANDS)                         // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     9ca:	10 c0       	rjmp	.+32     	; 0x9ec <TwoWire::read()+0x2a>
     9cc:	57 96       	adiw	r26, 0x17	; 23
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:452
      rxHead   = &(vars._bytesToReadWriteS);
      rxTail   = &(vars._bytesReadWrittenS);
     9ce:	9f 01       	movw	r18, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:453
      rxBuffer =   vars._trBufferS;
     9d0:	20 5e       	subi	r18, 0xE0	; 224
     9d2:	3e 4f       	sbci	r19, 0xFE	; 254
     9d4:	86 89       	ldd	r24, Z+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:451
int TwoWire::read(void) {
  uint8_t *rxHead, *rxTail, *rxBuffer;

  #if defined(TWI_MANDS)                         // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
      rxHead   = &(vars._bytesToReadWriteS);
     9d6:	97 89       	ldd	r25, Z+23	; 0x17
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:452
      rxTail   = &(vars._bytesReadWrittenS);
     9d8:	98 17       	cp	r25, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:469
      rxBuffer =   vars._rxBuffer;
    #endif
  }


  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
     9da:	78 f4       	brcc	.+30     	; 0x9fa <TwoWire::read()+0x38>
     9dc:	29 0f       	add	r18, r25
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:470
    uint8_t c = rxBuffer[(*rxTail)];
     9de:	31 1d       	adc	r19, r1
     9e0:	f9 01       	movw	r30, r18
     9e2:	80 81       	ld	r24, Z
     9e4:	9f 5f       	subi	r25, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:471
    (*rxTail)++;
     9e6:	9c 93       	st	X, r25
     9e8:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:472
    return c;
     9ea:	08 95       	ret
     9ec:	53 96       	adiw	r26, 0x13	; 19
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:463
      rxHead   = &(vars._bytesToReadWrite);
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
      rxTail   = &(vars._bytesRead);
     9ee:	9f 01       	movw	r18, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:464
      rxBuffer =   vars._rxBuffer;
     9f0:	22 56       	subi	r18, 0x62	; 98
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	82 89       	ldd	r24, Z+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:462
    #if defined(TWI_MERGE_BUFFERS)               // Same Buffers for tx/rx
      rxHead   = &(vars._bytesToReadWrite);
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
     9f6:	93 89       	ldd	r25, Z+19	; 0x13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:463
      rxTail   = &(vars._bytesRead);
     9f8:	ef cf       	rjmp	.-34     	; 0x9d8 <TwoWire::read()+0x16>
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:474
  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
    uint8_t c = rxBuffer[(*rxTail)];
    (*rxTail)++;
    return c;
  } else {                      // No bytes to read. At this point, rxTail moved up to
    return -1;                  // rxHead. To reset both to 0, a MasterRead or AddrWrite has to be called
     9fc:	9f ef       	ldi	r25, 0xFF	; 255
     9fe:	08 95       	ret

00000a00 <TwoWire::available()>:
available():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:476
  }
}
     a00:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:414
 *@param      void
 *
 *@return     int
 *@retval     amount of bytes available to read from the host buffer
 */
int TwoWire::available(void) {
     a02:	86 85       	ldd	r24, Z+14	; 0x0e
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:417
  int rxHead;
  #if defined(TWI_MANDS)                          // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     a04:	84 ff       	sbrs	r24, 4
     a06:	07 c0       	rjmp	.+14     	; 0xa16 <TwoWire::available()+0x16>
     a08:	96 89       	ldd	r25, Z+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:418
      rxHead  = vars._bytesToReadWriteS - vars._bytesReadWrittenS;
     a0a:	87 89       	ldd	r24, Z+23	; 0x17
     a0c:	29 2f       	mov	r18, r25
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:425
  #endif
  {
    #if defined(TWI_MERGE_BUFFERS)                // Same Buffers for tx/rx
      rxHead  = vars._bytesToReadWrite - vars._bytesReadWritten;
    #else                                         // Separate tx/rx Buffers
      rxHead  = vars._bytesToRead - vars._bytesRead;
     a0e:	28 1b       	sub	r18, r24
     a10:	33 0b       	sbc	r19, r19
     a12:	c9 01       	movw	r24, r18
     a14:	08 95       	ret
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:429
    #endif
  }
  return rxHead;
}
     a16:	92 89       	ldd	r25, Z+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:425
  #endif
  {
    #if defined(TWI_MERGE_BUFFERS)                // Same Buffers for tx/rx
      rxHead  = vars._bytesToReadWrite - vars._bytesReadWritten;
    #else                                         // Separate tx/rx Buffers
      rxHead  = vars._bytesToRead - vars._bytesRead;
     a18:	83 89       	ldd	r24, Z+19	; 0x13
     a1a:	f8 cf       	rjmp	.-16     	; 0xa0c <TwoWire::available()+0xc>

00000a1c <TwoWire::write(unsigned char const*, unsigned int)>:
write():
     a1c:	cf 92       	push	r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:390
 *
 *
 *@return     uint8_t
 *@retval     amount of bytes copied
 */
size_t TwoWire::write(const uint8_t *data, size_t quantity) {
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	6c 01       	movw	r12, r24
     a2c:	43 38       	cpi	r20, 0x83	; 131
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:392
  uint8_t i = 0;  // uint8_t since we don't use bigger buffers
  uint8_t qty = quantity > BUFFER_LENGTH ? BUFFER_LENGTH : quantity; //Don't overfill the buffer.
     a2e:	51 05       	cpc	r21, r1
     a30:	10 f0       	brcs	.+4      	; 0xa36 <TwoWire::write(unsigned char const*, unsigned int)+0x1a>
     a32:	42 e8       	ldi	r20, 0x82	; 130
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	c4 2f       	mov	r28, r20
     a38:	7b 01       	movw	r14, r22
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	00 e0       	ldi	r16, 0x00	; 0
     a3e:	0c 17       	cp	r16, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:393
  for (; i < qty; i++) {
     a40:	80 f4       	brcc	.+32     	; 0xa62 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
     a42:	d7 01       	movw	r26, r14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:394
    if (write(*(data + i)) == 0) break;   // break if buffer full
     a44:	6d 91       	ld	r22, X+
     a46:	7d 01       	movw	r14, r26
     a48:	d6 01       	movw	r26, r12
     a4a:	ed 91       	ld	r30, X+
     a4c:	fc 91       	ld	r31, X
     a4e:	01 90       	ld	r0, Z+
     a50:	f0 81       	ld	r31, Z
     a52:	e0 2d       	mov	r30, r0
     a54:	c6 01       	movw	r24, r12
     a56:	09 95       	icall
     a58:	98 01       	movw	r18, r16
     a5a:	2f 5f       	subi	r18, 0xFF	; 255
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	89 2b       	or	r24, r25
     a60:	49 f4       	brne	.+18     	; 0xa74 <TwoWire::write(unsigned char const*, unsigned int)+0x58>
     a62:	c8 01       	movw	r24, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:398
  }

  return i;
}
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	08 95       	ret
     a74:	89 01       	movw	r16, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:394
 */
size_t TwoWire::write(const uint8_t *data, size_t quantity) {
  uint8_t i = 0;  // uint8_t since we don't use bigger buffers
  uint8_t qty = quantity > BUFFER_LENGTH ? BUFFER_LENGTH : quantity; //Don't overfill the buffer.
  for (; i < qty; i++) {
    if (write(*(data + i)) == 0) break;   // break if buffer full
     a76:	e3 cf       	rjmp	.-58     	; 0xa3e <TwoWire::write(unsigned char const*, unsigned int)+0x22>

00000a78 <TwoWire::write(unsigned char)>:
     a78:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:346
 *
 *
 *@return     uint8_t
 *@retval     1 if successful, 0 if the buffer is full
 */
size_t TwoWire::write(uint8_t data) {
     a7a:	86 85       	ldd	r24, Z+14	; 0x0e
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:351
  uint8_t* txHead;
  uint8_t* txBuffer;

  #if defined(TWI_MANDS)                   // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     a7c:	df 01       	movw	r26, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:352
      txHead   = &(vars._bytesToReadWriteS);
     a7e:	84 ff       	sbrs	r24, 4
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:351
size_t TwoWire::write(uint8_t data) {
  uint8_t* txHead;
  uint8_t* txBuffer;

  #if defined(TWI_MANDS)                   // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     a80:	11 c0       	rjmp	.+34     	; 0xaa4 <TwoWire::write(unsigned char)+0x2c>
     a82:	56 96       	adiw	r26, 0x16	; 22
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:352
      txHead   = &(vars._bytesToReadWriteS);
     a84:	cf 01       	movw	r24, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:353
      txBuffer =   vars._trBufferS;
     a86:	80 5e       	subi	r24, 0xE0	; 224
     a88:	9e 4f       	sbci	r25, 0xFE	; 254
     a8a:	e6 89       	ldd	r30, Z+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:352
  uint8_t* txHead;
  uint8_t* txBuffer;

  #if defined(TWI_MANDS)                   // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
      txHead   = &(vars._bytesToReadWriteS);
     a8c:	e2 38       	cpi	r30, 0x82	; 130
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:368
    #endif
  }

  /* Put byte in txBuffer */

  if ((*txHead) < BUFFER_LENGTH) {      // while buffer not full, write to it
     a8e:	78 f4       	brcc	.+30     	; 0xaae <TwoWire::write(unsigned char)+0x36>
     a90:	e8 0f       	add	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:369
    txBuffer[(*txHead)] = data;             // Load data into the buffer
     a92:	f9 2f       	mov	r31, r25
     a94:	f1 1d       	adc	r31, r1
     a96:	60 83       	st	Z, r22
     a98:	8c 91       	ld	r24, X
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:370
    (*txHead)++;                            // advancing the head
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
     a9c:	8c 93       	st	X, r24
     a9e:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:371
    return 1;
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	08 95       	ret
     aa4:	51 96       	adiw	r26, 0x11	; 17
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:361
  {
    #if defined(TWI_MERGE_BUFFERS)         // Same Buffers for tx/rx
      txHead   = &(vars._bytesToReadWrite);
      txBuffer =   vars._trBuffer;
    #else                                  // Separate tx/rx Buffers
      txHead   = &(vars._bytesToWrite);
     aa6:	cf 01       	movw	r24, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:362
      txBuffer =   vars._txBuffer;
     aa8:	4c 96       	adiw	r24, 0x1c	; 28
     aaa:	e1 89       	ldd	r30, Z+17	; 0x11
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:361
  {
    #if defined(TWI_MERGE_BUFFERS)         // Same Buffers for tx/rx
      txHead   = &(vars._bytesToReadWrite);
      txBuffer =   vars._trBuffer;
    #else                                  // Separate tx/rx Buffers
      txHead   = &(vars._bytesToWrite);
     aac:	ef cf       	rjmp	.-34     	; 0xa8c <TwoWire::write(unsigned char)+0x14>
     aae:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:373
  if ((*txHead) < BUFFER_LENGTH) {      // while buffer not full, write to it
    txBuffer[(*txHead)] = data;             // Load data into the buffer
    (*txHead)++;                            // advancing the head
    return 1;
  } else {
    return 0;
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	08 95       	ret

00000ab4 <Print::availableForWrite()>:
availableForWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:375
  }
}
     ab4:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.h:58
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 95       	ret

00000aba <receiveHandler(int)>:
receiveHandler():
     aba:	0f 93       	push	r16
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:268
  ticks++;
}
volatile uint8_t printflag=0;

uint16_t WirePointer = 0;
void receiveHandler(int numbytes) {
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	8c 01       	movw	r16, r24
getBytesRead():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:595
 *              the last time this was called.
 */

uint8_t TwoWire::getBytesRead() {
  uint8_t num = vars._bytesTransmittedS;
  vars._bytesTransmittedS = 0;
     ac4:	10 92 0e 44 	sts	0x440E, r1	; 0x80440e <Wire+0xf>
receiveHandler():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:272
  Wire.getBytesRead(); // reset count of bytes read. We don't do anything with
                       // it here, but a write is going to reset it to a new
                       // value.
  WirePointer = Wire.read();
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	93 e4       	ldi	r25, 0x43	; 67
     acc:	7a df       	rcall	.-268    	; 0x9c2 <TwoWire::read()>
     ace:	c8 2f       	mov	r28, r24
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:274
  WirePointer <<= 8;
  WirePointer |= Wire.read();
     ad2:	93 e4       	ldi	r25, 0x43	; 67
     ad4:	76 df       	rcall	.-276    	; 0x9c2 <TwoWire::read()>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	82 2b       	or	r24, r18
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:273
void receiveHandler(int numbytes) {
  Wire.getBytesRead(); // reset count of bytes read. We don't do anything with
                       // it here, but a write is going to reset it to a new
                       // value.
  WirePointer = Wire.read();
  WirePointer <<= 8;
     ada:	9c 2b       	or	r25, r28
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:274
  WirePointer |= Wire.read();
     adc:	80 93 44 41 	sts	0x4144, r24	; 0x804144 <WirePointer>
     ae0:	90 93 45 41 	sts	0x4145, r25	; 0x804145 <WirePointer+0x1>
     ae4:	e8 01       	movw	r28, r16
     ae6:	c2 30       	cpi	r28, 0x02	; 2
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:276
  numbytes -= 2;
  while (numbytes) {
     ae8:	d1 05       	cpc	r29, r1
     aea:	b1 f0       	breq	.+44     	; 0xb18 <receiveHandler(int)+0x5e>
     aec:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:277
    uint8_t nv = Wire.read();
     aee:	93 e4       	ldi	r25, 0x43	; 67
     af0:	68 df       	rcall	.-304    	; 0x9c2 <TwoWire::read()>
     af2:	80 91 44 41 	lds	r24, 0x4144	; 0x804144 <WirePointer>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:297
    }
    if (!wrote) {
      reg.r[WirePointer++] = nv;
    }
    #else
      WirePointer++; //ignore write
     af6:	90 91 45 41 	lds	r25, 0x4145	; 0x804145 <WirePointer+0x1>
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	89 33       	cpi	r24, 0x39	; 57
     afe:	91 05       	cpc	r25, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:299
    #endif
    if (WirePointer >= sizeof(ewdt_regs_t))
     b00:	30 f4       	brcc	.+12     	; 0xb0e <receiveHandler(int)+0x54>
     b02:	80 93 44 41 	sts	0x4144, r24	; 0x804144 <WirePointer>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:297
    }
    if (!wrote) {
      reg.r[WirePointer++] = nv;
    }
    #else
      WirePointer++; //ignore write
     b06:	90 93 45 41 	sts	0x4145, r25	; 0x804145 <WirePointer+0x1>
     b0a:	21 97       	sbiw	r28, 0x01	; 1
     b0c:	ec cf       	rjmp	.-40     	; 0xae6 <receiveHandler(int)+0x2c>
     b0e:	10 92 44 41 	sts	0x4144, r1	; 0x804144 <WirePointer>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:300
    #endif
    if (WirePointer >= sizeof(ewdt_regs_t))
      WirePointer = 0;
     b12:	10 92 45 41 	sts	0x4145, r1	; 0x804145 <WirePointer+0x1>
     b16:	f9 cf       	rjmp	.-14     	; 0xb0a <receiveHandler(int)+0x50>
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 93 c1 41 	sts	0x41C1, r24	; 0x8041c1 <printflag>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:303
    numbytes--;
  }
  printflag=1;
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:304
}
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <requestHandler()>:
requestHandler():
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:306

void requestHandler() {
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
getBytesRead():
     b30:	c0 91 0e 44 	lds	r28, 0x440E	; 0x80440e <Wire+0xf>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:594
 *@retval     Number of bytes read by a master from this device acting as a slave since
 *              the last time this was called.
 */

uint8_t TwoWire::getBytesRead() {
  uint8_t num = vars._bytesTransmittedS;
     b34:	10 92 0e 44 	sts	0x440E, r1	; 0x80440e <Wire+0xf>
requestHandler():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:595
  vars._bytesTransmittedS = 0;
     b38:	80 91 44 41 	lds	r24, 0x4144	; 0x804144 <WirePointer>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:308
  uint8_t bytes_read = Wire.getBytesRead();
  WirePointer = (WirePointer + (bytes_read));
     b3c:	90 91 45 41 	lds	r25, 0x4145	; 0x804145 <WirePointer+0x1>
     b40:	c8 0f       	add	r28, r24
     b42:	d9 2f       	mov	r29, r25
     b44:	d1 1d       	adc	r29, r1
     b46:	c0 93 44 41 	sts	0x4144, r28	; 0x804144 <WirePointer>
     b4a:	d0 93 45 41 	sts	0x4145, r29	; 0x804145 <WirePointer+0x1>
     b4e:	8e 01       	movw	r16, r28
     b50:	00 5e       	subi	r16, 0xE0	; 224
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:309
  uint16_t end = WirePointer + CHUNK_SZ;
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
     b54:	09 33       	cpi	r16, 0x39	; 57
     b56:	11 05       	cpc	r17, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:310
  end = min(end, sizeof(ewdt_regs_t));
     b58:	10 f0       	brcs	.+4      	; 0xb5e <requestHandler()+0x36>
     b5a:	09 e3       	ldi	r16, 0x39	; 57
     b5c:	10 e0       	ldi	r17, 0x00	; 0
     b5e:	c1 58       	subi	r28, 0x81	; 129
     b60:	de 4b       	sbci	r29, 0xBE	; 190
     b62:	ce 01       	movw	r24, r28
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:311
  for (uint16_t i = WirePointer; i < end; i++) {
     b64:	8f 57       	subi	r24, 0x7F	; 127
     b66:	91 44       	sbci	r25, 0x41	; 65
     b68:	80 17       	cp	r24, r16
     b6a:	91 07       	cpc	r25, r17
     b6c:	28 f4       	brcc	.+10     	; 0xb78 <requestHandler()+0x50>
     b6e:	69 91       	ld	r22, Y+
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:312
    Wire.write(reg.r[i]);
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	93 e4       	ldi	r25, 0x43	; 67
     b74:	81 df       	rcall	.-254    	; 0xa78 <TwoWire::write(unsigned char)>
     b76:	f5 cf       	rjmp	.-22     	; 0xb62 <requestHandler()+0x3a>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 c1 41 	sts	0x41C1, r24	; 0x8041c1 <printflag>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:318
    // "write" a bunch of data - but the master might only want one byte.
    // The slave doesn't know how much data the master will want yet.
    // and won't know until it's gotten all that it wants and has generated a
    // stop condition.
  }
  printflag=1;
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:319
}
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	08 95       	ret

00000b88 <UartClass::begin(unsigned long)>:
begin():
     b88:	dc 01       	movw	r26, r24
     b8a:	ed 91       	ld	r30, X+
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.h:166
  /* DANGER DANGER DANGER
   * ANY CHANGES BETWEEN OTHER SCARY COMMENT AND THIS ONE WILL BREAK SERIAL when USE_ASM_DRE or USE_ASM_RXC is used!
   * DANGER DANGER DANGER */
 public:
    inline UartClass(volatile USART_t *hwserial_module, uint8_t *usart_pins, uint8_t mux_count, uint8_t mux_default);
    void                   begin(unsigned long   baud) {begin(baud, SERIAL_8N1);}
     b8c:	fc 91       	ld	r31, X
     b8e:	00 88       	ldd	r0, Z+16	; 0x10
     b90:	f1 89       	ldd	r31, Z+17	; 0x11
     b92:	e0 2d       	mov	r30, r0
     b94:	23 e0       	ldi	r18, 0x03	; 3
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	09 94       	ijmp

00000b9a <ina_wr(ina3221_reg_t, unsigned int*) [clone .constprop.49]>:
ina_wr():
     b9a:	cf 93       	push	r28
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:37
  *val <<= 8;
  *val |= Wire.read();
}

// write an ina3221 register from val
void ina_wr(ina3221_reg_t reg, uint16_t *val) {
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
beginTransmission():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:294
  if (__builtin_constant_p(address) > 0x7F) {     // Compile-time check if address is actually 7 bit long
    badArg("Supplied address seems to be 8 bit. Only 7-bit-addresses are supported");
    return;
  }
  // set address of targeted client
  vars._clientAddress = address << 1;
     ba0:	ef ef       	ldi	r30, 0xFF	; 255
     ba2:	f3 e4       	ldi	r31, 0x43	; 67
     ba4:	80 e8       	ldi	r24, 0x80	; 128
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:295
  (*txHead) = 0;  // fill buffer from 0
     ba6:	80 8b       	std	Z+16, r24	; 0x10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/wire.h:112
    void onRequest(void (*)(void));

    inline size_t write(unsigned long n) {  return      write((uint8_t)     n);}
    inline size_t write(long          n) {  return      write((uint8_t)     n);}
    inline size_t write(unsigned int  n) {  return      write((uint8_t)     n);}
    inline size_t write(int           n) {  return      write((uint8_t)     n);}
     ba8:	11 8a       	std	Z+17, r1	; 0x11
write():
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	cf 01       	movw	r24, r30
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:40
  Wire.beginTransmission(INA_ADDR);
  Wire.write(reg);
  Wire.write((*val) >> 8);
     bae:	64 df       	rcall	.-312    	; 0xa78 <TwoWire::write(unsigned char)>
ina_wr():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/wire.h:111
    void onReceive(void (*)(int));
    void onRequest(void (*)(void));

    inline size_t write(unsigned long n) {  return      write((uint8_t)     n);}
    inline size_t write(long          n) {  return      write((uint8_t)     n);}
    inline size_t write(unsigned int  n) {  return      write((uint8_t)     n);}
     bb0:	69 81       	ldd	r22, Y+1	; 0x01
write():
     bb2:	8f ef       	ldi	r24, 0xFF	; 255
     bb4:	93 e4       	ldi	r25, 0x43	; 67
     bb6:	60 df       	rcall	.-320    	; 0xa78 <TwoWire::write(unsigned char)>
     bb8:	68 81       	ld	r22, Y
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	93 e4       	ldi	r25, 0x43	; 67
     bbe:	5c df       	rcall	.-328    	; 0xa78 <TwoWire::write(unsigned char)>
ina_wr():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:43
  Wire.write((*val) & 0xff);
  Wire.endTransmission();
}
     bc0:	df 91       	pop	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:328
 *           20 for likely a slave holding the clock low
 *          255 (-1) for TWI not initialized (begin not called) or bus somehow in "unknown" state.
 */
uint8_t TwoWire::endTransmission(bool sendStop) {
  // transmit (blocking)
  return TWI_MasterWrite(&vars, sendStop);
     bc2:	cf 91       	pop	r28
endTransmission():
     bc4:	52 cb       	rjmp	.-2396   	; 0x26a <TWI_MasterWrite.constprop.55>

00000bc6 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]>:
ina_rr():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:26
SOFTWARE.*/

#include "ina3221.h"
#include <wire.h>
// read an ina3221 register into val
void ina_rr(ina3221_reg_t reg, uint16_t *val) {
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	ec 01       	movw	r28, r24
beginTransmission():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:294
  if (__builtin_constant_p(address) > 0x7F) {     // Compile-time check if address is actually 7 bit long
    badArg("Supplied address seems to be 8 bit. Only 7-bit-addresses are supported");
    return;
  }
  // set address of targeted client
  vars._clientAddress = address << 1;
     bce:	10 e8       	ldi	r17, 0x80	; 128
     bd0:	10 93 0f 44 	sts	0x440F, r17	; 0x80440f <Wire+0x10>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:295
  (*txHead) = 0;  // fill buffer from 0
     bd4:	10 92 10 44 	sts	0x4410, r1	; 0x804410 <Wire+0x11>
write():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/wire.h:112
    inline size_t write(int           n) {  return      write((uint8_t)     n);}
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	93 e4       	ldi	r25, 0x43	; 67
     bde:	4c df       	rcall	.-360    	; 0xa78 <TwoWire::write(unsigned char)>
endTransmission():
     be0:	44 db       	rcall	.-2424   	; 0x26a <TWI_MasterWrite.constprop.55>
requestFrom():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:328
 *           20 for likely a slave holding the clock low
 *          255 (-1) for TWI not initialized (begin not called) or bus somehow in "unknown" state.
 */
uint8_t TwoWire::endTransmission(bool sendStop) {
  // transmit (blocking)
  return TWI_MasterWrite(&vars, sendStop);
     be2:	10 93 0f 44 	sts	0x440F, r17	; 0x80440f <Wire+0x10>
TWI_MasterRead():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:266
 */
uint8_t TwoWire::requestFrom(uint8_t  address,  uint8_t  quantity,  uint8_t sendStop) {
  if (quantity > BUFFER_LENGTH) {
    quantity = BUFFER_LENGTH;
  }
  vars._clientAddress = address << 1;
     be6:	10 92 12 44 	sts	0x4412, r1	; 0x804412 <Wire+0x13>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:405
    uint8_t* rxHead   = &(_data->_bytesToRead);
    uint8_t* rxTail   = &(_data->_bytesRead);
    uint8_t* rxBuffer =   _data->_rxBuffer;
  #endif

  (*rxTail) = 0;                      // Reset counter
     bea:	e0 91 0b 44 	lds	r30, 0x440B	; 0x80440b <Wire+0xc>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:407

  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
     bee:	f0 91 0c 44 	lds	r31, 0x440C	; 0x80440c <Wire+0xd>
     bf2:	85 81       	ldd	r24, Z+5	; 0x05
     bf4:	83 70       	andi	r24, 0x03	; 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:413
                                      // creates bloat-y code, using a local variable fixes that

  TWIR_INIT_ERROR;             // local variable for errors
  uint8_t dataRead = 0;

  if ((module->MSTATUS & TWI_BUSSTATE_gm) != TWI_BUSSTATE_UNKNOWN_gc) {
     bf6:	b1 f0       	breq	.+44     	; 0xc24 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x5e>
     bf8:	81 e8       	ldi	r24, 0x81	; 129
     bfa:	87 83       	std	Z+7, r24	; 0x07
ina_rr():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:419
    uint8_t currentSM;
    uint8_t currentStatus;
    uint8_t command  = 0;
    uint16_t timeout = 0;

    module->MADDR = ADD_READ_BIT(_data->_clientAddress);  // Send Address with read bit
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	20 e0       	ldi	r18, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:417

  if ((module->MSTATUS & TWI_BUSSTATE_gm) != TWI_BUSSTATE_UNKNOWN_gc) {
    uint8_t currentSM;
    uint8_t currentStatus;
    uint8_t command  = 0;
    uint16_t timeout = 0;
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
TWI_MasterRead():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:416
  uint8_t dataRead = 0;

  if ((module->MSTATUS & TWI_BUSSTATE_gm) != TWI_BUSSTATE_UNKNOWN_gc) {
    uint8_t currentSM;
    uint8_t currentStatus;
    uint8_t command  = 0;
     c04:	62 e0       	ldi	r22, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:460
            rxBuffer[dataRead] = module->MDATA;      // save byte in the Buffer.
            dataRead++;                              // increment read counter
            timeout = 0;                             // reset timeout

            if (dataRead < bytesToRead) {            // expecting more bytes, so
              module->MCTRLB = TWI_MCMD_RECVTRANS_gc;  // send an ACK so the Slave so it can send the next byte
     c06:	45 81       	ldd	r20, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:422
    uint16_t timeout = 0;

    module->MADDR = ADD_READ_BIT(_data->_clientAddress);  // Send Address with read bit

    while (true) {
      currentStatus = module->MSTATUS;
     c08:	54 2f       	mov	r21, r20
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:423
      currentSM = currentStatus & TWI_BUSSTATE_gm;  // get the current mode of the state machine
     c0a:	53 70       	andi	r21, 0x03	; 3
     c0c:	2f 5f       	subi	r18, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:426

      #if defined(TWI_TIMEOUT_ENABLE)
        if (++timeout > (F_CPU/1000)) {
     c0e:	3f 4f       	sbci	r19, 0xFF	; 255
     c10:	21 31       	cpi	r18, 0x11	; 17
     c12:	77 e2       	ldi	r23, 0x27	; 39
     c14:	37 07       	cpc	r19, r23
     c16:	20 f4       	brcc	.+8      	; 0xc20 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x5a>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:438
          }
          break;
        }
      #endif

      if (currentStatus & TWI_ARBLOST_bm) {   // Check for Bus error
     c18:	43 ff       	sbrs	r20, 3
     c1a:	1a c0       	rjmp	.+52     	; 0xc50 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x8a>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:439
        module->MSTATUS = TWI_ARBLOST_bm;     // reset error flags
     c1c:	98 e0       	ldi	r25, 0x08	; 8
     c1e:	95 83       	std	Z+5, r25	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:479
          TWIR_SET_ERROR(TWI_ERR_RXACK);          // set error flag
          command = TWI_MCMD_STOP_gc;             // free the bus
        }
      }
    }
    (*rxHead) = dataRead;
     c20:	80 93 11 44 	sts	0x4411, r24	; 0x804411 <Wire+0x12>
ina_rr():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:31
  Wire.beginTransmission(INA_ADDR);
  Wire.write(reg);
  Wire.endTransmission();
  Wire.requestFrom((uint8_t)INA_ADDR, (uint8_t)2);
  *val = (uint16_t)Wire.read();
     c24:	8f ef       	ldi	r24, 0xFF	; 255
     c26:	93 e4       	ldi	r25, 0x43	; 67
     c28:	cc de       	rcall	.-616    	; 0x9c2 <TwoWire::read()>
     c2a:	18 82       	st	Y, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:32
  *val <<= 8;
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:33
  *val |= Wire.read();
     c30:	93 e4       	ldi	r25, 0x43	; 67
     c32:	c7 de       	rcall	.-626    	; 0x9c2 <TwoWire::read()>
     c34:	28 81       	ld	r18, Y
     c36:	39 81       	ldd	r19, Y+1	; 0x01
     c38:	82 2b       	or	r24, r18
     c3a:	93 2b       	or	r25, r19
     c3c:	88 83       	st	Y, r24
     c3e:	99 83       	std	Y+1, r25	; 0x01
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:34
}
     c44:	1f 91       	pop	r17
     c46:	08 95       	ret
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	20 e0       	ldi	r18, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:457
      if (currentSM == TWI_BUSSTATE_OWNER_gc) {  // Address sent, check for WIF/RIF
        if (currentStatus & TWI_RIF_bm) {         // data received
          if (dataRead < BUFFER_LENGTH) {          // Buffer still free
            rxBuffer[dataRead] = module->MDATA;      // save byte in the Buffer.
            dataRead++;                              // increment read counter
            timeout = 0;                             // reset timeout
     c4c:	97 e0       	ldi	r25, 0x07	; 7
     c4e:	db cf       	rjmp	.-74     	; 0xc06 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x40>
TWI_MasterRead():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:463

            if (dataRead < bytesToRead) {            // expecting more bytes, so
              module->MCTRLB = TWI_MCMD_RECVTRANS_gc;  // send an ACK so the Slave so it can send the next byte
            } else {                                 // Otherwise,
              if (send_stop != 0) {
                command = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;   // send STOP + NACK
     c50:	99 23       	and	r25, r25
     c52:	a1 f0       	breq	.+40     	; 0xc7c <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0xb6>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:444
        module->MSTATUS = TWI_ARBLOST_bm;     // reset error flags
        TWIR_SET_ERROR(TWI_ERR_BUS_ARB);      // set error flag
        break;                                // leave TX loop
      }

      if (command != 0) {
     c54:	52 30       	cpi	r21, 0x02	; 2
     c56:	21 f7       	brne	.-56     	; 0xc20 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x5a>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:445
        if (currentSM == TWI_BUSSTATE_OWNER_gc) {
     c58:	94 83       	std	Z+4, r25	; 0x04
     c5a:	47 ff       	sbrs	r20, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:446
          module->MCTRLB = command;
     c5c:	12 c0       	rjmp	.+36     	; 0xc82 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0xbc>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:453
          break;
        }
      }

      if (currentSM == TWI_BUSSTATE_OWNER_gc) {  // Address sent, check for WIF/RIF
        if (currentStatus & TWI_RIF_bm) {         // data received
     c5e:	82 38       	cpi	r24, 0x82	; 130
     c60:	a8 f7       	brcc	.-22     	; 0xc4c <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x86>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:454
          if (dataRead < BUFFER_LENGTH) {          // Buffer still free
     c62:	20 85       	ldd	r18, Z+8	; 0x08
     c64:	a8 2f       	mov	r26, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:455
            rxBuffer[dataRead] = module->MDATA;      // save byte in the Buffer.
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	a3 56       	subi	r26, 0x63	; 99
     c6a:	bb 4b       	sbci	r27, 0xBB	; 187
     c6c:	2c 93       	st	X, r18
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	81 30       	cpi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:456
            dataRead++;                              // increment read counter
     c72:	51 f7       	brne	.-44     	; 0xc48 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x82>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:459
            timeout = 0;                             // reset timeout

            if (dataRead < bytesToRead) {            // expecting more bytes, so
     c74:	64 83       	std	Z+4, r22	; 0x04
ina_rr():
     c76:	30 e0       	ldi	r19, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:460
              module->MCTRLB = TWI_MCMD_RECVTRANS_gc;  // send an ACK so the Slave so it can send the next byte
     c78:	20 e0       	ldi	r18, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:457
      if (currentSM == TWI_BUSSTATE_OWNER_gc) {  // Address sent, check for WIF/RIF
        if (currentStatus & TWI_RIF_bm) {         // data received
          if (dataRead < BUFFER_LENGTH) {          // Buffer still free
            rxBuffer[dataRead] = module->MDATA;      // save byte in the Buffer.
            dataRead++;                              // increment read counter
            timeout = 0;                             // reset timeout
     c7a:	c5 cf       	rjmp	.-118    	; 0xc06 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x40>
TWI_MasterRead():
     c7c:	52 30       	cpi	r21, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:452
        } else {
          break;
        }
      }

      if (currentSM == TWI_BUSSTATE_OWNER_gc) {  // Address sent, check for WIF/RIF
     c7e:	19 f6       	brne	.-122    	; 0xc06 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x40>
     c80:	ec cf       	rjmp	.-40     	; 0xc5a <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x94>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:473

          } else {                                        // Buffer overflow with the incoming byte
            TWIR_SET_ERROR(TWI_ERR_BUF_OVERFLOW);         // Set Error and
            command = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;   // send STOP + NACK
          }
        } else if (currentStatus & TWI_WIF_bm) {  // Address NACKed
     c82:	46 ff       	sbrs	r20, 6
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:475
          TWIR_SET_ERROR(TWI_ERR_RXACK);          // set error flag
          command = TWI_MCMD_STOP_gc;             // free the bus
     c84:	c0 cf       	rjmp	.-128    	; 0xc06 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x40>
ina_rr():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.h:49
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	be cf       	rjmp	.-132    	; 0xc06 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]+0x40>

00000c8a <Print::write(char const*) [clone .part.2] [clone .constprop.45]>:
_ZN5Print5writeEPKc.part.2():
     c8a:	fc 01       	movw	r30, r24
     c8c:	01 90       	ld	r0, Z+
     c8e:	00 20       	and	r0, r0
     c90:	e9 f7       	brne	.-6      	; 0xc8c <Print::write(char const*) [clone .part.2] [clone .constprop.45]+0x2>
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	af 01       	movw	r20, r30
     c96:	48 1b       	sub	r20, r24
     c98:	59 0b       	sbc	r21, r25
     c9a:	bc 01       	movw	r22, r24
     c9c:	86 ec       	ldi	r24, 0xC6	; 198
     c9e:	91 e4       	ldi	r25, 0x41	; 65
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:125
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     ca0:	a9 cb       	rjmp	.-2222   	; 0x3f4 <Print::write(unsigned char const*, unsigned int)>

00000ca2 <Print::println() [clone .constprop.44]>:
write():
     ca2:	87 ea       	ldi	r24, 0xA7	; 167
     ca4:	90 e4       	ldi	r25, 0x40	; 64
     ca6:	f1 cf       	rjmp	.-30     	; 0xc8a <Print::write(char const*) [clone .part.2] [clone .constprop.45]>

00000ca8 <Print::println(__FlashStringHelper const*) [clone .constprop.42]>:
println():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:113
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:115
{
  size_t n = print(ifsh);
     cac:	a0 dd       	rcall	.-1216   	; 0x7ee <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
     cae:	ec 01       	movw	r28, r24
     cb0:	f8 df       	rcall	.-16     	; 0xca2 <Print::println() [clone .constprop.44]>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:116
  n += println();
     cb2:	8c 0f       	add	r24, r28
     cb4:	9d 1f       	adc	r25, r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:118
  return n;
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>:
printNumber():
     cbc:	8f 92       	push	r8
     cbe:	9f 92       	push	r9
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:231
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     cc0:	af 92       	push	r10
     cc2:	bf 92       	push	r11
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	a1 97       	sbiw	r28, 0x21	; 33
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	19 a2       	std	Y+33, r1	; 0x21
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:236
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     cd8:	42 30       	cpi	r20, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:239

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     cda:	08 f4       	brcc	.+2      	; 0xcde <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]+0x22>
     cdc:	4a e0       	ldi	r20, 0x0A	; 10
     cde:	8e 01       	movw	r16, r28
     ce0:	0f 5d       	subi	r16, 0xDF	; 223
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	84 2e       	mov	r8, r20
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:242

  do {
    char c = n % base;
     ce6:	91 2c       	mov	r9, r1
     ce8:	b1 2c       	mov	r11, r1
     cea:	a1 2c       	mov	r10, r1
     cec:	a5 01       	movw	r20, r10
     cee:	94 01       	movw	r18, r8
     cf0:	ca d7       	rcall	.+3988   	; 0x1c86 <__udivmodsi4>
     cf2:	e6 2f       	mov	r30, r22
     cf4:	b9 01       	movw	r22, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:243
    n /= base;
     cf6:	ca 01       	movw	r24, r20
     cf8:	ea 30       	cpi	r30, 0x0A	; 10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:245

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     cfa:	d4 f4       	brge	.+52     	; 0xd30 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]+0x74>
     cfc:	e0 5d       	subi	r30, 0xD0	; 208
     cfe:	d8 01       	movw	r26, r16
     d00:	ee 93       	st	-X, r30
     d02:	8d 01       	movw	r16, r26
     d04:	23 2b       	or	r18, r19
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:246
  } while(n);
     d06:	24 2b       	or	r18, r20
     d08:	25 2b       	or	r18, r21
     d0a:	81 f7       	brne	.-32     	; 0xcec <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]+0x30>
     d0c:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.h:48
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     d0e:	80 e0       	ldi	r24, 0x00	; 0
write():
     d10:	10 97       	sbiw	r26, 0x00	; 0
     d12:	11 f0       	breq	.+4      	; 0xd18 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]+0x5c>
     d14:	cd 01       	movw	r24, r26
     d16:	b9 df       	rcall	.-142    	; 0xc8a <Print::write(char const*) [clone .part.2] [clone .constprop.45]>
printNumber():
     d18:	a1 96       	adiw	r28, 0x21	; 33
     d1a:	cd bf       	out	0x3d, r28	; 61
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:249

  return write(str);
}
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	08 95       	ret
     d30:	e9 5c       	subi	r30, 0xC9	; 201
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:245

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     d32:	e5 cf       	rjmp	.-54     	; 0xcfe <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]+0x42>

00000d34 <Print::print(long, int) [clone .constprop.37]>:
print():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:86
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:90
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
     d40:	4a 30       	cpi	r20, 0x0A	; 10
     d42:	51 05       	cpc	r21, r1
     d44:	d1 f4       	brne	.+52     	; 0xd7a <Print::print(long, int) [clone .constprop.37]+0x46>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:96
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     d46:	4a e0       	ldi	r20, 0x0A	; 10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:91
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     d48:	97 ff       	sbrs	r25, 7
     d4a:	17 c0       	rjmp	.+46     	; 0xd7a <Print::print(long, int) [clone .constprop.37]+0x46>
     d4c:	6b 01       	movw	r12, r22
     d4e:	7c 01       	movw	r14, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:92
      int t = print('-');
     d50:	8d e2       	ldi	r24, 0x2D	; 45
     d52:	67 dd       	rcall	.-1330   	; 0x822 <Print::print(char) [clone .constprop.39]>
     d54:	ec 01       	movw	r28, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:93
      n = -n;
     d56:	66 27       	eor	r22, r22
     d58:	77 27       	eor	r23, r23
     d5a:	cb 01       	movw	r24, r22
     d5c:	6c 19       	sub	r22, r12
     d5e:	7d 09       	sbc	r23, r13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:94
      return printNumber(n, 10) + t;
     d60:	8e 09       	sbc	r24, r14
     d62:	9f 09       	sbc	r25, r15
     d64:	4a e0       	ldi	r20, 0x0A	; 10
     d66:	aa df       	rcall	.-172    	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:100
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     d68:	8c 0f       	add	r24, r28
     d6a:	9d 1f       	adc	r25, r29
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	08 95       	ret
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:98
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:137
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     d86:	9a cf       	rjmp	.-204    	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>

00000d88 <Print::println(char const*) [clone .constprop.23]>:
println():
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
write():
     d8c:	7e df       	rcall	.-260    	; 0xc8a <Print::write(char const*) [clone .part.2] [clone .constprop.45]>
     d8e:	ec 01       	movw	r28, r24
println():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:140
{
  size_t n = print(c);
  n += println();
     d90:	88 df       	rcall	.-240    	; 0xca2 <Print::println() [clone .constprop.44]>
     d92:	8c 0f       	add	r24, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:142
  return n;
}
     d94:	9d 1f       	adc	r25, r29
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <Print::print(char const*) [clone .constprop.22]>:
write():
     d9c:	76 cf       	rjmp	.-276    	; 0xc8a <Print::write(char const*) [clone .part.2] [clone .constprop.45]>

00000d9e <__vector_30>:
__vector_30():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:61
size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:135
  #elif defined(MILLIS_USE_TIMERB4)
    ISR(TCB4_INT_vect)
  #else
    #error "no millis timer selected"
  #endif
  {
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	af 93       	push	r26
     dae:	bf 93       	push	r27
     db0:	80 91 c2 41 	lds	r24, 0x41C2	; 0x8041c2 <timer_millis>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:141

    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    #if (defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4))
      #if(F_CPU>1000000)
        timer_millis++; // that's all we need to do!
     db4:	90 91 c3 41 	lds	r25, 0x41C3	; 0x8041c3 <timer_millis+0x1>
     db8:	a0 91 c4 41 	lds	r26, 0x41C4	; 0x8041c4 <timer_millis+0x2>
     dbc:	b0 91 c5 41 	lds	r27, 0x41C5	; 0x8041c5 <timer_millis+0x3>
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	a1 1d       	adc	r26, r1
     dc4:	b1 1d       	adc	r27, r1
     dc6:	80 93 c2 41 	sts	0x41C2, r24	; 0x8041c2 <timer_millis>
     dca:	90 93 c3 41 	sts	0x41C3, r25	; 0x8041c3 <timer_millis+0x1>
     dce:	a0 93 c4 41 	sts	0x41C4, r26	; 0x8041c4 <timer_millis+0x2>
     dd2:	b0 93 c5 41 	sts	0x41C5, r27	; 0x8041c5 <timer_millis+0x3>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:172
    #elif defined(MILLIS_USE_TIMERD0)
      TCD0.INTFLAGS = TCD_OVF_bm;
    #elif defined(MILLIS_USE_TIMERRTC)
      RTC.INTFLAGS = RTC_OVF_bm;
    #else // timerb
      _timer->INTFLAGS = TCB_CAPT_bm;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:174
    #endif
  }
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART1.cpp:70
  #else
    ISR(USART1_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"       "\n\t"
                "push  r31"       "\n\t"
                :::);
     dec:	18 95       	reti

00000dee <__vector_32>:
__vector_32():
     dee:	ef 93       	push	r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART1.cpp:77
#if PROGMEM_SIZE > 8192
                "jmp _do_dre"     "\n\t"
#else
                "rjmp _do_dre"    "\n\t"
#endif
                ::"z"(&Serial1));
     df0:	ff 93       	push	r31
     df2:	e6 ec       	ldi	r30, 0xC6	; 198
     df4:	f1 e4       	ldi	r31, 0x41	; 65
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <_do_dre()>

00000df8 <__vector_31>:
__vector_31():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART1.cpp:49
  #else
      ISR(USART1_RXC_vect, ISR_NAKED) {
        __asm__ __volatile__(
              "push      r30"     "\n\t"
              "push      r31"     "\n\t"
              :::);
     df8:	ef 93       	push	r30
     dfa:	ff 93       	push	r31
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART1.cpp:56
#if PROGMEM_SIZE > 8192
              "jmp   _do_rxc"     "\n\t"
#else
              "rjmp   _do_rxc"    "\n\t"
#endif
              ::"z"(&Serial1));
     dfc:	e6 ec       	ldi	r30, 0xC6	; 198
     dfe:	f1 e4       	ldi	r31, 0x41	; 65
     e00:	31 c0       	rjmp	.+98     	; 0xe64 <_do_rxc()>

00000e02 <__vector_33>:
__vector_33():
     e02:	ef 93       	push	r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART1.cpp:26
#if PROGMEM_SIZE > 8192
            "jmp _do_txc"         "\n\t"
#else
            "rjmp _do_txc"        "\n\t"
#endif // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
     e04:	e0 e2       	ldi	r30, 0x20	; 32
     e06:	52 c0       	rjmp	.+164    	; 0xeac <_do_txc()>

00000e08 <_do_dre()>:
_Z7_do_drev():
     e08:	2f 93       	push	r18
     e0a:	2f b7       	in	r18, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:245
      "out        0x3f,     r18"      "\n\t"  // restore SREG
      "pop         r18"               "\n\t"  // pop old r18
      "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
      "pop         r30"               "\n\t"
      "reti"                          "\n"   // and RETI!
      ::);
     e0c:	2f 93       	push	r18
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	af 93       	push	r26
     e14:	bf 93       	push	r27
     e16:	68 94       	set

00000e18 <_poll_dre>:
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	c4 85       	ldd	r28, Z+12	; 0x0c
     e20:	d8 e0       	ldi	r29, 0x08	; 8
     e22:	96 89       	ldd	r25, Z+22	; 0x16
     e24:	df 01       	movw	r26, r30
     e26:	a9 0f       	add	r26, r25
     e28:	b2 1f       	adc	r27, r18
     e2a:	a9 5a       	subi	r26, 0xA9	; 169
     e2c:	bf 4f       	sbci	r27, 0xFF	; 255
     e2e:	8c 91       	ld	r24, X
     e30:	20 e4       	ldi	r18, 0x40	; 64
     e32:	2c 83       	std	Y+4, r18	; 0x04
     e34:	8a 83       	std	Y+2, r24	; 0x02
     e36:	9f 5f       	subi	r25, 0xFF	; 255
     e38:	9f 73       	andi	r25, 0x3F	; 63
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	25 89       	ldd	r18, Z+21	; 0x15
     e3e:	29 13       	cpse	r18, r25
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <_done_dre_irq>
     e42:	8f 7d       	andi	r24, 0xDF	; 223
     e44:	8d 83       	std	Y+5, r24	; 0x05

00000e46 <_done_dre_irq>:
     e46:	96 8b       	std	Z+22, r25	; 0x16
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	0e f0       	brts	.+2      	; 0xe50 <_done_dre_irq+0xa>
     e4e:	82 cc       	rjmp	.-1788   	; 0x754 <_poll_dre_done>
     e50:	bf 91       	pop	r27
     e52:	af 91       	pop	r26
     e54:	9f 91       	pop	r25
     e56:	8f 91       	pop	r24
     e58:	2f 91       	pop	r18
     e5a:	2f bf       	out	0x3f, r18	; 63
     e5c:	2f 91       	pop	r18
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	18 95       	reti

00000e64 <_do_rxc()>:
_Z7_do_rxcv():
     e64:	2f 93       	push	r18
     e66:	2f b7       	in	r18, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:127
        "out       0x3f,       r18"   "\n\t" // and write back
        "pop        r18"              "\n\t" // used as tail pointer and z known zero.
        "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
        "pop        r30"              "\n\t" // pointer to serial instance
        "reti"                        "\n"   // return
        ::);
     e68:	2f 93       	push	r18
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	c4 85       	ldd	r28, Z+12	; 0x0c
     e74:	d8 e0       	ldi	r29, 0x08	; 8
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	98 81       	ld	r25, Y
     e7a:	81 fd       	sbrc	r24, 1
     e7c:	0d c0       	rjmp	.+26     	; 0xe98 <_end_rxc>
     e7e:	c3 89       	ldd	r28, Z+19	; 0x13
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	8c 0f       	add	r24, r28
     e84:	8f 73       	andi	r24, 0x3F	; 63
     e86:	24 89       	ldd	r18, Z+20	; 0x14
     e88:	28 17       	cp	r18, r24
     e8a:	31 f0       	breq	.+12     	; 0xe98 <_end_rxc>
     e8c:	ce 0f       	add	r28, r30
     e8e:	df 2f       	mov	r29, r31
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	d2 1f       	adc	r29, r18
     e94:	9f 8b       	std	Y+23, r25	; 0x17
     e96:	83 8b       	std	Z+19, r24	; 0x13

00000e98 <_end_rxc>:
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	9f 91       	pop	r25
     e9e:	8f 91       	pop	r24
     ea0:	2f 91       	pop	r18
     ea2:	2f bf       	out	0x3f, r18	; 63
     ea4:	2f 91       	pop	r18
     ea6:	ff 91       	pop	r31
     ea8:	ef 91       	pop	r30
     eaa:	18 95       	reti

00000eac <_do_txc()>:
_Z7_do_txcv():
     eac:	ff 93       	push	r31
     eae:	8f 93       	push	r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:68
        "out     0x3f,      r24"  "\n\t"  // restore it
        "pop      r24"            "\n\t"  // pop r24 to get it's old value back
        "pop      r31"            "\n\t"  // and r31
        "pop      r30"            "\n\t"  // Pop the register the ISR did
        "reti"                    "\n"    // return from the interrupt.
        ::);
     eb0:	8f b7       	in	r24, 0x3f	; 63
     eb2:	8f 93       	push	r24
     eb4:	f8 e0       	ldi	r31, 0x08	; 8

00000eb6 <_txc_flush_rx>:
     eb6:	80 81       	ld	r24, Z
     eb8:	84 81       	ldd	r24, Z+4	; 0x04
     eba:	87 ff       	sbrs	r24, 7
     ebc:	fc cf       	rjmp	.-8      	; 0xeb6 <_txc_flush_rx>
     ebe:	85 81       	ldd	r24, Z+5	; 0x05
     ec0:	8f 7b       	andi	r24, 0xBF	; 191
     ec2:	80 68       	ori	r24, 0x80	; 128
     ec4:	85 83       	std	Z+5, r24	; 0x05
     ec6:	8f 91       	pop	r24
     ec8:	8f bf       	out	0x3f, r24	; 63
     eca:	8f 91       	pop	r24
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	18 95       	reti

00000ed2 <__vector_42>:
__vector_42():
     ed2:	1f 92       	push	r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:766

/**
 *@brief      TWI1 Slave Interrupt vector
 */
#if defined(TWI1)
  ISR(TWI1_TWIS_vect) {
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	0b b6       	in	r0, 0x3b	; 59
     ede:	0f 92       	push	r0
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
onSlaveIRQ():
     ef8:	89 e6       	ldi	r24, 0x69	; 105
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:709
                                                    // Wire interfaces. Here is decoded which interrupt was fired.
  #if defined(TWI1) &&  defined(TWI_USING_WIRE1)   // Two TWIs available and TWI1 is used. Need to check the module
    if (module == &TWI0) {
      TWI_HandleSlaveIRQ(&(Wire.vars));
    } else if (module == &TWI1) {
      TWI_HandleSlaveIRQ(&(Wire1.vars));
     efa:	92 e4       	ldi	r25, 0x42	; 66
     efc:	d4 dc       	rcall	.-1624   	; 0x8a6 <TWI_HandleSlaveIRQ>
__vector_42():
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:768
 *@brief      TWI1 Slave Interrupt vector
 */
#if defined(TWI1)
  ISR(TWI1_TWIS_vect) {
    TwoWire::onSlaveIRQ(&TWI1);
  }
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0b be       	out	0x3b, r0	; 59
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_16>:
__vector_16():
     f24:	1f 92       	push	r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:757


/**
 *@brief      TWI0 Slave Interrupt vector
 */
ISR(TWI0_TWIS_vect) {
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	0b b6       	in	r0, 0x3b	; 59
     f30:	0f 92       	push	r0
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
onSlaveIRQ():
     f4a:	8b e0       	ldi	r24, 0x0B	; 11
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:707
 */
void TwoWire::onSlaveIRQ(TWI_t *module) {          // This function is static and is, thus, the only one for both
                                                    // Wire interfaces. Here is decoded which interrupt was fired.
  #if defined(TWI1) &&  defined(TWI_USING_WIRE1)   // Two TWIs available and TWI1 is used. Need to check the module
    if (module == &TWI0) {
      TWI_HandleSlaveIRQ(&(Wire.vars));
     f4c:	94 e4       	ldi	r25, 0x44	; 68
     f4e:	ab dc       	rcall	.-1706   	; 0x8a6 <TWI_HandleSlaveIRQ>
__vector_16():
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:759
/**
 *@brief      TWI0 Slave Interrupt vector
 */
ISR(TWI0_TWIS_vect) {
  TwoWire::onSlaveIRQ(&TWI0);
}
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0b be       	out	0x3b, r0	; 59
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <__vector_4>:
__vector_4():
     f76:	1f 92       	push	r1
     f78:	0f 92       	push	r0
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:259

volatile uint8_t wake = 0;
volatile uint32_t ticks = 0;
// programmable interrupt timer
// fires at RTC_HZ (16)
ISR(RTC_PIT_vect) {
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	0f 92       	push	r0
     f7e:	11 24       	eor	r1, r1
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	af 93       	push	r26
     f86:	bf 93       	push	r27
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 c0 41 	sts	0x41C0, r24	; 0x8041c0 <wake>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:260
  wake = 1;
     f8e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7e0153>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:261
  RTC.PITINTFLAGS =
     f92:	80 91 bc 41 	lds	r24, 0x41BC	; 0x8041bc <ticks>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:263
      RTC_PI_bm; /* Clear interrupt flag by writing '1' (required) */
  ticks++;
     f96:	90 91 bd 41 	lds	r25, 0x41BD	; 0x8041bd <ticks+0x1>
     f9a:	a0 91 be 41 	lds	r26, 0x41BE	; 0x8041be <ticks+0x2>
     f9e:	b0 91 bf 41 	lds	r27, 0x41BF	; 0x8041bf <ticks+0x3>
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	a1 1d       	adc	r26, r1
     fa6:	b1 1d       	adc	r27, r1
     fa8:	80 93 bc 41 	sts	0x41BC, r24	; 0x8041bc <ticks>
     fac:	90 93 bd 41 	sts	0x41BD, r25	; 0x8041bd <ticks+0x1>
     fb0:	a0 93 be 41 	sts	0x41BE, r26	; 0x8041be <ticks+0x2>
     fb4:	b0 93 bf 41 	sts	0x41BF, r27	; 0x8041bf <ticks+0x3>
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:264
}
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	0f 90       	pop	r0
     fc6:	1f 90       	pop	r1
     fc8:	18 95       	reti

00000fca <global constructors keyed to 65535_0_DualModeExample.ino.cpp.o.3523>:
_GLOBAL__I_65535_0_DualModeExample.ino.cpp.o.3523():
     fca:	e6 ec       	ldi	r30, 0xC6	; 198
     fcc:	f1 e4       	ldi	r31, 0x41	; 65
     fce:	12 82       	std	Z+2, r1	; 0x02
     fd0:	13 82       	std	Z+3, r1	; 0x03
     fd2:	88 ee       	ldi	r24, 0xE8	; 232
     fd4:	93 e0       	ldi	r25, 0x03	; 3
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	84 83       	std	Z+4, r24	; 0x04
     fdc:	95 83       	std	Z+5, r25	; 0x05
     fde:	a6 83       	std	Z+6, r26	; 0x06
     fe0:	b7 83       	std	Z+7, r27	; 0x07
     fe2:	2f e7       	ldi	r18, 0x7F	; 127
     fe4:	30 e4       	ldi	r19, 0x40	; 64
     fe6:	20 83       	st	Z, r18
     fe8:	31 83       	std	Z+1, r19	; 0x01
     fea:	20 e2       	ldi	r18, 0x20	; 32
     fec:	38 e0       	ldi	r19, 0x08	; 8
     fee:	24 87       	std	Z+12, r18	; 0x0c
     ff0:	35 87       	std	Z+13, r19	; 0x0d
     ff2:	22 ef       	ldi	r18, 0xF2	; 242
     ff4:	31 e0       	ldi	r19, 0x01	; 1
     ff6:	26 87       	std	Z+14, r18	; 0x0e
     ff8:	37 87       	std	Z+15, r19	; 0x0f
     ffa:	22 e0       	ldi	r18, 0x02	; 2
     ffc:	20 8b       	std	Z+16, r18	; 0x10
     ffe:	11 8a       	std	Z+17, r1	; 0x11
    1000:	12 8a       	std	Z+18, r1	; 0x12
    1002:	ef ef       	ldi	r30, 0xFF	; 255
    1004:	f3 e4       	ldi	r31, 0x43	; 67
    1006:	12 82       	std	Z+2, r1	; 0x02
    1008:	13 82       	std	Z+3, r1	; 0x03
    100a:	84 83       	std	Z+4, r24	; 0x04
    100c:	95 83       	std	Z+5, r25	; 0x05
    100e:	a6 83       	std	Z+6, r26	; 0x06
    1010:	b7 83       	std	Z+7, r27	; 0x07
    1012:	29 e9       	ldi	r18, 0x99	; 153
    1014:	30 e4       	ldi	r19, 0x40	; 64
    1016:	20 83       	st	Z, r18
    1018:	31 83       	std	Z+1, r19	; 0x01
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	59 e0       	ldi	r21, 0x09	; 9
    101e:	44 87       	std	Z+12, r20	; 0x0c
    1020:	55 87       	std	Z+13, r21	; 0x0d
    1022:	ed e5       	ldi	r30, 0x5D	; 93
    1024:	f2 e4       	ldi	r31, 0x42	; 66
    1026:	12 82       	std	Z+2, r1	; 0x02
    1028:	13 82       	std	Z+3, r1	; 0x03
    102a:	84 83       	std	Z+4, r24	; 0x04
    102c:	95 83       	std	Z+5, r25	; 0x05
    102e:	a6 83       	std	Z+6, r26	; 0x06
    1030:	b7 83       	std	Z+7, r27	; 0x07
    1032:	20 83       	st	Z, r18
    1034:	31 83       	std	Z+1, r19	; 0x01
    1036:	80 e2       	ldi	r24, 0x20	; 32
    1038:	99 e0       	ldi	r25, 0x09	; 9
    103a:	84 87       	std	Z+12, r24	; 0x0c
    103c:	95 87       	std	Z+13, r25	; 0x0d
    103e:	08 95       	ret

00001040 <main>:
main():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	2a 97       	sbiw	r28, 0x0a	; 10
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	de bf       	out	0x3e, r29	; 62
init_clock():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1330
    #elif (F_CPU == 14000000)
      _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB,  (CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm));
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x0A << 2));
      #warning "14 MHz, currently selected for F_CPU, is not supported by this core and has not been tested. Expect timekeeping problems."
    #elif (F_CPU == 10000000) /* 10 MHz = 20 MHz prescaled by 2 */
      _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB,  (CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm));
    104e:	88 ed       	ldi	r24, 0xD8	; 216
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	84 bf       	out	0x34, r24	; 52
    1054:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1331
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x08 << 2));
    1058:	90 e2       	ldi	r25, 0x20	; 32
    105a:	84 bf       	out	0x34, r24	; 52
    105c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
init_TCA0():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1565
}

void __attribute__((weak)) init_TCA0() {
  /* TCA0_PINS from pins_arduino.h */
  /* Enable Split Mode to get more PWM pins, since analogWrite() only provides 8-bit PWM anyway*/
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    1060:	20 93 03 0a 	sts	0x0A03, r18	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7e0a03>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1570

  // Only 1 WGM is available in split mode

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
    1064:	8e ef       	ldi	r24, 0xFE	; 254
    1066:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1571
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
    106a:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1602
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) // use 64 divider unless it's 5 MHz or under
    #if defined(MILLIS_USE_TIMERA0) && (TIME_TRACKING_TIMER_DIVIDER != 64)
      #error "wiring.c and timers.h want to set millis timer TCA0 to different divider"
    #endif
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    106e:	9b e0       	ldi	r25, 0x0B	; 11
    1070:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7e0a00>
init_timers():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1551
uint8_t PeripheralControl = 0xFF;

void init_timers() {
  init_TCA0();
  #if (defined(TCA1))
    PORTMUX.TCAROUTEA = TCA0_PINS | TCA1_PINS;
    1074:	32 e0       	ldi	r19, 0x02	; 2
    1076:	30 93 e6 05 	sts	0x05E6, r19	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
init_TCA1():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1620

#if defined(TCA1)
void __attribute__((weak)) init_TCA1() {

  /* Enable Split Mode */
  TCA1.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    107a:	20 93 43 0a 	sts	0x0A43, r18	; 0x800a43 <__TEXT_REGION_LENGTH__+0x7e0a43>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1623

  /* Period setting, 8-bit register in SPLIT mode */
  TCA1.SPLIT.LPER    = PWM_TIMER_PERIOD;
    107e:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <__TEXT_REGION_LENGTH__+0x7e0a66>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1624
  TCA1.SPLIT.HPER    = PWM_TIMER_PERIOD;
    1082:	80 93 67 0a 	sts	0x0A67, r24	; 0x800a67 <__TEXT_REGION_LENGTH__+0x7e0a67>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1635
    TCA1.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) // use 64 divider unless it's 5 MHz or under
    #if defined(MILLIS_USE_TIMERA1) && (TIME_TRACKING_TIMER_DIVIDER != 64)
      #error "wiring.c and timers.h want to set millis timer TCA1 to different divider"
    #endif
    TCA1.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    1086:	90 93 40 0a 	sts	0x0A40, r25	; 0x800a40 <__TEXT_REGION_LENGTH__+0x7e0a40>
init_TCBs():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1657
 * Set up routing (defined in pins_arduino.h)
 * Notice how there's no semicolon until after the preprocessor conditionals.
 * In other words, that's all one line.
 */

  PORTMUX.TCBROUTEA = 0
    108a:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7e05e7>
main():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1676
                        | TCB4_PINS
  #endif
        ;
  // Start with TCB0 - we take advantage of the fact that we can get a pointer
  // to TCB09's struct, and increment it to go through all of them.
  TCB_t *timer_B = (TCB_t *)&TCB0;
    108e:	e0 e0       	ldi	r30, 0x00	; 0
    1090:	fb e0       	ldi	r31, 0x0B	; 11
init_TCBs():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1696
  #endif

  // Timer B Setup loop for TCB[0:end]
  do {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    1092:	27 e0       	ldi	r18, 0x07	; 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1705
    // default duty 50% - we have to set something here because of the
    // errata, otherwise CCMP will not get the CCMPL either.
    timer_B->CCMPH = PWM_TIMER_COMPARE;

    // Use TCA clock (250kHz, +/- 50%) and enable
    timer_B->CTRLA = (TCB_CLKSEL_TCA0_gc) | (TCB_ENABLE_bm);
    1094:	95 e0       	ldi	r25, 0x05	; 5
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1696
  #endif

  // Timer B Setup loop for TCB[0:end]
  do {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    1096:	21 83       	std	Z+1, r18	; 0x01
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1699

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD; // TOP = 254 see section at start
    1098:	84 87       	std	Z+12, r24	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1702
    // default duty 50% - we have to set something here because of the
    // errata, otherwise CCMP will not get the CCMPL either.
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    109a:	15 86       	std	Z+13, r1	; 0x0d
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1705

    // Use TCA clock (250kHz, +/- 50%) and enable
    timer_B->CTRLA = (TCB_CLKSEL_TCA0_gc) | (TCB_ENABLE_bm);
    109c:	90 83       	st	Z, r25
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1708

    // Increment pointer to next TCB instance
    timer_B++;
    109e:	70 96       	adiw	r30, 0x10	; 16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1711

    // Stop when pointing to the last timer.
  } while (timer_B <= timer_B_end);
    10a0:	e0 34       	cpi	r30, 0x40	; 64
    10a2:	0b e0       	ldi	r16, 0x0B	; 11
    10a4:	f0 07       	cpc	r31, r16
    10a6:	b9 f7       	brne	.-18     	; 0x1096 <main+0x56>
init_TCD0():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1749
 * be set in the status register. We skip checking this here because, as we do many places the  *
 * initiialization functions assume that the chip starts from a reset condition.                */

void __attribute__((weak)) init_TCD0() {
  #if defined(USE_TIMERD0_PWM) || defined (MILLIS_USE_TIMERD0)
    TCD0.CMPACLR  = 0x0FFF;
    10a8:	2f ef       	ldi	r18, 0xFF	; 255
    10aa:	3f e0       	ldi	r19, 0x0F	; 15
    10ac:	20 93 aa 0b 	sts	0x0BAA, r18	; 0x800baa <__TEXT_REGION_LENGTH__+0x7e0baa>
    10b0:	30 93 ab 0b 	sts	0x0BAB, r19	; 0x800bab <__TEXT_REGION_LENGTH__+0x7e0bab>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1753
    // Match with CMPBCLR clears all outputs. For normal PWM this just needs to be higher than
    // it will count to - so set to maximum (other settings used for non-overlapping PWM and
    // other advanced functionality)
    TCD0.CTRLC    = 0x80;                   // WOD outputs PWM B, WOC outputs PWM A
    10b4:	80 e8       	ldi	r24, 0x80	; 128
    10b6:	80 93 82 0b 	sts	0x0B82, r24	; 0x800b82 <__TEXT_REGION_LENGTH__+0x7e0b82>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1755
    // That doesn't need to be that way, but I declare that that's all we support through analogWrite()
    TCD0.CTRLB    = TIMERD0_WGMODE_SETTING;
    10ba:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <__TEXT_REGION_LENGTH__+0x7e0b81>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1758
    // One ramp or dual slope are the only options that are viable to reproduce classic behavior without
    // considerable calculation overhead. We use one-ramp mode
    TCD0.CMPBCLR  = TIMERD0_TOP_SETTING;
    10be:	2d ef       	ldi	r18, 0xFD	; 253
    10c0:	31 e0       	ldi	r19, 0x01	; 1
    10c2:	20 93 ae 0b 	sts	0x0BAE, r18	; 0x800bae <__TEXT_REGION_LENGTH__+0x7e0bae>
    10c6:	30 93 af 0b 	sts	0x0BAF, r19	; 0x800baf <__TEXT_REGION_LENGTH__+0x7e0baf>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1767
    #if defined(TIMERD0_SET_CLOCK)
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (TIMERD0_SET_CLOCK));
    #endif


    TCD0.CTRLA    = TIMERD0_CLOCK_SETTING | TCD_ENABLE_bm;
    10ca:	81 e1       	ldi	r24, 0x11	; 17
    10cc:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
init_ADC0():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1203
    #elif F_CPU >= 20000000
      ADC0.CTRLC = ADC_PRESC_DIV16_gc; // 1.25 @ 20 MHz
    #elif F_CPU >  12000000
      ADC0.CTRLC = ADC_PRESC_DIV12_gc; // 1 @ 12, 1.333 @ 16 MHz
    #elif F_CPU >= 8000000
      ADC0.CTRLC = ADC_PRESC_DIV8_gc;  // 1-1.499 between 8 and 11.99 MHz
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1209
    #elif F_CPU >= 4000000
      ADC0.CTRLC = ADC_PRESC_DIV4_gc;  // 1 MHz
    #else  // 1 MHz / 2 = 500 kHz - the lowest setting
      ADC0.CTRLC = ADC_PRESC_DIV2_gc;
    #endif
    ADC0.SAMPCTRL = 14; // 16 ADC clock sampling time - should be about the same amount of *time* as originally?
    10d6:	2e e0       	ldi	r18, 0x0E	; 14
    10d8:	20 93 05 06 	sts	0x0605, r18	; 0x800605 <__TEXT_REGION_LENGTH__+0x7e0605>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1211
    // This is WAY conservative! We could drop it down...
    ADC0.CTRLD = ADC_INITDLY_DLY64_gc; // VREF can take 50uS to become ready, and we're running the ADC clock
    10dc:	20 e6       	ldi	r18, 0x60	; 96
    10de:	20 93 03 06 	sts	0x0603, r18	; 0x800603 <__TEXT_REGION_LENGTH__+0x7e0603>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1214
    // at around 1 MHz, so we want 64 ADC clocks when we start up a new reference so we don't get bad readings at first
    /* Enable ADC */
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_10BIT_gc;
    10e2:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__TEXT_REGION_LENGTH__+0x7e0600>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1219
    // start at 10 bit for compatibuility with existing code.

    #if (defined(__AVR_DA__) && (!defined(NO_ADC_WORKAROUND)))
      // That may become defined when DA-series silicon is available with the fix
      ADC0.MUXPOS = 0x40;
    10e6:	90 e4       	ldi	r25, 0x40	; 64
    10e8:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1220
      ADC0.COMMAND = 0x01;
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1221
      ADC0.COMMAND = 0x02;
    10f2:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
analogReference():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_analog.c:124


void analogReference(uint8_t mode) {
  check_valid_analog_ref(mode);
  if (mode < 7 && mode !=4) {
    VREF.ADC0REF = (VREF.ADC0REF & ~(VREF_REFSEL_gm))|(mode);
    10f6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    10fa:	88 7f       	andi	r24, 0xF8	; 248
    10fc:	85 60       	ori	r24, 0x05	; 5
    10fe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
DACReference():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_analog.c:131
}

void DACReference(uint8_t mode) {
  check_valid_analog_ref(mode);
  if (mode < 7 && mode !=4) {
    VREF.DAC0REF = (VREF.DAC0REF & ~(VREF_REFSEL_gm))|(mode);
    1102:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    1106:	88 7f       	andi	r24, 0xF8	; 248
    1108:	85 60       	ori	r24, 0x05	; 5
    110a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
init_millis():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1134
      // RTC.CLKSEL = 0; this is the power on value
    #endif
      RTC.INTCTRL = 0x01; // enable overflow interrupt
      RTC.CTRLA = (RTC_RUNSTDBY_bm|RTC_RTCEN_bm|RTC_PRESCALER_DIV32_gc);//fire it up, prescale by 32.
    #else // It's a type b timer
      _timer->CCMP = TIME_TRACKING_TIMER_PERIOD;
    110e:	27 e8       	ldi	r18, 0x87	; 135
    1110:	33 e1       	ldi	r19, 0x13	; 19
    1112:	20 93 2c 0b 	sts	0x0B2C, r18	; 0x800b2c <__TEXT_REGION_LENGTH__+0x7e0b2c>
    1116:	30 93 2d 0b 	sts	0x0B2D, r19	; 0x800b2d <__TEXT_REGION_LENGTH__+0x7e0b2d>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1136
      // Enable timer interrupt, but clear the rest of register
      _timer->INTCTRL = TCB_CAPT_bm;
    111a:	90 93 25 0b 	sts	0x0B25, r25	; 0x800b25 <__TEXT_REGION_LENGTH__+0x7e0b25>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1138
      // Clear timer mode (since it will have been set as PWM by init())
      _timer->CTRLB = 0;
    111e:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <__TEXT_REGION_LENGTH__+0x7e0b21>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1140
      // CLK_PER/1 is 0b00, . CLK_PER/2 is 0b01, so bitwise OR of valid divider with enable works
      _timer->CTRLA = TIME_TRACKING_TIMER_DIVIDER|TCB_ENABLE_bm;  // Keep this last before enabling interrupts to ensure tracking as accurate as possible
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x7e0b20>
main():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
    1128:	78 94       	sei
setup():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:322
  }
  printflag=1;
}

void setup() {
  memset(reg.r, 0, sizeof(ewdt_regs_t));
    112a:	89 e3       	ldi	r24, 0x39	; 57
    112c:	ef e7       	ldi	r30, 0x7F	; 127
    112e:	f1 e4       	ldi	r31, 0x41	; 65
    1130:	df 01       	movw	r26, r30
    1132:	08 2f       	mov	r16, r24
    1134:	1d 92       	st	X+, r1
    1136:	0a 95       	dec	r16
    1138:	e9 f7       	brne	.-6      	; 0x1134 <main+0xf4>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:323
  memset(bak.r, 0, sizeof(ewdt_regs_t));
    113a:	e6 e4       	ldi	r30, 0x46	; 70
    113c:	f1 e4       	ldi	r31, 0x41	; 65
    113e:	df 01       	movw	r26, r30
    1140:	1d 92       	st	X+, r1
    1142:	8a 95       	dec	r24
    1144:	e9 f7       	brne	.-6      	; 0x1140 <main+0x100>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:324
  TCB2.CTRLA |= 1 << TCB_RUNSTDBY_bp;
    1146:	80 91 20 0b 	lds	r24, 0x0B20	; 0x800b20 <__TEXT_REGION_LENGTH__+0x7e0b20>
    114a:	80 64       	ori	r24, 0x40	; 64
    114c:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x7e0b20>
enableDualMode():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:634
 *
 *@return     void
 */
void TwoWire::enableDualMode(bool fmp_enable) {
  #if defined(TWI_DUALCTRL)
    vars._module->DUALCTRL = ((fmp_enable << TWI_FMPEN_bp) | TWI_ENABLE_bm);
    1150:	e0 91 0b 44 	lds	r30, 0x440B	; 0x80440b <Wire+0xc>
    1154:	f0 91 0c 44 	lds	r31, 0x440C	; 0x80440c <Wire+0xd>
    1158:	91 83       	std	Z+1, r25	; 0x01
setup():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:327
  Wire.enableDualMode(false);
  //Wire.swap(2);
  Serial.begin(115200);
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	52 ec       	ldi	r21, 0xC2	; 194
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	86 ec       	ldi	r24, 0xC6	; 198
    1164:	91 e4       	ldi	r25, 0x41	; 65
    1166:	10 dd       	rcall	.-1504   	; 0xb88 <UartClass::begin(unsigned long)>
TWI_MasterInit():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:50
 *
 *@return     void
 */
void TWI_MasterInit(struct twiData *_data) {
  #if defined(TWI_MANDS)                            // Check if the user wants to use Master AND Slave
    if (_data->_bools._hostEnabled == 1) {          // Slave is allowed to be enabled, don't re-enable the host though
    1168:	80 91 0d 44 	lds	r24, 0x440D	; 0x80440d <Wire+0xe>
    116c:	85 fd       	sbrc	r24, 5
    116e:	27 c0       	rjmp	.+78     	; 0x11be <main+0x17e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:61
    }
  #endif


  #if defined(TWI1)                                 // More then one TWI used
    if        (&TWI0 == _data->_module) {           // check which one this function is working with
    1170:	80 91 0b 44 	lds	r24, 0x440B	; 0x80440b <Wire+0xc>
    1174:	90 91 0c 44 	lds	r25, 0x440C	; 0x80440c <Wire+0xd>
    1178:	81 15       	cp	r24, r1
    117a:	b9 e0       	ldi	r27, 0x09	; 9
    117c:	9b 07       	cpc	r25, r27
    117e:	09 f0       	breq	.+2      	; 0x1182 <main+0x142>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:62
      TWI0_ClearPins();
    1180:	91 c1       	rjmp	.+802    	; 0x14a4 <main+0x464>
    1182:	76 db       	rcall	.-2324   	; 0x870 <TWI0_ClearPins>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:70
    }
  #else                                             // Only one TWI is used
    TWI0_ClearPins();                               // Only one option is possible
  #endif

  _data->_bools._hostEnabled    = 1;
    1184:	80 91 0d 44 	lds	r24, 0x440D	; 0x80440d <Wire+0xe>
    1188:	80 62       	ori	r24, 0x20	; 32
    118a:	80 93 0d 44 	sts	0x440D, r24	; 0x80440d <Wire+0xe>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:71
  _data->_module->MCTRLA        = TWI_ENABLE_bm;  // Master Interrupt flags stay disabled
    118e:	e0 91 0b 44 	lds	r30, 0x440B	; 0x80440b <Wire+0xc>
    1192:	f0 91 0c 44 	lds	r31, 0x440C	; 0x80440c <Wire+0xd>
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	83 83       	std	Z+3, r24	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:72
  _data->_module->MSTATUS       = TWI_BUSSTATE_IDLE_gc;
    119a:	85 83       	std	Z+5, r24	; 0x05
TWI_MasterSetBaud():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:218
  } else {
    if (frequency < 1000) {
      return 1;
    }
  }
  if (_data->_bools._hostEnabled == 1) {                  // Do something only if the host is enabled.
    119c:	90 91 0d 44 	lds	r25, 0x440D	; 0x80440d <Wire+0xe>
    11a0:	95 ff       	sbrs	r25, 5
    11a2:	0d c0       	rjmp	.+26     	; 0x11be <main+0x17e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:220
    uint8_t newBaud = TWI_MasterCalcBaud(frequency);      // get the new Baud value
    uint8_t oldBaud = _data->_module->MBAUD;              // load the old Baud value
    11a4:	96 81       	ldd	r25, Z+6	; 0x06
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:221
    if (newBaud != oldBaud) {                             // compare both, in case the code is issuing this before every transmission.
    11a6:	9a 32       	cpi	r25, 0x2A	; 42
    11a8:	51 f0       	breq	.+20     	; 0x11be <main+0x17e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:222
      uint8_t restore = _data->_module->MCTRLA;           // Save the old Master state
    11aa:	23 81       	ldd	r18, Z+3	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:223
      _data->_module->MCTRLA    = 0;                      // Disable Master
    11ac:	13 82       	std	Z+3, r1	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:224
      _data->_module->MBAUD     = newBaud;                // update Baud register
    11ae:	9a e2       	ldi	r25, 0x2A	; 42
    11b0:	96 83       	std	Z+6, r25	; 0x06
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:228
      if (frequency > 400000) {
        _data->_module->CTRLA  |=  TWI_FMPEN_bm;          // Enable FastMode+
      } else {
        _data->_module->CTRLA  &= ~TWI_FMPEN_bm;          // Disable FastMode+
    11b2:	90 81       	ld	r25, Z
    11b4:	9d 7f       	andi	r25, 0xFD	; 253
    11b6:	90 83       	st	Z, r25
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:230
      }
      _data->_module->MCTRLA    = restore;                // restore the old register, thus enabling it again
    11b8:	23 83       	std	Z+3, r18	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:231
      if (restore & TWI_ENABLE_bm) {                      // If the TWI was enabled,
    11ba:	20 fd       	sbrc	r18, 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:232
        _data->_module->MSTATUS   = TWI_BUSSTATE_IDLE_gc;   // Force the state machine into IDLE according to the data sheet
    11bc:	85 83       	std	Z+5, r24	; 0x05
setup():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:329
  Wire.begin();
  Serial.println("boot");
    11be:	8a ea       	ldi	r24, 0xAA	; 170
    11c0:	90 e4       	ldi	r25, 0x40	; 64
    11c2:	e2 dd       	rcall	.-1084   	; 0xd88 <Print::println(char const*) [clone .constprop.23]>
ina_reset():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:114
#define P_LED PIN_PD4

// reset the ina3221
void ina_reset() {
  conf_reg_t conf;
  ina_rr(INA3221_REG_CONF, (uint16_t *)&conf);
    11c4:	ce 01       	movw	r24, r28
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	fe dc       	rcall	.-1540   	; 0xbc6 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]>
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:115
  conf.reset = 1;
    11cc:	80 68       	ori	r24, 0x80	; 128
    11ce:	8a 83       	std	Y+2, r24	; 0x02
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:116
  ina_wr(INA3221_REG_CONF, (uint16_t *)&conf);
    11d0:	ce 01       	movw	r24, r28
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	e2 dc       	rcall	.-1596   	; 0xb9a <ina_wr(ina3221_reg_t, unsigned int*) [clone .constprop.49]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:117
  delay(100);
    11d6:	64 e6       	ldi	r22, 0x64	; 100
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	da d8       	rcall	.-3660   	; 0x394 <delay>
ina_config():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:123
}

// configure the ina3221 for ~410ms samples
void ina_config() {
  conf_reg_t conf_reg;
  ina_rr(INA3221_REG_CONF, (uint16_t *)&conf_reg);
    11e0:	ce 01       	movw	r24, r28
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	f0 dc       	rcall	.-1568   	; 0xbc6 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.46]>
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:124
  conf_reg.ch1_en = 1;
    11e8:	80 78       	andi	r24, 0x80	; 128
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:127
  conf_reg.ch2_en = 1;
  conf_reg.ch3_en = 1;
  conf_reg.avg_mode = INA3221_REG_CONF_AVG_16; // was 64
    11ea:	99 81       	ldd	r25, Y+1	; 0x01
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:128
  conf_reg.bus_conv_time = INA3221_REG_CONF_CT_588US;
    11ec:	84 67       	ori	r24, 0x74	; 116
    11ee:	8a 83       	std	Y+2, r24	; 0x02
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:129
  conf_reg.shunt_conv_time = INA3221_REG_CONF_CT_8244US;
    11f0:	98 6f       	ori	r25, 0xF8	; 248
    11f2:	99 83       	std	Y+1, r25	; 0x01
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:130
  ina_wr(INA3221_REG_CONF, (uint16_t *)&conf_reg);
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	d0 dc       	rcall	.-1632   	; 0xb9a <ina_wr(ina3221_reg_t, unsigned int*) [clone .constprop.49]>
_pinMode():
    11fa:	80 e1       	ldi	r24, 0x10	; 16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:229
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
    11fc:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7e0461>
digitalWriteFast():
    1200:	6c 9a       	sbi	0x0d, 4	; 13
millis():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:448
  if (val == LOW)
    vport->OUT &= ~mask;
  else if (val == CHANGE)
    vport->IN |= mask;
  else // HIGH
    vport->OUT |= mask;
    1202:	8f b7       	in	r24, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:181
  unsigned long millis()
  {
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    1204:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:182
    cli();
    1206:	c0 90 c2 41 	lds	r12, 0x41C2	; 0x8041c2 <timer_millis>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:194
      m = (m << 16);
      m += RTC.CNT;
      // now correct for there being 1000ms to the second instead of 1024
      m = m - (m >> 5) - (m >> 6);
    #else
      m = timer_millis;
    120a:	d0 90 c3 41 	lds	r13, 0x41C3	; 0x8041c3 <timer_millis+0x1>
    120e:	e0 90 c4 41 	lds	r14, 0x41C4	; 0x8041c4 <timer_millis+0x2>
    1212:	f0 90 c5 41 	lds	r15, 0x41C5	; 0x8041c5 <timer_millis+0x3>
    1216:	8f bf       	out	0x3f, r24	; 63
RTC_init():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:195
      SREG = oldSREG;
    1218:	88 ed       	ldi	r24, 0xD8	; 216
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:208
  _PROTECTED_WRITE(CLKCTRL.XOSC32KCTRLA,
                   CLKCTRL_CSUT_1K_gc            /* 64k cycles */
                       | 1 << CLKCTRL_ENABLE_bp   /* Enable: enabled */
                       | 1 << CLKCTRL_RUNSTDBY_bp /* Run standby: enabled */
                       | 0 << CLKCTRL_SEL_bp      /* Select: disabled */
                       | 1 << CLKCTRL_LPMODE_bp /* Low-Power Mode: disabled */);
    121a:	23 e8       	ldi	r18, 0x83	; 131
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	84 bf       	out	0x34, r24	; 52
    1220:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1224:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:211

  // wait for the crystal to start
  while (0 == (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm)) {
    1228:	83 fd       	sbrc	r24, 3
    122a:	42 c1       	rjmp	.+644    	; 0x14b0 <main+0x470>
millis():
    122c:	2f b7       	in	r18, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:181
  unsigned long millis()
  {
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    122e:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:182
    cli();
    1230:	80 91 c2 41 	lds	r24, 0x41C2	; 0x8041c2 <timer_millis>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:194
      m = (m << 16);
      m += RTC.CNT;
      // now correct for there being 1000ms to the second instead of 1024
      m = m - (m >> 5) - (m >> 6);
    #else
      m = timer_millis;
    1234:	90 91 c3 41 	lds	r25, 0x41C3	; 0x8041c3 <timer_millis+0x1>
    1238:	a0 91 c4 41 	lds	r26, 0x41C4	; 0x8041c4 <timer_millis+0x2>
    123c:	b0 91 c5 41 	lds	r27, 0x41C5	; 0x8041c5 <timer_millis+0x3>
    1240:	2f bf       	out	0x3f, r18	; 63
RTC_init():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:195
      SREG = oldSREG;
    1242:	8c 19       	sub	r24, r12
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:212
    if ((millis() - ims) > 2000) { // taking too long, make noise
    1244:	9d 09       	sbc	r25, r13
    1246:	ae 09       	sbc	r26, r14
    1248:	bf 09       	sbc	r27, r15
    124a:	81 3d       	cpi	r24, 0xD1	; 209
    124c:	97 40       	sbci	r25, 0x07	; 7
    124e:	a1 05       	cpc	r26, r1
    1250:	b1 05       	cpc	r27, r1
    1252:	40 f1       	brcs	.+80     	; 0x12a4 <main+0x264>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:213
      Serial.println(F("Waiting for XOSC32K to start..."));
    1254:	82 e9       	ldi	r24, 0x92	; 146
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	27 dd       	rcall	.-1458   	; 0xca8 <Print::println(__FlashStringHelper const*) [clone .constprop.42]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:214
      delay(1000);
    125a:	68 ee       	ldi	r22, 0xE8	; 232
    125c:	73 e0       	ldi	r23, 0x03	; 3
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	98 d8       	rcall	.-3792   	; 0x394 <delay>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:215
      Serial.print(F("XOSC32KCTRLA: "));
    1264:	83 e8       	ldi	r24, 0x83	; 131
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	c2 da       	rcall	.-2684   	; 0x7ee <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:216
      Serial.println(CLKCTRL.XOSC32KCTRLA, 2);
    126a:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
print():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:73
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	80 e0       	ldi	r24, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1274:	42 e0       	ldi	r20, 0x02	; 2
    1276:	22 dd       	rcall	.-1468   	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
println():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    1278:	14 dd       	rcall	.-1496   	; 0xca2 <Print::println() [clone .constprop.44]>
RTC_init():
    127a:	86 e7       	ldi	r24, 0x76	; 118
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:217
      Serial.print(F("MCLKSTATUS: "));
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	b7 da       	rcall	.-2706   	; 0x7ee <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
    1280:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
print():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:218
      Serial.println(CLKCTRL.MCLKSTATUS, 2);
    1284:	70 e0       	ldi	r23, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:73
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    1286:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	42 e0       	ldi	r20, 0x02	; 2
    128c:	17 dd       	rcall	.-1490   	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
println():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    128e:	09 dd       	rcall	.-1518   	; 0xca2 <Print::println() [clone .constprop.44]>
RTC_init():
    1290:	80 e6       	ldi	r24, 0x60	; 96
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:219
      Serial.print(F("CLKCTRL_XOSC32KS_bm: "));
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	ac da       	rcall	.-2728   	; 0x7ee <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
print():
    1296:	42 e0       	ldi	r20, 0x02	; 2
    1298:	68 e0       	ldi	r22, 0x08	; 8
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:98
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0d dd       	rcall	.-1510   	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
println():
    12a2:	ff dc       	rcall	.-1538   	; 0xca2 <Print::println() [clone .constprop.44]>
millis():
    12a4:	2f b7       	in	r18, 0x3f	; 63
    12a6:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:161
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    12a8:	80 91 c2 41 	lds	r24, 0x41C2	; 0x8041c2 <timer_millis>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:181
  unsigned long millis()
  {
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    12ac:	90 91 c3 41 	lds	r25, 0x41C3	; 0x8041c3 <timer_millis+0x1>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:194
      m = (m << 16);
      m += RTC.CNT;
      // now correct for there being 1000ms to the second instead of 1024
      m = m - (m >> 5) - (m >> 6);
    #else
      m = timer_millis;
    12b0:	a0 91 c4 41 	lds	r26, 0x41C4	; 0x8041c4 <timer_millis+0x2>
    12b4:	b0 91 c5 41 	lds	r27, 0x41C5	; 0x8041c5 <timer_millis+0x3>
    12b8:	2f bf       	out	0x3f, r18	; 63
RTC_init():
    12ba:	8c 19       	sub	r24, r12
    12bc:	9d 09       	sbc	r25, r13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:195
      SREG = oldSREG;
    12be:	ae 09       	sbc	r26, r14
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:222
      Serial.println(CLKCTRL_XOSC32KS_bm, 2);
    }
    if ((millis() - ims) > 4000) { // give up and use OSCULP32K instead
    12c0:	bf 09       	sbc	r27, r15
    12c2:	81 3a       	cpi	r24, 0xA1	; 161
    12c4:	9f 40       	sbci	r25, 0x0F	; 15
    12c6:	a1 05       	cpc	r26, r1
    12c8:	b1 05       	cpc	r27, r1
    12ca:	08 f4       	brcc	.+2      	; 0x12ce <main+0x28e>
    12cc:	ab cf       	rjmp	.-170    	; 0x1224 <main+0x1e4>
    12ce:	89 e4       	ldi	r24, 0x49	; 73
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	ea dc       	rcall	.-1580   	; 0xca8 <Print::println(__FlashStringHelper const*) [clone .constprop.42]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:223
      Serial.println(F("XOSC32K startup FAILED"));
    12d4:	80 91 b3 41 	lds	r24, 0x41B3	; 0x8041b3 <reg+0x34>
    12d8:	81 60       	ori	r24, 0x01	; 1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:224
      reg.d.err |= ERR_CRYSTAL;
    12da:	80 93 b3 41 	sts	0x41B3, r24	; 0x8041b3 <reg+0x34>
    12de:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    12e2:	81 11       	cpse	r24, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:225
      while (RTC.STATUS > 0) {
    12e4:	fc cf       	rjmp	.-8      	; 0x12de <main+0x29e>
    12e6:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x7e0147>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:228
        ; /* Wait for all registers to be synchronized */
      }
      RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32.768kHz Internal Ultra-Low-Power
    12ec:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x7e0152>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:231
                                      Oscillator (OSCULP32K) */

      RTC.PITINTCTRL = RTC_PI_bm; /* PIT Interrupt: enabled */
    12f0:	81 e5       	ldi	r24, 0x51	; 81
    12f2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x7e0150>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:233

      RTC.PITCTRLA = RTC_PERIOD_CYC2048_gc /* RTC Clock Cycles 2048, resulting
    12f6:	89 e2       	ldi	r24, 0x29	; 41
    12f8:	91 e0       	ldi	r25, 0x01	; 1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:236
                                    in 32.768kHz/2048 = 16Hz */
                     | RTC_PITEN_bm;       /* Enable PIT counter: enabled */
      Serial.println(F("RTC initialized using OSCULP32K"));
    12fa:	d6 dc       	rcall	.-1620   	; 0xca8 <Print::println(__FlashStringHelper const*) [clone .constprop.42]>
setup():
    12fc:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x7e0050>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:252
  RTC.CLKSEL = CLKCTRL_CLKSEL_XOSC32K_gc; /* 32.768kHz crystal */
  RTC.PITINTCTRL = RTC_PI_bm;             /* PIT Interrupt: enabled */
  RTC.PITCTRLA = RTC_PERIOD_CYC2048_gc    /* RTC Clock Cycles 2048, resulting
                                   in 32.768kHz/2048 = 16Hz */
                 | RTC_PITEN_bm;          /* Enable PIT counter: enabled */
  Serial.println(F("RTC initialized using XOSC32K"));
    1300:	89 7f       	andi	r24, 0xF9	; 249
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:335
  ina_reset();
  ina_config();
  pinMode(P_LED, OUTPUT);
  digitalWriteFast(P_LED, 1);
  RTC_init();
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1302:	84 60       	ori	r24, 0x04	; 4
    1304:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7e0050>
    1308:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x7e0050>
    130c:	81 60       	ori	r24, 0x01	; 1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:336
  sleep_enable();
    130e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7e0050>
    1312:	8f ea       	ldi	r24, 0xAF	; 175
    1314:	90 e4       	ldi	r25, 0x40	; 64
    1316:	38 dd       	rcall	.-1424   	; 0xd88 <Print::println(char const*) [clone .constprop.23]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:341
#ifdef ENABLE_SCAN     // i2c scan
  byte error, address; // variable for error and I2C address
  int nDevices;

  Serial.println("Scanning...");
    1318:	c1 2c       	mov	r12, r1
    131a:	d1 2c       	mov	r13, r1
    131c:	76 01       	movw	r14, r12
    131e:	c3 94       	inc	r12
main():
    1320:	10 e0       	ldi	r17, 0x00	; 0
    1322:	00 e0       	ldi	r16, 0x00	; 0
beginTransmission():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:343

  nDevices = 0;
    1324:	8c 2d       	mov	r24, r12
    1326:	88 0f       	add	r24, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:294
  if (__builtin_constant_p(address) > 0x7F) {     // Compile-time check if address is actually 7 bit long
    badArg("Supplied address seems to be 8 bit. Only 7-bit-addresses are supported");
    return;
  }
  // set address of targeted client
  vars._clientAddress = address << 1;
    1328:	80 93 0f 44 	sts	0x440F, r24	; 0x80440f <Wire+0x10>
    132c:	10 92 10 44 	sts	0x4410, r1	; 0x804410 <Wire+0x11>
endTransmission():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:295
  (*txHead) = 0;  // fill buffer from 0
    1330:	0e 94 35 01 	call	0x26a	; 0x26a <TWI_MasterWrite.constprop.55>
setup():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:328
 *           20 for likely a slave holding the clock low
 *          255 (-1) for TWI not initialized (begin not called) or bus somehow in "unknown" state.
 */
uint8_t TwoWire::endTransmission(bool sendStop) {
  // transmit (blocking)
  return TWI_MasterWrite(&vars, sendStop);
    1334:	81 11       	cpse	r24, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:351
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    error = Wire.endTransmission();

    if (error == 0) {
    1336:	d4 c0       	rjmp	.+424    	; 0x14e0 <main+0x4a0>
    1338:	8b eb       	ldi	r24, 0xBB	; 187
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:352
      Serial.print("I2C device found at address 0x");
    133a:	90 e4       	ldi	r25, 0x40	; 64
    133c:	2f dd       	rcall	.-1442   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
    133e:	2f e0       	ldi	r18, 0x0F	; 15
    1340:	2c 15       	cp	r18, r12
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:353
      if (address < 16)
    1342:	18 f0       	brcs	.+6      	; 0x134a <main+0x30a>
    1344:	8a ed       	ldi	r24, 0xDA	; 218
    1346:	90 e4       	ldi	r25, 0x40	; 64
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:354
        Serial.print("0");
    1348:	29 dd       	rcall	.-1454   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
print():
    134a:	40 e1       	ldi	r20, 0x10	; 16
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1350:	b5 dc       	rcall	.-1686   	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
setup():
    1352:	8c ed       	ldi	r24, 0xDC	; 220
    1354:	90 e4       	ldi	r25, 0x40	; 64
    1356:	18 dd       	rcall	.-1488   	; 0xd88 <Print::println(char const*) [clone .constprop.23]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:356
      Serial.print(address, HEX);
      Serial.println("  !");
    1358:	0f 5f       	subi	r16, 0xFF	; 255
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	c8 1a       	sub	r12, r24
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:357
      nDevices++;
    1360:	d8 0a       	sbc	r13, r24
    1362:	e8 0a       	sbc	r14, r24
    1364:	f8 0a       	sbc	r15, r24
    1366:	9f e7       	ldi	r25, 0x7F	; 127
    1368:	c9 16       	cp	r12, r25
    136a:	d1 04       	cpc	r13, r1
    136c:	e1 04       	cpc	r14, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:344
  int nDevices;

  Serial.println("Scanning...");

  nDevices = 0;
  for (address = 1; address < 127; address++) {
    136e:	f1 04       	cpc	r15, r1
    1370:	c9 f6       	brne	.-78     	; 0x1324 <main+0x2e4>
    1372:	8c ef       	ldi	r24, 0xFC	; 252
    1374:	90 e4       	ldi	r25, 0x40	; 64
    1376:	01 2b       	or	r16, r17
    1378:	11 f0       	breq	.+4      	; 0x137e <main+0x33e>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:366
        Serial.print("0");
      Serial.println(address, HEX);
    }
  }
  if (nDevices == 0)
    Serial.println("No I2C devices found\n");
    137a:	82 e1       	ldi	r24, 0x12	; 18
    137c:	91 e4       	ldi	r25, 0x41	; 65
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:365
      if (address < 16)
        Serial.print("0");
      Serial.println(address, HEX);
    }
  }
  if (nDevices == 0)
    137e:	04 dd       	rcall	.-1528   	; 0xd88 <Print::println(char const*) [clone .constprop.23]>
main():
    1380:	ef e7       	ldi	r30, 0x7F	; 127
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:368
    Serial.println("No I2C devices found\n");
  else
    Serial.println("done\n");
    1382:	f1 e4       	ldi	r31, 0x41	; 65
    1384:	80 e0       	ldi	r24, 0x00	; 0
rd_ina3221():
    1386:	81 93       	st	Z+, r24
    1388:	8f 5f       	subi	r24, 0xFF	; 255
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:343
  byte error, address; // variable for error and I2C address
  int nDevices;

  Serial.println("Scanning...");

  nDevices = 0;
    138a:	89 33       	cpi	r24, 0x39	; 57
    138c:	e1 f7       	brne	.-8      	; 0x1386 <main+0x346>
    138e:	24 eb       	ldi	r18, 0xB4	; 180
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:193
    sei();
  }
  #else
   //test pattern data
   for(uint16_t i=0; i<sizeof(ewdt_regs_t); i++){
     reg.r[i]=i&0xFF;
    1390:	31 e4       	ldi	r19, 0x41	; 65
    1392:	af e7       	ldi	r26, 0x7F	; 127
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:192
    memcpy(reg.r, bak.r, sizeof(ewdt_regs_t));
    sei();
  }
  #else
   //test pattern data
   for(uint16_t i=0; i<sizeof(ewdt_regs_t); i++){
    1394:	b1 e4       	ldi	r27, 0x41	; 65
__base_ctor ():
    1396:	4f ef       	ldi	r20, 0xFF	; 255
    1398:	5f ef       	ldi	r21, 0xFF	; 255
    139a:	ba 01       	movw	r22, r20
update():
    139c:	8d 91       	ld	r24, X+
    139e:	e8 2f       	mov	r30, r24
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:29
    0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
    0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c
};


CRC32::CRC32()
    13a0:	e4 27       	eor	r30, r20
    13a2:	ef 70       	andi	r30, 0x0F	; 15
    13a4:	04 e0       	ldi	r16, 0x04	; 4
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:46
void CRC32::update(const uint8_t& data)
{
    // via http://forum.arduino.cc/index.php?topic=91179.0
    uint8_t tbl_idx = 0;

    tbl_idx = _state ^ (data >> (0 * 4));
    13a6:	e0 9f       	mul	r30, r16
    13a8:	f0 01       	movw	r30, r0
    13aa:	11 24       	eor	r1, r1
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:47
    _state = FLASH_READ_DWORD(crc32_table + (tbl_idx & 0x0f)) ^ (_state >> 4);
    13ac:	ee 54       	subi	r30, 0x4E	; 78
    13ae:	fe 4f       	sbci	r31, 0xFE	; 254
    13b0:	c5 90       	lpm	r12, Z+
    13b2:	d5 90       	lpm	r13, Z+
    13b4:	e5 90       	lpm	r14, Z+
    13b6:	f4 90       	lpm	r15, Z
    13b8:	e4 e0       	ldi	r30, 0x04	; 4
    13ba:	76 95       	lsr	r23
    13bc:	67 95       	ror	r22
    13be:	57 95       	ror	r21
    13c0:	47 95       	ror	r20
    13c2:	ea 95       	dec	r30
    13c4:	d1 f7       	brne	.-12     	; 0x13ba <main+0x37a>
    13c6:	4c 25       	eor	r20, r12
    13c8:	5d 25       	eor	r21, r13
    13ca:	6e 25       	eor	r22, r14
    13cc:	7f 25       	eor	r23, r15
    13ce:	e8 2f       	mov	r30, r24
    13d0:	e2 95       	swap	r30
    13d2:	ef 70       	andi	r30, 0x0F	; 15
    13d4:	e4 27       	eor	r30, r20
    13d6:	ef 70       	andi	r30, 0x0F	; 15
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:48
    tbl_idx = _state ^ (data >> (1 * 4));
    13d8:	14 e0       	ldi	r17, 0x04	; 4
    13da:	e1 9f       	mul	r30, r17
    13dc:	f0 01       	movw	r30, r0
    13de:	11 24       	eor	r1, r1
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:49
    _state = FLASH_READ_DWORD(crc32_table + (tbl_idx & 0x0f)) ^ (_state >> 4);
    13e0:	ee 54       	subi	r30, 0x4E	; 78
    13e2:	fe 4f       	sbci	r31, 0xFE	; 254
    13e4:	c5 90       	lpm	r12, Z+
    13e6:	d5 90       	lpm	r13, Z+
    13e8:	e5 90       	lpm	r14, Z+
    13ea:	f4 90       	lpm	r15, Z
    13ec:	f4 e0       	ldi	r31, 0x04	; 4
    13ee:	76 95       	lsr	r23
    13f0:	67 95       	ror	r22
    13f2:	57 95       	ror	r21
    13f4:	47 95       	ror	r20
    13f6:	fa 95       	dec	r31
    13f8:	d1 f7       	brne	.-12     	; 0x13ee <main+0x3ae>
    13fa:	4c 25       	eor	r20, r12
    13fc:	5d 25       	eor	r21, r13
    13fe:	6e 25       	eor	r22, r14
    1400:	7f 25       	eor	r23, r15
    1402:	2a 17       	cp	r18, r26
    1404:	3b 07       	cpc	r19, r27
    1406:	09 f0       	breq	.+2      	; 0x140a <main+0x3ca>
    1408:	c9 cf       	rjmp	.-110    	; 0x139c <main+0x35c>
finalize():
    140a:	40 95       	com	r20
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.h:48
    void update(const Type* data, size_t size)
    {
        size_t nBytes = size * sizeof(Type);
        const uint8_t* pData = (const uint8_t*)data;

        for (size_t i = 0; i < nBytes; i++)
    140c:	50 95       	com	r21
    140e:	60 95       	com	r22
    1410:	70 95       	com	r23
rd_ina3221():
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:55
}


uint32_t CRC32::finalize() const
{
    return ~_state;
    1412:	40 93 b4 41 	sts	0x41B4, r20	; 0x8041b4 <reg+0x35>
    1416:	50 93 b5 41 	sts	0x41B5, r21	; 0x8041b5 <reg+0x36>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:195
     reg.r[i]=i&0xFF;
   }
   reg.d.crc=CRC32::calculate(reg.r,sizeof(ewdt_regs_t)-4);
    141a:	60 93 b6 41 	sts	0x41B6, r22	; 0x8041b6 <reg+0x37>
    141e:	70 93 b7 41 	sts	0x41B7, r23	; 0x8041b7 <reg+0x38>
TWI_SlaveInit():
    1422:	80 91 0d 44 	lds	r24, 0x440D	; 0x80440d <Wire+0xe>
    1426:	86 fd       	sbrc	r24, 6
    1428:	18 c0       	rjmp	.+48     	; 0x145a <main+0x41a>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:93
 *
 *@return     void
 */
void TWI_SlaveInit(struct twiData *_data, uint8_t address, uint8_t receive_broadcast, uint8_t second_address) {
  #if defined(TWI_MANDS)                      // Check if the user wants to use Master AND Slave
    if (_data->_bools._clientEnabled  == 1) {  // Master is allowed to be enabled, don't re-enable the client though
    142a:	80 91 0b 44 	lds	r24, 0x440B	; 0x80440b <Wire+0xc>
    142e:	90 91 0c 44 	lds	r25, 0x440C	; 0x80440c <Wire+0xd>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:103
      return;                                     // return and do nothing
    }
  #endif

  #if defined(TWI1)
    if        (&TWI0 == _data->_module) {
    1432:	81 15       	cp	r24, r1
    1434:	29 e0       	ldi	r18, 0x09	; 9
    1436:	92 07       	cpc	r25, r18
    1438:	09 f0       	breq	.+2      	; 0x143c <main+0x3fc>
    143a:	64 c0       	rjmp	.+200    	; 0x1504 <main+0x4c4>
    143c:	19 da       	rcall	.-3022   	; 0x870 <TWI0_ClearPins>
    143e:	80 91 0d 44 	lds	r24, 0x440D	; 0x80440d <Wire+0xe>
    1442:	80 64       	ori	r24, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:104
      TWI0_ClearPins();
    1444:	80 93 0d 44 	sts	0x440D, r24	; 0x80440d <Wire+0xe>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:112
    }
  #else
    TWI0_ClearPins();
  #endif

  _data->_bools._clientEnabled = 1;
    1448:	e0 91 0b 44 	lds	r30, 0x440B	; 0x80440b <Wire+0xc>
    144c:	f0 91 0c 44 	lds	r31, 0x440C	; 0x80440c <Wire+0xd>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:113
  _data->_module->SADDR        = (address << 1) | receive_broadcast;
    1450:	84 e8       	ldi	r24, 0x84	; 132
    1452:	84 87       	std	Z+12, r24	; 0x0c
    1454:	16 86       	std	Z+14, r1	; 0x0e
    1456:	81 ee       	ldi	r24, 0xE1	; 225
    1458:	81 87       	std	Z+9, r24	; 0x09
onReceive():
    145a:	8d e5       	ldi	r24, 0x5D	; 93
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:114
  _data->_module->SADDRMASK    = second_address;
    145c:	95 e0       	ldi	r25, 0x05	; 5
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:115
  _data->_module->SCTRLA       = TWI_DIEN_bm | TWI_APIEN_bm | TWI_PIEN_bm  | TWI_ENABLE_bm;
    145e:	80 93 19 44 	sts	0x4419, r24	; 0x804419 <Wire+0x1a>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:729
 *@param      void (*function)(int) - a void returning function that accepts an int as parameter
 *
 *@return     void
 */
void TwoWire::onReceive(void (*function)(int)) {
  vars.user_onReceive = function;
    1462:	90 93 1a 44 	sts	0x441A, r25	; 0x80441a <Wire+0x1b>
onRequest():
    1466:	84 e9       	ldi	r24, 0x94	; 148
    1468:	95 e0       	ldi	r25, 0x05	; 5
    146a:	80 93 17 44 	sts	0x4417, r24	; 0x804417 <Wire+0x18>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:743
 *@param      void (*function)(void) - a void returning function that does not accept any parameters
 *
 *@return     void
 */
void TwoWire::onRequest(void (*function)(void)) {
  vars.user_onRequest = function;
    146e:	90 93 18 44 	sts	0x4418, r25	; 0x804418 <Wire+0x19>
loop():
    1472:	80 91 c1 41 	lds	r24, 0x41C1	; 0x8041c1 <printflag>
    1476:	88 23       	and	r24, r24
    1478:	29 f0       	breq	.+10     	; 0x1484 <main+0x444>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:380
  Wire.onRequest(requestHandler);
}

uint32_t ll = 0;
void loop() {
  if(printflag){
    147a:	88 e1       	ldi	r24, 0x18	; 24
    147c:	91 e4       	ldi	r25, 0x41	; 65
    147e:	8e dc       	rcall	.-1764   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:381
    Serial.print("+");
    1480:	10 92 c1 41 	sts	0x41C1, r1	; 0x8041c1 <printflag>
    1484:	80 91 c0 41 	lds	r24, 0x41C0	; 0x8041c0 <wake>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:382
    printflag=0;
    1488:	81 11       	cpse	r24, r1
    148a:	42 c0       	rjmp	.+132    	; 0x1510 <main+0x4d0>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:384
  }
  while (!wake && Wire.slaveTransactionOpen()) {
    148c:	0e 94 81 01 	call	0x302	; 0x302 <TwoWire::slaveTransactionOpen() [clone .constprop.6]>
    1490:	88 23       	and	r24, r24
    1492:	09 f4       	brne	.+2      	; 0x1496 <main+0x456>
    1494:	3d c0       	rjmp	.+122    	; 0x1510 <main+0x4d0>
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	80 e0       	ldi	r24, 0x00	; 0
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:385
    delay(1);
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 ca 01 	call	0x394	; 0x394 <delay>
    14a2:	f0 cf       	rjmp	.-32     	; 0x1484 <main+0x444>
TWI_MasterInit():
    14a4:	80 32       	cpi	r24, 0x20	; 32
    14a6:	99 40       	sbci	r25, 0x09	; 9
    14a8:	09 f0       	breq	.+2      	; 0x14ac <main+0x46c>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:63


  #if defined(TWI1)                                 // More then one TWI used
    if        (&TWI0 == _data->_module) {           // check which one this function is working with
      TWI0_ClearPins();
    } else if (&TWI1 == _data->_module) {
    14aa:	6c ce       	rjmp	.-808    	; 0x1184 <main+0x144>
    14ac:	d4 d9       	rcall	.-3160   	; 0x856 <TWI1_ClearPins>
    14ae:	6a ce       	rjmp	.-812    	; 0x1184 <main+0x144>
RTC_init():
    14b0:	80 91 b3 41 	lds	r24, 0x41B3	; 0x8041b3 <reg+0x34>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:64
      TWI1_ClearPins();
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:240
                     | RTC_PITEN_bm;       /* Enable PIT counter: enabled */
      Serial.println(F("RTC initialized using OSCULP32K"));
      return;
    }
  }
  reg.d.err &= ~ERR_CRYSTAL;
    14b6:	80 93 b3 41 	sts	0x41B3, r24	; 0x8041b3 <reg+0x34>
    14ba:	86 e0       	ldi	r24, 0x06	; 6
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	f4 db       	rcall	.-2072   	; 0xca8 <Print::println(__FlashStringHelper const*) [clone .constprop.42]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:241
  Serial.println(F("XOSC32K started. Initializing RTC."));
    14c0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    14c4:	81 11       	cpse	r24, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:244

  /* Initialize RTC: */
  while (RTC.STATUS > 0) {
    14c6:	fc cf       	rjmp	.-8      	; 0x14c0 <main+0x480>
    14c8:	82 e0       	ldi	r24, 0x02	; 2
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:247
    ; /* Wait for all registers to be synchronized */
  }
  RTC.CLKSEL = CLKCTRL_CLKSEL_XOSC32K_gc; /* 32.768kHz crystal */
    14ca:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__TEXT_REGION_LENGTH__+0x7e0147>
    14ce:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:248
  RTC.PITINTCTRL = RTC_PI_bm;             /* PIT Interrupt: enabled */
    14d0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x7e0152>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:249
  RTC.PITCTRLA = RTC_PERIOD_CYC2048_gc    /* RTC Clock Cycles 2048, resulting
    14d4:	81 e5       	ldi	r24, 0x51	; 81
    14d6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x7e0150>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:252
                                   in 32.768kHz/2048 = 16Hz */
                 | RTC_PITEN_bm;          /* Enable PIT counter: enabled */
  Serial.println(F("RTC initialized using XOSC32K"));
    14da:	88 ee       	ldi	r24, 0xE8	; 232
    14dc:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:358
      if (address < 16)
        Serial.print("0");
      Serial.print(address, HEX);
      Serial.println("  !");
      nDevices++;
    } else if (error == 4) {
    14de:	0d cf       	rjmp	.-486    	; 0x12fa <main+0x2ba>
setup():
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <main+0x4a6>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:359
      Serial.print("Unknown error at address 0x");
    14e4:	3b cf       	rjmp	.-394    	; 0x135c <main+0x31c>
    14e6:	80 ee       	ldi	r24, 0xE0	; 224
    14e8:	90 e4       	ldi	r25, 0x40	; 64
    14ea:	58 dc       	rcall	.-1872   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:360
      if (address < 16)
    14ec:	3f e0       	ldi	r19, 0x0F	; 15
    14ee:	3c 15       	cp	r19, r12
    14f0:	18 f0       	brcs	.+6      	; 0x14f8 <main+0x4b8>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:361
        Serial.print("0");
    14f2:	8a ed       	ldi	r24, 0xDA	; 218
    14f4:	90 e4       	ldi	r25, 0x40	; 64
    14f6:	52 dc       	rcall	.-1884   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
print():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
    14f8:	40 e1       	ldi	r20, 0x10	; 16
    14fa:	c7 01       	movw	r24, r14
    14fc:	b6 01       	movw	r22, r12
    14fe:	de db       	rcall	.-2116   	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
println():
    1500:	d0 db       	rcall	.-2144   	; 0xca2 <Print::println() [clone .constprop.44]>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    1502:	2c cf       	rjmp	.-424    	; 0x135c <main+0x31c>
TWI_SlaveInit():
    1504:	80 32       	cpi	r24, 0x20	; 32
    1506:	99 40       	sbci	r25, 0x09	; 9
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:105
  #endif

  #if defined(TWI1)
    if        (&TWI0 == _data->_module) {
      TWI0_ClearPins();
    } else if (&TWI1 == _data->_module) {
    1508:	09 f0       	breq	.+2      	; 0x150c <main+0x4cc>
    150a:	99 cf       	rjmp	.-206    	; 0x143e <main+0x3fe>
    150c:	a4 d9       	rcall	.-3256   	; 0x856 <TWI1_ClearPins>
    150e:	97 cf       	rjmp	.-210    	; 0x143e <main+0x3fe>
loop():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:106
      TWI1_ClearPins();
    1510:	80 91 c0 41 	lds	r24, 0x41C0	; 0x8041c0 <wake>
    1514:	81 11       	cpse	r24, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:387
    printflag=0;
  }
  while (!wake && Wire.slaveTransactionOpen()) {
    delay(1);
  }
  if(!wake){
    1516:	03 c0       	rjmp	.+6      	; 0x151e <main+0x4de>
    1518:	86 ec       	ldi	r24, 0xC6	; 198
    151a:	91 e4       	ldi	r25, 0x41	; 65
    151c:	86 d9       	rcall	.-3316   	; 0x82a <UartClass::flush()>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:388
    Serial.flush();    
    151e:	80 91 c0 41 	lds	r24, 0x41C0	; 0x8041c0 <wake>
    1522:	88 23       	and	r24, r24
    1524:	09 f4       	brne	.+2      	; 0x1528 <main+0x4e8>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:395
  //yes, real-world testing proves this level of paranoia is in fact necessary
  //this loop used to just sleep_cpu(). it would fail approximately 3 times per million
  //transactions when a transaction fired between the slaveTransactionOpen() calculated
  //its return value
  //and the sleep_cpu()
  while (!wake && !Wire.slaveTransactionOpen()) {
    1526:	f4 c0       	rjmp	.+488    	; 0x1710 <main+0x6d0>
    1528:	80 91 c1 41 	lds	r24, 0x41C1	; 0x8041c1 <printflag>
    152c:	88 23       	and	r24, r24
    152e:	29 f0       	breq	.+10     	; 0x153a <main+0x4fa>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:412
    else{
      sei();
    }
    //delay(1);
  }
  if(printflag){
    1530:	88 e1       	ldi	r24, 0x18	; 24
    1532:	91 e4       	ldi	r25, 0x41	; 65
    1534:	33 dc       	rcall	.-1946   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
    1536:	10 92 c1 41 	sts	0x41C1, r1	; 0x8041c1 <printflag>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:413
    Serial.print("+");
    153a:	10 92 c0 41 	sts	0x41C0, r1	; 0x8041c0 <wake>
    153e:	f8 94       	cli
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:414
    printflag=0;
    1540:	80 91 bc 41 	lds	r24, 0x41BC	; 0x8041bc <ticks>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:416
  }
  wake = 0;
    1544:	90 91 bd 41 	lds	r25, 0x41BD	; 0x8041bd <ticks+0x1>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:417
  cli();
    1548:	a0 91 be 41 	lds	r26, 0x41BE	; 0x8041be <ticks+0x2>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:418
  uint32_t loop_ticks = ticks;
    154c:	b0 91 bf 41 	lds	r27, 0x41BF	; 0x8041bf <ticks+0x3>
    1550:	78 94       	sei
    1552:	40 91 b8 41 	lds	r20, 0x41B8	; 0x8041b8 <ll>
    1556:	50 91 b9 41 	lds	r21, 0x41B9	; 0x8041b9 <ll+0x1>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:420
  sei();
  if (((loop_ticks - ll) >> 4) >= 5) {
    155a:	60 91 ba 41 	lds	r22, 0x41BA	; 0x8041ba <ll+0x2>
    155e:	70 91 bb 41 	lds	r23, 0x41BB	; 0x8041bb <ll+0x3>
    1562:	8c 01       	movw	r16, r24
    1564:	9d 01       	movw	r18, r26
    1566:	04 1b       	sub	r16, r20
    1568:	15 0b       	sbc	r17, r21
    156a:	26 0b       	sbc	r18, r22
    156c:	37 0b       	sbc	r19, r23
    156e:	b9 01       	movw	r22, r18
    1570:	a8 01       	movw	r20, r16
    1572:	40 35       	cpi	r20, 0x50	; 80
    1574:	51 05       	cpc	r21, r1
    1576:	61 05       	cpc	r22, r1
    1578:	71 05       	cpc	r23, r1
    157a:	08 f4       	brcc	.+2      	; 0x157e <main+0x53e>
    157c:	7a cf       	rjmp	.-268    	; 0x1472 <main+0x432>
    157e:	80 93 b8 41 	sts	0x41B8, r24	; 0x8041b8 <ll>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:421
    ll = loop_ticks;
    1582:	90 93 b9 41 	sts	0x41B9, r25	; 0x8041b9 <ll+0x1>
    1586:	a0 93 ba 41 	sts	0x41BA, r26	; 0x8041ba <ll+0x2>
    158a:	b0 93 bb 41 	sts	0x41BB, r27	; 0x8041bb <ll+0x3>
    158e:	89 db       	rcall	.-2286   	; 0xca2 <Print::println() [clone .constprop.44]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:422
    Serial.println();
    1590:	9f e7       	ldi	r25, 0x7F	; 127
    1592:	c9 2e       	mov	r12, r25
    1594:	91 e4       	ldi	r25, 0x41	; 65
    1596:	d9 2e       	mov	r13, r25
main():
    1598:	f1 2c       	mov	r15, r1
    159a:	e1 2c       	mov	r14, r1
loop():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:423
    for (uint16_t i = 0; i < sizeof(ewdt_regs_t); i++) {
    159c:	d6 01       	movw	r26, r12
    159e:	1d 91       	ld	r17, X+
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:426
      if (i && !(i & 0xF))
        Serial.println(); // newline
      Serial.printHex(reg.r[i]);
    15a0:	6d 01       	movw	r12, r26
printHex():
    15a2:	61 2f       	mov	r22, r17
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:672

  return 1;
}

void UartClass::printHex(const uint8_t b) {
  char x = (b >> 4) | '0';
    15a4:	62 95       	swap	r22
    15a6:	6f 70       	andi	r22, 0x0F	; 15
    15a8:	60 63       	ori	r22, 0x30	; 48
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:673
  if (x > '9')
    15aa:	6a 33       	cpi	r22, 0x3A	; 58
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:674
    x += 7;
    15ac:	0c f0       	brlt	.+2      	; 0x15b0 <main+0x570>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.h:198
    virtual void           flush(void                                                       );
    virtual size_t         write(uint8_t b                                                  );
    inline  size_t         write(unsigned long n) {return                   write((uint8_t)n);}
    inline  size_t         write(long          n) {return                   write((uint8_t)n);}
    inline  size_t         write(unsigned int  n) {return                   write((uint8_t)n);}
    inline  size_t         write(int           n) {return                   write((uint8_t)n);}
    15ae:	69 5f       	subi	r22, 0xF9	; 249
write():
    15b0:	86 ec       	ldi	r24, 0xC6	; 198
    15b2:	91 e4       	ldi	r25, 0x41	; 65
    15b4:	d0 d8       	rcall	.-3680   	; 0x756 <UartClass::write(unsigned char)>
printHex():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:676
  write(x);
  x = (b & 0x0F) | '0';
    15b6:	61 2f       	mov	r22, r17
    15b8:	6f 70       	andi	r22, 0x0F	; 15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:677
  if (x > '9')
    15ba:	60 63       	ori	r22, 0x30	; 48
    15bc:	6a 33       	cpi	r22, 0x3A	; 58
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.h:198
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <main+0x582>
    15c0:	69 5f       	subi	r22, 0xF9	; 249
write():
    15c2:	86 ec       	ldi	r24, 0xC6	; 198
    15c4:	91 e4       	ldi	r25, 0x41	; 65
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:423
  uint32_t loop_ticks = ticks;
  sei();
  if (((loop_ticks - ll) >> 4) >= 5) {
    ll = loop_ticks;
    Serial.println();
    for (uint16_t i = 0; i < sizeof(ewdt_regs_t); i++) {
    15c6:	c7 d8       	rcall	.-3698   	; 0x756 <UartClass::write(unsigned char)>
loop():
    15c8:	bf ef       	ldi	r27, 0xFF	; 255
    15ca:	eb 1a       	sub	r14, r27
    15cc:	fb 0a       	sbc	r15, r27
    15ce:	e9 e3       	ldi	r30, 0x39	; 57
    15d0:	ee 16       	cp	r14, r30
    15d2:	f1 04       	cpc	r15, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:428
      if (i && !(i & 0xF))
        Serial.println(); // newline
      Serial.printHex(reg.r[i]);
    }
    Serial.println();
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <main+0x598>
    15d6:	aa c0       	rjmp	.+340    	; 0x172c <main+0x6ec>
    15d8:	64 db       	rcall	.-2360   	; 0xca2 <Print::println() [clone .constprop.44]>
    15da:	0f e7       	ldi	r16, 0x7F	; 127
    15dc:	11 e4       	ldi	r17, 0x41	; 65
    15de:	41 2c       	mov	r4, r1
    15e0:	51 2c       	mov	r5, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:430
    for (int ch = 0; ch < 3; ch++) {
      Serial.print("ch");
    15e2:	32 01       	movw	r6, r4
    15e4:	43 94       	inc	r4
    15e6:	8a e1       	ldi	r24, 0x1A	; 26
    15e8:	91 e4       	ldi	r25, 0x41	; 65
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:78
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    15ea:	d8 db       	rcall	.-2128   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
print():
    15ec:	4a e0       	ldi	r20, 0x0A	; 10
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	c3 01       	movw	r24, r6
    15f2:	b2 01       	movw	r22, r4
    15f4:	9f db       	rcall	.-2242   	; 0xd34 <Print::print(long, int) [clone .constprop.37]>
loop():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:432
      Serial.print(ch + 1);
      Serial.print(" bv:");
    15f6:	8d e1       	ldi	r24, 0x1D	; 29
    15f8:	91 e4       	ldi	r25, 0x41	; 65
    15fa:	d0 db       	rcall	.-2144   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
print():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:83
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    15fc:	d8 01       	movw	r26, r16
    15fe:	14 96       	adiw	r26, 0x04	; 4
    1600:	6d 91       	ld	r22, X+
    1602:	7c 91       	ld	r23, X
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	80 e0       	ldi	r24, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1608:	4a e0       	ldi	r20, 0x0A	; 10
    160a:	58 db       	rcall	.-2384   	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
loop():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:434
      Serial.print(reg.d.pwr[ch].vbus);
      Serial.print(" sv:");
    160c:	82 e2       	ldi	r24, 0x22	; 34
    160e:	91 e4       	ldi	r25, 0x41	; 65
    1610:	c5 db       	rcall	.-2166   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
print():
    1612:	f8 01       	movw	r30, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:78
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1614:	66 81       	ldd	r22, Z+6	; 0x06
    1616:	77 81       	ldd	r23, Z+7	; 0x07
    1618:	07 2e       	mov	r0, r23
    161a:	00 0c       	add	r0, r0
    161c:	88 0b       	sbc	r24, r24
    161e:	99 0b       	sbc	r25, r25
    1620:	4a e0       	ldi	r20, 0x0A	; 10
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	87 db       	rcall	.-2290   	; 0xd34 <Print::print(long, int) [clone .constprop.37]>
loop():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:436
      Serial.print(reg.d.pwr[ch].vshunt);
      Serial.print(" ua:");
    1626:	87 e2       	ldi	r24, 0x27	; 39
    1628:	91 e4       	ldi	r25, 0x41	; 65
    162a:	b8 db       	rcall	.-2192   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:437
      Serial.print(reg.d.pwr[ch].vshunt * 400);
    162c:	d8 01       	movw	r26, r16
    162e:	16 96       	adiw	r26, 0x06	; 6
    1630:	8d 91       	ld	r24, X+
    1632:	9c 91       	ld	r25, X
    1634:	e0 e9       	ldi	r30, 0x90	; 144
    1636:	f1 e0       	ldi	r31, 0x01	; 1
    1638:	8e 9f       	mul	r24, r30
    163a:	b0 01       	movw	r22, r0
    163c:	8f 9f       	mul	r24, r31
    163e:	70 0d       	add	r23, r0
    1640:	9e 9f       	mul	r25, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:78
    1642:	70 0d       	add	r23, r0
    1644:	11 24       	eor	r1, r1
print():
    1646:	07 2e       	mov	r0, r23
    1648:	00 0c       	add	r0, r0
    164a:	88 0b       	sbc	r24, r24
    164c:	99 0b       	sbc	r25, r25
    164e:	4a e0       	ldi	r20, 0x0A	; 10
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	70 db       	rcall	.-2336   	; 0xd34 <Print::print(long, int) [clone .constprop.37]>
    1654:	18 01       	movw	r2, r16
    1656:	1b 82       	std	Y+3, r1	; 0x03
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:439
      for (int a = 0; a < EWDT2_ACC_PER_CHA; a++) {
        Serial.print(" acc");
    1658:	1c 82       	std	Y+4, r1	; 0x04
    165a:	1d 82       	std	Y+5, r1	; 0x05
    165c:	1e 82       	std	Y+6, r1	; 0x06
loop():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:78
    165e:	8c e2       	ldi	r24, 0x2C	; 44
    1660:	91 e4       	ldi	r25, 0x41	; 65
    1662:	9c db       	rcall	.-2248   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
print():
    1664:	4a e0       	ldi	r20, 0x0A	; 10
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	6b 81       	ldd	r22, Y+3	; 0x03
    166a:	7c 81       	ldd	r23, Y+4	; 0x04
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:441
        Serial.print(a);
        Serial.print(':');
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	61 db       	rcall	.-2366   	; 0xd34 <Print::print(long, int) [clone .constprop.37]>
loop():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:442
        Serial.print(reg.d.pwr[ch].acc[a].sv_sum);
    1672:	8a e3       	ldi	r24, 0x3A	; 58
    1674:	d6 d8       	rcall	.-3668   	; 0x822 <Print::print(char) [clone .constprop.39]>
    1676:	d1 01       	movw	r26, r2
    1678:	18 96       	adiw	r26, 0x08	; 8
    167a:	6d 91       	ld	r22, X+
    167c:	7d 91       	ld	r23, X+
    167e:	8d 91       	ld	r24, X+
    1680:	9c 91       	ld	r25, X
    1682:	1b 97       	sbiw	r26, 0x0b	; 11
    1684:	4a e0       	ldi	r20, 0x0A	; 10
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:443
        Serial.print('/');
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	55 db       	rcall	.-2390   	; 0xd34 <Print::print(long, int) [clone .constprop.37]>
    168a:	8f e2       	ldi	r24, 0x2F	; 47
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:83
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    168c:	ca d8       	rcall	.-3692   	; 0x822 <Print::print(char) [clone .constprop.39]>
print():
    168e:	f1 01       	movw	r30, r2
    1690:	64 85       	ldd	r22, Z+12	; 0x0c
    1692:	75 85       	ldd	r23, Z+13	; 0x0d
    1694:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	4a e0       	ldi	r20, 0x0A	; 10
    169a:	10 db       	rcall	.-2528   	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
loop():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:445
        Serial.print(reg.d.pwr[ch].acc[a].sv_cnt);
        Serial.print('=');
    169c:	8d e3       	ldi	r24, 0x3D	; 61
    169e:	c1 d8       	rcall	.-3710   	; 0x822 <Print::print(char) [clone .constprop.39]>
    16a0:	d1 01       	movw	r26, r2
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:446
        Serial.print((reg.d.pwr[ch].acc[a].sv_sum) / EWDT2_SVS_DIV_MAH);
    16a2:	18 96       	adiw	r26, 0x08	; 8
    16a4:	6d 91       	ld	r22, X+
    16a6:	7d 91       	ld	r23, X+
    16a8:	8d 91       	ld	r24, X+
    16aa:	9c 91       	ld	r25, X
    16ac:	1b 97       	sbiw	r26, 0x0b	; 11
    16ae:	d0 d1       	rcall	.+928    	; 0x1a50 <__floatsisf>
    16b0:	2f e9       	ldi	r18, 0x9F	; 159
    16b2:	33 e1       	ldi	r19, 0x13	; 19
    16b4:	4b ea       	ldi	r20, 0xAB	; 171
    16b6:	56 e4       	ldi	r21, 0x46	; 70
    16b8:	35 d1       	rcall	.+618    	; 0x1924 <__divsf3>
    16ba:	6b 01       	movw	r12, r22
    16bc:	7c 01       	movw	r14, r24
    16be:	4b 01       	movw	r8, r22
    16c0:	5c 01       	movw	r10, r24
printFloat():
    16c2:	ac 01       	movw	r20, r24
    16c4:	9b 01       	movw	r18, r22
    16c6:	db d2       	rcall	.+1462   	; 0x1c7e <__unordsf2>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:255

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
    16c8:	88 23       	and	r24, r24
    16ca:	09 f4       	brne	.+2      	; 0x16ce <main+0x68e>
    16cc:	40 c0       	rjmp	.+128    	; 0x174e <main+0x70e>
write():
    16ce:	81 e3       	ldi	r24, 0x31	; 49
    16d0:	91 e4       	ldi	r25, 0x41	; 65
    16d2:	db da       	rcall	.-2634   	; 0xc8a <Print::write(char const*) [clone .part.2] [clone .constprop.45]>
loop():
    16d4:	8d e3       	ldi	r24, 0x3D	; 61
    16d6:	91 e4       	ldi	r25, 0x41	; 65
    16d8:	61 db       	rcall	.-2366   	; 0xd9c <Print::print(char const*) [clone .constprop.22]>
    16da:	96 e0       	ldi	r25, 0x06	; 6
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:447
        Serial.print("mah");
    16dc:	29 0e       	add	r2, r25
    16de:	31 1c       	adc	r3, r1
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	ad 81       	ldd	r26, Y+5	; 0x05
    16e6:	be 81       	ldd	r27, Y+6	; 0x06
    16e8:	01 97       	sbiw	r24, 0x01	; 1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:438
      Serial.print(reg.d.pwr[ch].vbus);
      Serial.print(" sv:");
      Serial.print(reg.d.pwr[ch].vshunt);
      Serial.print(" ua:");
      Serial.print(reg.d.pwr[ch].vshunt * 400);
      for (int a = 0; a < EWDT2_ACC_PER_CHA; a++) {
    16ea:	a1 05       	cpc	r26, r1
    16ec:	b1 05       	cpc	r27, r1
    16ee:	31 f5       	brne	.+76     	; 0x173c <main+0x6fc>
    16f0:	d8 da       	rcall	.-2640   	; 0xca2 <Print::println() [clone .constprop.44]>
    16f2:	9f ef       	ldi	r25, 0xFF	; 255
    16f4:	49 1a       	sub	r4, r25
    16f6:	59 0a       	sbc	r5, r25
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:449
        Serial.print(reg.d.pwr[ch].acc[a].sv_cnt);
        Serial.print('=');
        Serial.print((reg.d.pwr[ch].acc[a].sv_sum) / EWDT2_SVS_DIV_MAH);
        Serial.print("mah");
      }
      Serial.println();
    16f8:	69 0a       	sbc	r6, r25
    16fa:	79 0a       	sbc	r7, r25
    16fc:	00 5f       	subi	r16, 0xF0	; 240
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	a4 e0       	ldi	r26, 0x04	; 4
    1702:	4a 16       	cp	r4, r26
    1704:	51 04       	cpc	r5, r1
    1706:	61 04       	cpc	r6, r1
    1708:	71 04       	cpc	r7, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:429
      if (i && !(i & 0xF))
        Serial.println(); // newline
      Serial.printHex(reg.r[i]);
    }
    Serial.println();
    for (int ch = 0; ch < 3; ch++) {
    170a:	09 f0       	breq	.+2      	; 0x170e <main+0x6ce>
    170c:	6c cf       	rjmp	.-296    	; 0x15e6 <main+0x5a6>
    170e:	b1 ce       	rjmp	.-670    	; 0x1472 <main+0x432>
    1710:	0e 94 81 01 	call	0x302	; 0x302 <TwoWire::slaveTransactionOpen() [clone .constprop.6]>
    1714:	81 11       	cpse	r24, r1
    1716:	08 cf       	rjmp	.-496    	; 0x1528 <main+0x4e8>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:395
  //yes, real-world testing proves this level of paranoia is in fact necessary
  //this loop used to just sleep_cpu(). it would fail approximately 3 times per million
  //transactions when a transaction fired between the slaveTransactionOpen() calculated
  //its return value
  //and the sleep_cpu()
  while (!wake && !Wire.slaveTransactionOpen()) {
    1718:	f8 94       	cli
    171a:	0e 94 81 01 	call	0x302	; 0x302 <TwoWire::slaveTransactionOpen() [clone .constprop.6]>
    171e:	81 11       	cpse	r24, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:397
    cli();
    if(!Wire.slaveTransactionOpen()){
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <main+0x6e8>
    1722:	78 94       	sei
    1724:	88 95       	sleep
    1726:	fb ce       	rjmp	.-522    	; 0x151e <main+0x4de>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:405
      //sei();   
      //sleep_cpu(); 
      //re-writing this as assembler as relying on the order of compiler generated assembly is madness
      asm volatile( "sei\n\t"
                    "sleep\n\t"
                    ::);
    1728:	78 94       	sei
    172a:	f9 ce       	rjmp	.-526    	; 0x151e <main+0x4de>
    172c:	c7 01       	movw	r24, r14
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:408
    }
    else{
      sei();
    172e:	8f 70       	andi	r24, 0x0F	; 15
    1730:	99 27       	eor	r25, r25
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:424
  sei();
  if (((loop_ticks - ll) >> 4) >= 5) {
    ll = loop_ticks;
    Serial.println();
    for (uint16_t i = 0; i < sizeof(ewdt_regs_t); i++) {
      if (i && !(i & 0xF))
    1732:	89 2b       	or	r24, r25
    1734:	09 f0       	breq	.+2      	; 0x1738 <main+0x6f8>
    1736:	32 cf       	rjmp	.-412    	; 0x159c <main+0x55c>
    1738:	b4 da       	rcall	.-2712   	; 0xca2 <Print::println() [clone .constprop.44]>
    173a:	30 cf       	rjmp	.-416    	; 0x159c <main+0x55c>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:425
        Serial.println(); // newline
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	a0 e0       	ldi	r26, 0x00	; 0
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:438
      Serial.print(reg.d.pwr[ch].vbus);
      Serial.print(" sv:");
      Serial.print(reg.d.pwr[ch].vshunt);
      Serial.print(" ua:");
      Serial.print(reg.d.pwr[ch].vshunt * 400);
      for (int a = 0; a < EWDT2_ACC_PER_CHA; a++) {
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	8b 83       	std	Y+3, r24	; 0x03
    1746:	9c 83       	std	Y+4, r25	; 0x04
    1748:	ad 83       	std	Y+5, r26	; 0x05
    174a:	be 83       	std	Y+6, r27	; 0x06
    174c:	88 cf       	rjmp	.-240    	; 0x165e <main+0x61e>
printFloat():
    174e:	d7 01       	movw	r26, r14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:256
  if (isinf(number)) return print("inf");
    1750:	c6 01       	movw	r24, r12
    1752:	bf 77       	andi	r27, 0x7F	; 127
    1754:	8f 83       	std	Y+7, r24	; 0x07
    1756:	98 87       	std	Y+8, r25	; 0x08
    1758:	a9 87       	std	Y+9, r26	; 0x09
    175a:	ba 87       	std	Y+10, r27	; 0x0a
    175c:	2f ef       	ldi	r18, 0xFF	; 255
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	5f e7       	ldi	r21, 0x7F	; 127
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	8a d2       	rcall	.+1300   	; 0x1c7e <__unordsf2>
    176a:	81 11       	cpse	r24, r1
    176c:	0e c0       	rjmp	.+28     	; 0x178a <main+0x74a>
    176e:	2f ef       	ldi	r18, 0xFF	; 255
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	5f e7       	ldi	r21, 0x7F	; 127
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	ce d0       	rcall	.+412    	; 0x191c <__cmpsf2>
    1780:	18 16       	cp	r1, r24
    1782:	1c f4       	brge	.+6      	; 0x178a <main+0x74a>
write():
    1784:	85 e3       	ldi	r24, 0x35	; 53
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:257
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1786:	91 e4       	ldi	r25, 0x41	; 65
    1788:	a4 cf       	rjmp	.-184    	; 0x16d2 <main+0x692>
printFloat():
    178a:	2f ef       	ldi	r18, 0xFF	; 255
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	4f e7       	ldi	r20, 0x7F	; 127
    1790:	5f e4       	ldi	r21, 0x4F	; 79
    1792:	c7 01       	movw	r24, r14
    1794:	b6 01       	movw	r22, r12
    1796:	0c d2       	rcall	.+1048   	; 0x1bb0 <__gesf2>
    1798:	18 16       	cp	r1, r24
    179a:	1c f4       	brge	.+6      	; 0x17a2 <main+0x762>
write():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:258
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    179c:	89 e3       	ldi	r24, 0x39	; 57
    179e:	91 e4       	ldi	r25, 0x41	; 65
    17a0:	98 cf       	rjmp	.-208    	; 0x16d2 <main+0x692>
printFloat():
    17a2:	2f ef       	ldi	r18, 0xFF	; 255
    17a4:	3f ef       	ldi	r19, 0xFF	; 255
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	5f ec       	ldi	r21, 0xCF	; 207
    17aa:	c7 01       	movw	r24, r14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:261

  // Handle negative numbers
  if (number < 0.0)
    17ac:	b6 01       	movw	r22, r12
    17ae:	b6 d0       	rcall	.+364    	; 0x191c <__cmpsf2>
    17b0:	87 fd       	sbrc	r24, 7
    17b2:	f4 cf       	rjmp	.-24     	; 0x179c <main+0x75c>
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	a9 01       	movw	r20, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:263
  {
     n += print('-');
    17ba:	c7 01       	movw	r24, r14
    17bc:	b6 01       	movw	r22, r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:264
     number = -number;
    17be:	ae d0       	rcall	.+348    	; 0x191c <__cmpsf2>
    17c0:	87 ff       	sbrs	r24, 7
    17c2:	08 c0       	rjmp	.+16     	; 0x17d4 <main+0x794>
    17c4:	8d e2       	ldi	r24, 0x2D	; 45
    17c6:	2d d8       	rcall	.-4006   	; 0x822 <Print::print(char) [clone .constprop.39]>
    17c8:	46 01       	movw	r8, r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:272
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;

  number += rounding;
    17ca:	57 01       	movw	r10, r14
    17cc:	b7 fa       	bst	r11, 7
    17ce:	b0 94       	com	r11
    17d0:	b7 f8       	bld	r11, 7
    17d2:	b0 94       	com	r11
    17d4:	2a e0       	ldi	r18, 0x0A	; 10
    17d6:	37 ed       	ldi	r19, 0xD7	; 215
    17d8:	43 ea       	ldi	r20, 0xA3	; 163
    17da:	5b e3       	ldi	r21, 0x3B	; 59
    17dc:	c5 01       	movw	r24, r10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:275

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    17de:	b4 01       	movw	r22, r8
    17e0:	39 d0       	rcall	.+114    	; 0x1854 <__addsf3>
    17e2:	4b 01       	movw	r8, r22
    17e4:	5c 01       	movw	r10, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:276
  double remainder = number - (double)int_part;
    17e6:	06 d1       	rcall	.+524    	; 0x19f4 <__fixunssfsi>
    17e8:	6b 01       	movw	r12, r22
    17ea:	7c 01       	movw	r14, r24
    17ec:	2f d1       	rcall	.+606    	; 0x1a4c <__floatunsisf>
    17ee:	9b 01       	movw	r18, r22
    17f0:	ac 01       	movw	r20, r24
    17f2:	c5 01       	movw	r24, r10
    17f4:	b4 01       	movw	r22, r8
    17f6:	2d d0       	rcall	.+90     	; 0x1852 <__subsf3>
    17f8:	4b 01       	movw	r8, r22
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    17fa:	5c 01       	movw	r10, r24
print():
    17fc:	4a e0       	ldi	r20, 0x0A	; 10
    17fe:	c7 01       	movw	r24, r14
    1800:	b6 01       	movw	r22, r12
    1802:	5c da       	rcall	.-2888   	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
write():
    1804:	89 eb       	ldi	r24, 0xB9	; 185
    1806:	90 e4       	ldi	r25, 0x40	; 64
    1808:	40 da       	rcall	.-2944   	; 0xc8a <Print::write(char const*) [clone .part.2] [clone .constprop.45]>
printFloat():
    180a:	20 e0       	ldi	r18, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:287
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e2       	ldi	r20, 0x20	; 32
    1810:	51 e4       	ldi	r21, 0x41	; 65
    1812:	c5 01       	movw	r24, r10
    1814:	b4 01       	movw	r22, r8
    1816:	d0 d1       	rcall	.+928    	; 0x1bb8 <__mulsf3>
    1818:	4b 01       	movw	r8, r22
    181a:	5c 01       	movw	r10, r24
    181c:	eb d0       	rcall	.+470    	; 0x19f4 <__fixunssfsi>
print():
    181e:	6b 01       	movw	r12, r22
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:288
    unsigned int toPrint = (unsigned int)remainder;
    1820:	f1 2c       	mov	r15, r1
    1822:	e1 2c       	mov	r14, r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:83
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1824:	4a e0       	ldi	r20, 0x0A	; 10
    1826:	c7 01       	movw	r24, r14
    1828:	b6 01       	movw	r22, r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    182a:	48 da       	rcall	.-2928   	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
printFloat():
    182c:	c7 01       	movw	r24, r14
    182e:	b6 01       	movw	r22, r12
    1830:	0d d1       	rcall	.+538    	; 0x1a4c <__floatunsisf>
    1832:	9b 01       	movw	r18, r22
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:290
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
    remainder -= toPrint;
    1834:	ac 01       	movw	r20, r24
    1836:	c5 01       	movw	r24, r10
    1838:	b4 01       	movw	r22, r8
    183a:	0b d0       	rcall	.+22     	; 0x1852 <__subsf3>
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e2       	ldi	r20, 0x20	; 32
    1842:	51 e4       	ldi	r21, 0x41	; 65
    1844:	b9 d1       	rcall	.+882    	; 0x1bb8 <__mulsf3>
    1846:	d6 d0       	rcall	.+428    	; 0x19f4 <__fixunssfsi>
print():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:287
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	4a e0       	ldi	r20, 0x0A	; 10
    184e:	36 da       	rcall	.-2964   	; 0xcbc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.40]>
    1850:	41 cf       	rjmp	.-382    	; 0x16d4 <main+0x694>

00001852 <__subsf3>:
__subsf3():
    1852:	50 58       	subi	r21, 0x80	; 128

00001854 <__addsf3>:
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:288
    unsigned int toPrint = (unsigned int)remainder;
    1854:	bb 27       	eor	r27, r27
    1856:	aa 27       	eor	r26, r26
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:83
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1858:	0e d0       	rcall	.+28     	; 0x1876 <__addsf3x>
    185a:	70 c1       	rjmp	.+736    	; 0x1b3c <__fp_round>
__addsf3():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    185c:	61 d1       	rcall	.+706    	; 0x1b20 <__fp_pscA>
    185e:	30 f0       	brcs	.+12     	; 0x186c <__addsf3+0x18>
    1860:	66 d1       	rcall	.+716    	; 0x1b2e <__fp_pscB>
    1862:	20 f0       	brcs	.+8      	; 0x186c <__addsf3+0x18>
    1864:	31 f4       	brne	.+12     	; 0x1872 <__addsf3+0x1e>
    1866:	9f 3f       	cpi	r25, 0xFF	; 255
    1868:	11 f4       	brne	.+4      	; 0x186e <__addsf3+0x1a>
    186a:	1e f4       	brtc	.+6      	; 0x1872 <__addsf3+0x1e>
    186c:	56 c1       	rjmp	.+684    	; 0x1b1a <__fp_nan>
    186e:	0e f4       	brtc	.+2      	; 0x1872 <__addsf3+0x1e>
    1870:	e0 95       	com	r30
    1872:	e7 fb       	bst	r30, 7
    1874:	4c c1       	rjmp	.+664    	; 0x1b0e <__fp_inf>

00001876 <__addsf3x>:
__addsf3x():
    1876:	e9 2f       	mov	r30, r25
    1878:	72 d1       	rcall	.+740    	; 0x1b5e <__fp_split3>
    187a:	80 f3       	brcs	.-32     	; 0x185c <__addsf3+0x8>
    187c:	ba 17       	cp	r27, r26
    187e:	62 07       	cpc	r22, r18
    1880:	73 07       	cpc	r23, r19
    1882:	84 07       	cpc	r24, r20
    1884:	95 07       	cpc	r25, r21
    1886:	18 f0       	brcs	.+6      	; 0x188e <__addsf3x+0x18>
    1888:	71 f4       	brne	.+28     	; 0x18a6 <__addsf3x+0x30>
    188a:	9e f5       	brtc	.+102    	; 0x18f2 <__addsf3x+0x7c>
    188c:	8a c1       	rjmp	.+788    	; 0x1ba2 <__fp_zero>
    188e:	0e f4       	brtc	.+2      	; 0x1892 <__addsf3x+0x1c>
    1890:	e0 95       	com	r30
    1892:	0b 2e       	mov	r0, r27
    1894:	ba 2f       	mov	r27, r26
    1896:	a0 2d       	mov	r26, r0
    1898:	0b 01       	movw	r0, r22
    189a:	b9 01       	movw	r22, r18
    189c:	90 01       	movw	r18, r0
    189e:	0c 01       	movw	r0, r24
    18a0:	ca 01       	movw	r24, r20
    18a2:	a0 01       	movw	r20, r0
    18a4:	11 24       	eor	r1, r1
    18a6:	ff 27       	eor	r31, r31
    18a8:	59 1b       	sub	r21, r25
    18aa:	99 f0       	breq	.+38     	; 0x18d2 <__addsf3x+0x5c>
    18ac:	59 3f       	cpi	r21, 0xF9	; 249
    18ae:	50 f4       	brcc	.+20     	; 0x18c4 <__addsf3x+0x4e>
    18b0:	50 3e       	cpi	r21, 0xE0	; 224
    18b2:	68 f1       	brcs	.+90     	; 0x190e <__addsf3x+0x98>
    18b4:	1a 16       	cp	r1, r26
    18b6:	f0 40       	sbci	r31, 0x00	; 0
    18b8:	a2 2f       	mov	r26, r18
    18ba:	23 2f       	mov	r18, r19
    18bc:	34 2f       	mov	r19, r20
    18be:	44 27       	eor	r20, r20
    18c0:	58 5f       	subi	r21, 0xF8	; 248
    18c2:	f3 cf       	rjmp	.-26     	; 0x18aa <__addsf3x+0x34>
    18c4:	46 95       	lsr	r20
    18c6:	37 95       	ror	r19
    18c8:	27 95       	ror	r18
    18ca:	a7 95       	ror	r26
    18cc:	f0 40       	sbci	r31, 0x00	; 0
    18ce:	53 95       	inc	r21
    18d0:	c9 f7       	brne	.-14     	; 0x18c4 <__addsf3x+0x4e>
    18d2:	7e f4       	brtc	.+30     	; 0x18f2 <__addsf3x+0x7c>
    18d4:	1f 16       	cp	r1, r31
    18d6:	ba 0b       	sbc	r27, r26
    18d8:	62 0b       	sbc	r22, r18
    18da:	73 0b       	sbc	r23, r19
    18dc:	84 0b       	sbc	r24, r20
    18de:	ba f0       	brmi	.+46     	; 0x190e <__addsf3x+0x98>
    18e0:	91 50       	subi	r25, 0x01	; 1
    18e2:	a1 f0       	breq	.+40     	; 0x190c <__addsf3x+0x96>
    18e4:	ff 0f       	add	r31, r31
    18e6:	bb 1f       	adc	r27, r27
    18e8:	66 1f       	adc	r22, r22
    18ea:	77 1f       	adc	r23, r23
    18ec:	88 1f       	adc	r24, r24
    18ee:	c2 f7       	brpl	.-16     	; 0x18e0 <__addsf3x+0x6a>
    18f0:	0e c0       	rjmp	.+28     	; 0x190e <__addsf3x+0x98>
    18f2:	ba 0f       	add	r27, r26
    18f4:	62 1f       	adc	r22, r18
    18f6:	73 1f       	adc	r23, r19
    18f8:	84 1f       	adc	r24, r20
    18fa:	48 f4       	brcc	.+18     	; 0x190e <__addsf3x+0x98>
    18fc:	87 95       	ror	r24
    18fe:	77 95       	ror	r23
    1900:	67 95       	ror	r22
    1902:	b7 95       	ror	r27
    1904:	f7 95       	ror	r31
    1906:	9e 3f       	cpi	r25, 0xFE	; 254
    1908:	08 f0       	brcs	.+2      	; 0x190c <__addsf3x+0x96>
    190a:	b3 cf       	rjmp	.-154    	; 0x1872 <__addsf3+0x1e>
    190c:	93 95       	inc	r25
    190e:	88 0f       	add	r24, r24
    1910:	08 f0       	brcs	.+2      	; 0x1914 <__addsf3x+0x9e>
    1912:	99 27       	eor	r25, r25
    1914:	ee 0f       	add	r30, r30
    1916:	97 95       	ror	r25
    1918:	87 95       	ror	r24
    191a:	08 95       	ret

0000191c <__cmpsf2>:
    191c:	d4 d0       	rcall	.+424    	; 0x1ac6 <__fp_cmp>
    191e:	08 f4       	brcc	.+2      	; 0x1922 <__cmpsf2+0x6>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	08 95       	ret

00001924 <__divsf3>:
    1924:	0c d0       	rcall	.+24     	; 0x193e <__divsf3x>
    1926:	0a c1       	rjmp	.+532    	; 0x1b3c <__fp_round>
    1928:	02 d1       	rcall	.+516    	; 0x1b2e <__fp_pscB>
    192a:	40 f0       	brcs	.+16     	; 0x193c <__divsf3+0x18>
    192c:	f9 d0       	rcall	.+498    	; 0x1b20 <__fp_pscA>
    192e:	30 f0       	brcs	.+12     	; 0x193c <__divsf3+0x18>
    1930:	21 f4       	brne	.+8      	; 0x193a <__divsf3+0x16>
    1932:	5f 3f       	cpi	r21, 0xFF	; 255
    1934:	19 f0       	breq	.+6      	; 0x193c <__divsf3+0x18>
    1936:	eb c0       	rjmp	.+470    	; 0x1b0e <__fp_inf>
    1938:	51 11       	cpse	r21, r1
    193a:	34 c1       	rjmp	.+616    	; 0x1ba4 <__fp_szero>
    193c:	ee c0       	rjmp	.+476    	; 0x1b1a <__fp_nan>

0000193e <__divsf3x>:
    193e:	0f d1       	rcall	.+542    	; 0x1b5e <__fp_split3>
    1940:	98 f3       	brcs	.-26     	; 0x1928 <__divsf3+0x4>

00001942 <__divsf3_pse>:
__divsf3_pse():
    1942:	99 23       	and	r25, r25
    1944:	c9 f3       	breq	.-14     	; 0x1938 <__divsf3+0x14>
    1946:	55 23       	and	r21, r21
    1948:	b1 f3       	breq	.-20     	; 0x1936 <__divsf3+0x12>
    194a:	95 1b       	sub	r25, r21
    194c:	55 0b       	sbc	r21, r21
    194e:	bb 27       	eor	r27, r27
    1950:	aa 27       	eor	r26, r26
    1952:	62 17       	cp	r22, r18
    1954:	73 07       	cpc	r23, r19
    1956:	84 07       	cpc	r24, r20
    1958:	38 f0       	brcs	.+14     	; 0x1968 <__divsf3_pse+0x26>
    195a:	9f 5f       	subi	r25, 0xFF	; 255
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	22 0f       	add	r18, r18
    1960:	33 1f       	adc	r19, r19
    1962:	44 1f       	adc	r20, r20
    1964:	aa 1f       	adc	r26, r26
    1966:	a9 f3       	breq	.-22     	; 0x1952 <__divsf3_pse+0x10>
    1968:	33 d0       	rcall	.+102    	; 0x19d0 <__divsf3_pse+0x8e>
    196a:	0e 2e       	mov	r0, r30
    196c:	3a f0       	brmi	.+14     	; 0x197c <__divsf3_pse+0x3a>
    196e:	e0 e8       	ldi	r30, 0x80	; 128
    1970:	30 d0       	rcall	.+96     	; 0x19d2 <__divsf3_pse+0x90>
    1972:	91 50       	subi	r25, 0x01	; 1
    1974:	50 40       	sbci	r21, 0x00	; 0
    1976:	e6 95       	lsr	r30
    1978:	00 1c       	adc	r0, r0
    197a:	ca f7       	brpl	.-14     	; 0x196e <__divsf3_pse+0x2c>
    197c:	29 d0       	rcall	.+82     	; 0x19d0 <__divsf3_pse+0x8e>
    197e:	fe 2f       	mov	r31, r30
    1980:	27 d0       	rcall	.+78     	; 0x19d0 <__divsf3_pse+0x8e>
    1982:	66 0f       	add	r22, r22
    1984:	77 1f       	adc	r23, r23
    1986:	88 1f       	adc	r24, r24
    1988:	bb 1f       	adc	r27, r27
    198a:	26 17       	cp	r18, r22
    198c:	37 07       	cpc	r19, r23
    198e:	48 07       	cpc	r20, r24
    1990:	ab 07       	cpc	r26, r27
    1992:	b0 e8       	ldi	r27, 0x80	; 128
    1994:	09 f0       	breq	.+2      	; 0x1998 <__divsf3_pse+0x56>
    1996:	bb 0b       	sbc	r27, r27
    1998:	80 2d       	mov	r24, r0
    199a:	bf 01       	movw	r22, r30
    199c:	ff 27       	eor	r31, r31
    199e:	93 58       	subi	r25, 0x83	; 131
    19a0:	5f 4f       	sbci	r21, 0xFF	; 255
    19a2:	2a f0       	brmi	.+10     	; 0x19ae <__divsf3_pse+0x6c>
    19a4:	9e 3f       	cpi	r25, 0xFE	; 254
    19a6:	51 05       	cpc	r21, r1
    19a8:	68 f0       	brcs	.+26     	; 0x19c4 <__divsf3_pse+0x82>
    19aa:	b1 c0       	rjmp	.+354    	; 0x1b0e <__fp_inf>
    19ac:	fb c0       	rjmp	.+502    	; 0x1ba4 <__fp_szero>
    19ae:	5f 3f       	cpi	r21, 0xFF	; 255
    19b0:	ec f3       	brlt	.-6      	; 0x19ac <__divsf3_pse+0x6a>
    19b2:	98 3e       	cpi	r25, 0xE8	; 232
    19b4:	dc f3       	brlt	.-10     	; 0x19ac <__divsf3_pse+0x6a>
    19b6:	86 95       	lsr	r24
    19b8:	77 95       	ror	r23
    19ba:	67 95       	ror	r22
    19bc:	b7 95       	ror	r27
    19be:	f7 95       	ror	r31
    19c0:	9f 5f       	subi	r25, 0xFF	; 255
    19c2:	c9 f7       	brne	.-14     	; 0x19b6 <__divsf3_pse+0x74>
    19c4:	88 0f       	add	r24, r24
    19c6:	91 1d       	adc	r25, r1
    19c8:	96 95       	lsr	r25
    19ca:	87 95       	ror	r24
    19cc:	97 f9       	bld	r25, 7
    19ce:	08 95       	ret
    19d0:	e1 e0       	ldi	r30, 0x01	; 1
    19d2:	66 0f       	add	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	88 1f       	adc	r24, r24
    19d8:	bb 1f       	adc	r27, r27
    19da:	62 17       	cp	r22, r18
    19dc:	73 07       	cpc	r23, r19
    19de:	84 07       	cpc	r24, r20
    19e0:	ba 07       	cpc	r27, r26
    19e2:	20 f0       	brcs	.+8      	; 0x19ec <__divsf3_pse+0xaa>
    19e4:	62 1b       	sub	r22, r18
    19e6:	73 0b       	sbc	r23, r19
    19e8:	84 0b       	sbc	r24, r20
    19ea:	ba 0b       	sbc	r27, r26
    19ec:	ee 1f       	adc	r30, r30
    19ee:	88 f7       	brcc	.-30     	; 0x19d2 <__divsf3_pse+0x90>
    19f0:	e0 95       	com	r30
    19f2:	08 95       	ret

000019f4 <__fixunssfsi>:
__fixunssfsi():
    19f4:	bc d0       	rcall	.+376    	; 0x1b6e <__fp_splitA>
    19f6:	88 f0       	brcs	.+34     	; 0x1a1a <__fixunssfsi+0x26>
    19f8:	9f 57       	subi	r25, 0x7F	; 127
    19fa:	90 f0       	brcs	.+36     	; 0x1a20 <__fixunssfsi+0x2c>
    19fc:	b9 2f       	mov	r27, r25
    19fe:	99 27       	eor	r25, r25
    1a00:	b7 51       	subi	r27, 0x17	; 23
    1a02:	a0 f0       	brcs	.+40     	; 0x1a2c <__fixunssfsi+0x38>
    1a04:	d1 f0       	breq	.+52     	; 0x1a3a <__fixunssfsi+0x46>
    1a06:	66 0f       	add	r22, r22
    1a08:	77 1f       	adc	r23, r23
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	1a f0       	brmi	.+6      	; 0x1a16 <__fixunssfsi+0x22>
    1a10:	ba 95       	dec	r27
    1a12:	c9 f7       	brne	.-14     	; 0x1a06 <__fixunssfsi+0x12>
    1a14:	12 c0       	rjmp	.+36     	; 0x1a3a <__fixunssfsi+0x46>
    1a16:	b1 30       	cpi	r27, 0x01	; 1
    1a18:	81 f0       	breq	.+32     	; 0x1a3a <__fixunssfsi+0x46>
    1a1a:	c3 d0       	rcall	.+390    	; 0x1ba2 <__fp_zero>
    1a1c:	b1 e0       	ldi	r27, 0x01	; 1
    1a1e:	08 95       	ret
    1a20:	c0 c0       	rjmp	.+384    	; 0x1ba2 <__fp_zero>
    1a22:	67 2f       	mov	r22, r23
    1a24:	78 2f       	mov	r23, r24
    1a26:	88 27       	eor	r24, r24
    1a28:	b8 5f       	subi	r27, 0xF8	; 248
    1a2a:	39 f0       	breq	.+14     	; 0x1a3a <__fixunssfsi+0x46>
    1a2c:	b9 3f       	cpi	r27, 0xF9	; 249
    1a2e:	cc f3       	brlt	.-14     	; 0x1a22 <__fixunssfsi+0x2e>
    1a30:	86 95       	lsr	r24
    1a32:	77 95       	ror	r23
    1a34:	67 95       	ror	r22
    1a36:	b3 95       	inc	r27
    1a38:	d9 f7       	brne	.-10     	; 0x1a30 <__fixunssfsi+0x3c>
    1a3a:	3e f4       	brtc	.+14     	; 0x1a4a <__fixunssfsi+0x56>
    1a3c:	90 95       	com	r25
    1a3e:	80 95       	com	r24
    1a40:	70 95       	com	r23
    1a42:	61 95       	neg	r22
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	8f 4f       	sbci	r24, 0xFF	; 255
    1a48:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4a:	08 95       	ret

00001a4c <__floatunsisf>:
__floatunsisf():
    1a4c:	e8 94       	clt
    1a4e:	09 c0       	rjmp	.+18     	; 0x1a62 <__floatsisf+0x12>

00001a50 <__floatsisf>:
    1a50:	97 fb       	bst	r25, 7
    1a52:	3e f4       	brtc	.+14     	; 0x1a62 <__floatsisf+0x12>
    1a54:	90 95       	com	r25
    1a56:	80 95       	com	r24
    1a58:	70 95       	com	r23
    1a5a:	61 95       	neg	r22
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	99 23       	and	r25, r25
    1a64:	a9 f0       	breq	.+42     	; 0x1a90 <__floatsisf+0x40>
    1a66:	f9 2f       	mov	r31, r25
    1a68:	96 e9       	ldi	r25, 0x96	; 150
    1a6a:	bb 27       	eor	r27, r27
    1a6c:	93 95       	inc	r25
    1a6e:	f6 95       	lsr	r31
    1a70:	87 95       	ror	r24
    1a72:	77 95       	ror	r23
    1a74:	67 95       	ror	r22
    1a76:	b7 95       	ror	r27
    1a78:	f1 11       	cpse	r31, r1
    1a7a:	f8 cf       	rjmp	.-16     	; 0x1a6c <__floatsisf+0x1c>
    1a7c:	fa f4       	brpl	.+62     	; 0x1abc <__floatsisf+0x6c>
    1a7e:	bb 0f       	add	r27, r27
    1a80:	11 f4       	brne	.+4      	; 0x1a86 <__floatsisf+0x36>
    1a82:	60 ff       	sbrs	r22, 0
    1a84:	1b c0       	rjmp	.+54     	; 0x1abc <__floatsisf+0x6c>
    1a86:	6f 5f       	subi	r22, 0xFF	; 255
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	16 c0       	rjmp	.+44     	; 0x1abc <__floatsisf+0x6c>
    1a90:	88 23       	and	r24, r24
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <__floatsisf+0x48>
    1a94:	96 e9       	ldi	r25, 0x96	; 150
    1a96:	11 c0       	rjmp	.+34     	; 0x1aba <__floatsisf+0x6a>
    1a98:	77 23       	and	r23, r23
    1a9a:	21 f0       	breq	.+8      	; 0x1aa4 <__floatsisf+0x54>
    1a9c:	9e e8       	ldi	r25, 0x8E	; 142
    1a9e:	87 2f       	mov	r24, r23
    1aa0:	76 2f       	mov	r23, r22
    1aa2:	05 c0       	rjmp	.+10     	; 0x1aae <__floatsisf+0x5e>
    1aa4:	66 23       	and	r22, r22
    1aa6:	71 f0       	breq	.+28     	; 0x1ac4 <__floatsisf+0x74>
    1aa8:	96 e8       	ldi	r25, 0x86	; 134
    1aaa:	86 2f       	mov	r24, r22
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	2a f0       	brmi	.+10     	; 0x1abc <__floatsisf+0x6c>
    1ab2:	9a 95       	dec	r25
    1ab4:	66 0f       	add	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	88 1f       	adc	r24, r24
    1aba:	da f7       	brpl	.-10     	; 0x1ab2 <__floatsisf+0x62>
    1abc:	88 0f       	add	r24, r24
    1abe:	96 95       	lsr	r25
    1ac0:	87 95       	ror	r24
    1ac2:	97 f9       	bld	r25, 7
    1ac4:	08 95       	ret

00001ac6 <__fp_cmp>:
__fp_cmp():
    1ac6:	99 0f       	add	r25, r25
    1ac8:	00 08       	sbc	r0, r0
    1aca:	55 0f       	add	r21, r21
    1acc:	aa 0b       	sbc	r26, r26
    1ace:	e0 e8       	ldi	r30, 0x80	; 128
    1ad0:	fe ef       	ldi	r31, 0xFE	; 254
    1ad2:	16 16       	cp	r1, r22
    1ad4:	17 06       	cpc	r1, r23
    1ad6:	e8 07       	cpc	r30, r24
    1ad8:	f9 07       	cpc	r31, r25
    1ada:	c0 f0       	brcs	.+48     	; 0x1b0c <__fp_cmp+0x46>
    1adc:	12 16       	cp	r1, r18
    1ade:	13 06       	cpc	r1, r19
    1ae0:	e4 07       	cpc	r30, r20
    1ae2:	f5 07       	cpc	r31, r21
    1ae4:	98 f0       	brcs	.+38     	; 0x1b0c <__fp_cmp+0x46>
    1ae6:	62 1b       	sub	r22, r18
    1ae8:	73 0b       	sbc	r23, r19
    1aea:	84 0b       	sbc	r24, r20
    1aec:	95 0b       	sbc	r25, r21
    1aee:	39 f4       	brne	.+14     	; 0x1afe <__fp_cmp+0x38>
    1af0:	0a 26       	eor	r0, r26
    1af2:	61 f0       	breq	.+24     	; 0x1b0c <__fp_cmp+0x46>
    1af4:	23 2b       	or	r18, r19
    1af6:	24 2b       	or	r18, r20
    1af8:	25 2b       	or	r18, r21
    1afa:	21 f4       	brne	.+8      	; 0x1b04 <__fp_cmp+0x3e>
    1afc:	08 95       	ret
    1afe:	0a 26       	eor	r0, r26
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <__fp_cmp+0x3e>
    1b02:	a1 40       	sbci	r26, 0x01	; 1
    1b04:	a6 95       	lsr	r26
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	81 1d       	adc	r24, r1
    1b0a:	81 1d       	adc	r24, r1
    1b0c:	08 95       	ret

00001b0e <__fp_inf>:
__fp_inf():
    1b0e:	97 f9       	bld	r25, 7
    1b10:	9f 67       	ori	r25, 0x7F	; 127
    1b12:	80 e8       	ldi	r24, 0x80	; 128
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	08 95       	ret

00001b1a <__fp_nan>:
__fp_nan():
    1b1a:	9f ef       	ldi	r25, 0xFF	; 255
    1b1c:	80 ec       	ldi	r24, 0xC0	; 192
    1b1e:	08 95       	ret

00001b20 <__fp_pscA>:
__fp_pscA():
    1b20:	00 24       	eor	r0, r0
    1b22:	0a 94       	dec	r0
    1b24:	16 16       	cp	r1, r22
    1b26:	17 06       	cpc	r1, r23
    1b28:	18 06       	cpc	r1, r24
    1b2a:	09 06       	cpc	r0, r25
    1b2c:	08 95       	ret

00001b2e <__fp_pscB>:
__fp_pscB():
    1b2e:	00 24       	eor	r0, r0
    1b30:	0a 94       	dec	r0
    1b32:	12 16       	cp	r1, r18
    1b34:	13 06       	cpc	r1, r19
    1b36:	14 06       	cpc	r1, r20
    1b38:	05 06       	cpc	r0, r21
    1b3a:	08 95       	ret

00001b3c <__fp_round>:
__fp_round():
    1b3c:	09 2e       	mov	r0, r25
    1b3e:	03 94       	inc	r0
    1b40:	00 0c       	add	r0, r0
    1b42:	11 f4       	brne	.+4      	; 0x1b48 <__fp_round+0xc>
    1b44:	88 23       	and	r24, r24
    1b46:	52 f0       	brmi	.+20     	; 0x1b5c <__fp_round+0x20>
    1b48:	bb 0f       	add	r27, r27
    1b4a:	40 f4       	brcc	.+16     	; 0x1b5c <__fp_round+0x20>
    1b4c:	bf 2b       	or	r27, r31
    1b4e:	11 f4       	brne	.+4      	; 0x1b54 <__fp_round+0x18>
    1b50:	60 ff       	sbrs	r22, 0
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <__fp_round+0x20>
    1b54:	6f 5f       	subi	r22, 0xFF	; 255
    1b56:	7f 4f       	sbci	r23, 0xFF	; 255
    1b58:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5c:	08 95       	ret

00001b5e <__fp_split3>:
__fp_split3():
    1b5e:	57 fd       	sbrc	r21, 7
    1b60:	90 58       	subi	r25, 0x80	; 128
    1b62:	44 0f       	add	r20, r20
    1b64:	55 1f       	adc	r21, r21
    1b66:	59 f0       	breq	.+22     	; 0x1b7e <__fp_splitA+0x10>
    1b68:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6a:	71 f0       	breq	.+28     	; 0x1b88 <__fp_splitA+0x1a>
    1b6c:	47 95       	ror	r20

00001b6e <__fp_splitA>:
    1b6e:	88 0f       	add	r24, r24
    1b70:	97 fb       	bst	r25, 7
    1b72:	99 1f       	adc	r25, r25
    1b74:	61 f0       	breq	.+24     	; 0x1b8e <__fp_splitA+0x20>
    1b76:	9f 3f       	cpi	r25, 0xFF	; 255
    1b78:	79 f0       	breq	.+30     	; 0x1b98 <__fp_splitA+0x2a>
    1b7a:	87 95       	ror	r24
    1b7c:	08 95       	ret
    1b7e:	12 16       	cp	r1, r18
    1b80:	13 06       	cpc	r1, r19
    1b82:	14 06       	cpc	r1, r20
    1b84:	55 1f       	adc	r21, r21
    1b86:	f2 cf       	rjmp	.-28     	; 0x1b6c <__fp_split3+0xe>
    1b88:	46 95       	lsr	r20
    1b8a:	f1 df       	rcall	.-30     	; 0x1b6e <__fp_splitA>
    1b8c:	08 c0       	rjmp	.+16     	; 0x1b9e <__fp_splitA+0x30>
    1b8e:	16 16       	cp	r1, r22
    1b90:	17 06       	cpc	r1, r23
    1b92:	18 06       	cpc	r1, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	f1 cf       	rjmp	.-30     	; 0x1b7a <__fp_splitA+0xc>
    1b98:	86 95       	lsr	r24
    1b9a:	71 05       	cpc	r23, r1
    1b9c:	61 05       	cpc	r22, r1
    1b9e:	08 94       	sec
    1ba0:	08 95       	ret

00001ba2 <__fp_zero>:
__fp_zero():
    1ba2:	e8 94       	clt

00001ba4 <__fp_szero>:
    1ba4:	bb 27       	eor	r27, r27
    1ba6:	66 27       	eor	r22, r22
    1ba8:	77 27       	eor	r23, r23
    1baa:	cb 01       	movw	r24, r22
    1bac:	97 f9       	bld	r25, 7
    1bae:	08 95       	ret

00001bb0 <__gesf2>:
__gesf2():
    1bb0:	8a df       	rcall	.-236    	; 0x1ac6 <__fp_cmp>
    1bb2:	08 f4       	brcc	.+2      	; 0x1bb6 <__gesf2+0x6>
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	08 95       	ret

00001bb8 <__mulsf3>:
__mulsf3():
    1bb8:	0b d0       	rcall	.+22     	; 0x1bd0 <__mulsf3x>
    1bba:	c0 cf       	rjmp	.-128    	; 0x1b3c <__fp_round>
    1bbc:	b1 df       	rcall	.-158    	; 0x1b20 <__fp_pscA>
    1bbe:	28 f0       	brcs	.+10     	; 0x1bca <__mulsf3+0x12>
    1bc0:	b6 df       	rcall	.-148    	; 0x1b2e <__fp_pscB>
    1bc2:	18 f0       	brcs	.+6      	; 0x1bca <__mulsf3+0x12>
    1bc4:	95 23       	and	r25, r21
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <__mulsf3+0x12>
    1bc8:	a2 cf       	rjmp	.-188    	; 0x1b0e <__fp_inf>
    1bca:	a7 cf       	rjmp	.-178    	; 0x1b1a <__fp_nan>
    1bcc:	11 24       	eor	r1, r1
    1bce:	ea cf       	rjmp	.-44     	; 0x1ba4 <__fp_szero>

00001bd0 <__mulsf3x>:
__mulsf3x():
    1bd0:	c6 df       	rcall	.-116    	; 0x1b5e <__fp_split3>
    1bd2:	a0 f3       	brcs	.-24     	; 0x1bbc <__mulsf3+0x4>

00001bd4 <__mulsf3_pse>:
    1bd4:	95 9f       	mul	r25, r21
    1bd6:	d1 f3       	breq	.-12     	; 0x1bcc <__mulsf3+0x14>
    1bd8:	95 0f       	add	r25, r21
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	55 1f       	adc	r21, r21
    1bde:	62 9f       	mul	r22, r18
    1be0:	f0 01       	movw	r30, r0
    1be2:	72 9f       	mul	r23, r18
    1be4:	bb 27       	eor	r27, r27
    1be6:	f0 0d       	add	r31, r0
    1be8:	b1 1d       	adc	r27, r1
    1bea:	63 9f       	mul	r22, r19
    1bec:	aa 27       	eor	r26, r26
    1bee:	f0 0d       	add	r31, r0
    1bf0:	b1 1d       	adc	r27, r1
    1bf2:	aa 1f       	adc	r26, r26
    1bf4:	64 9f       	mul	r22, r20
    1bf6:	66 27       	eor	r22, r22
    1bf8:	b0 0d       	add	r27, r0
    1bfa:	a1 1d       	adc	r26, r1
    1bfc:	66 1f       	adc	r22, r22
    1bfe:	82 9f       	mul	r24, r18
    1c00:	22 27       	eor	r18, r18
    1c02:	b0 0d       	add	r27, r0
    1c04:	a1 1d       	adc	r26, r1
    1c06:	62 1f       	adc	r22, r18
    1c08:	73 9f       	mul	r23, r19
    1c0a:	b0 0d       	add	r27, r0
    1c0c:	a1 1d       	adc	r26, r1
    1c0e:	62 1f       	adc	r22, r18
    1c10:	83 9f       	mul	r24, r19
    1c12:	a0 0d       	add	r26, r0
    1c14:	61 1d       	adc	r22, r1
    1c16:	22 1f       	adc	r18, r18
    1c18:	74 9f       	mul	r23, r20
    1c1a:	33 27       	eor	r19, r19
    1c1c:	a0 0d       	add	r26, r0
    1c1e:	61 1d       	adc	r22, r1
    1c20:	23 1f       	adc	r18, r19
    1c22:	84 9f       	mul	r24, r20
    1c24:	60 0d       	add	r22, r0
    1c26:	21 1d       	adc	r18, r1
    1c28:	82 2f       	mov	r24, r18
    1c2a:	76 2f       	mov	r23, r22
    1c2c:	6a 2f       	mov	r22, r26
    1c2e:	11 24       	eor	r1, r1
    1c30:	9f 57       	subi	r25, 0x7F	; 127
    1c32:	50 40       	sbci	r21, 0x00	; 0
    1c34:	8a f0       	brmi	.+34     	; 0x1c58 <__mulsf3_pse+0x84>
    1c36:	e1 f0       	breq	.+56     	; 0x1c70 <__mulsf3_pse+0x9c>
    1c38:	88 23       	and	r24, r24
    1c3a:	4a f0       	brmi	.+18     	; 0x1c4e <__mulsf3_pse+0x7a>
    1c3c:	ee 0f       	add	r30, r30
    1c3e:	ff 1f       	adc	r31, r31
    1c40:	bb 1f       	adc	r27, r27
    1c42:	66 1f       	adc	r22, r22
    1c44:	77 1f       	adc	r23, r23
    1c46:	88 1f       	adc	r24, r24
    1c48:	91 50       	subi	r25, 0x01	; 1
    1c4a:	50 40       	sbci	r21, 0x00	; 0
    1c4c:	a9 f7       	brne	.-22     	; 0x1c38 <__mulsf3_pse+0x64>
    1c4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c50:	51 05       	cpc	r21, r1
    1c52:	70 f0       	brcs	.+28     	; 0x1c70 <__mulsf3_pse+0x9c>
    1c54:	5c cf       	rjmp	.-328    	; 0x1b0e <__fp_inf>
    1c56:	a6 cf       	rjmp	.-180    	; 0x1ba4 <__fp_szero>
    1c58:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5a:	ec f3       	brlt	.-6      	; 0x1c56 <__mulsf3_pse+0x82>
    1c5c:	98 3e       	cpi	r25, 0xE8	; 232
    1c5e:	dc f3       	brlt	.-10     	; 0x1c56 <__mulsf3_pse+0x82>
    1c60:	86 95       	lsr	r24
    1c62:	77 95       	ror	r23
    1c64:	67 95       	ror	r22
    1c66:	b7 95       	ror	r27
    1c68:	f7 95       	ror	r31
    1c6a:	e7 95       	ror	r30
    1c6c:	9f 5f       	subi	r25, 0xFF	; 255
    1c6e:	c1 f7       	brne	.-16     	; 0x1c60 <__mulsf3_pse+0x8c>
    1c70:	fe 2b       	or	r31, r30
    1c72:	88 0f       	add	r24, r24
    1c74:	91 1d       	adc	r25, r1
    1c76:	96 95       	lsr	r25
    1c78:	87 95       	ror	r24
    1c7a:	97 f9       	bld	r25, 7
    1c7c:	08 95       	ret

00001c7e <__unordsf2>:
    1c7e:	23 df       	rcall	.-442    	; 0x1ac6 <__fp_cmp>
    1c80:	88 0b       	sbc	r24, r24
    1c82:	99 0b       	sbc	r25, r25
    1c84:	08 95       	ret

00001c86 <__udivmodsi4>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1c86:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1c88:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1c8a:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1c8c:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1c8e:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1c90:	0d c0       	rjmp	.+26     	; 0x1cac <__udivmodsi4_ep>

00001c92 <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1c92:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1c94:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1c96:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1c98:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1c9a:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1c9c:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1c9e:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1ca0:	f5 07       	cpc	r31, r21
__udivmodsi4_loop():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1ca2:	20 f0       	brcs	.+8      	; 0x1cac <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1ca4:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1ca6:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1ca8:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1caa:	f5 0b       	sbc	r31, r21

00001cac <__udivmodsi4_ep>:
__udivmodsi4_ep():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1cac:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1cae:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1cb0:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1cb2:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1cb4:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1cb6:	69 f7       	brne	.-38     	; 0x1c92 <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1cb8:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1cba:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1cbc:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1cbe:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1cc0:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1cc2:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1cc4:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1cc6:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1cc8:	08 95       	ret

00001cca <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1cca:	12 d0       	rcall	.+36     	; 0x1cf0 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1ccc:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1cce:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1cd0:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1cd2:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1cd4:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1cd6:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1cd8:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1cda:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1cdc:	08 95       	ret

00001cde <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1cde:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1ce0:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    1ce2:	00 24       	eor	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    1ce4:	00 1c       	adc	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    1ce6:	0b be       	out	0x3b, r0	; 59
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    1ce8:	07 90       	elpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    1cea:	f6 91       	elpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    1cec:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    1cee:	09 94       	ijmp

00001cf0 <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1cf0:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1cf2:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1cf4:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1cf6:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1cf8:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1cfa:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1cfc:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1cfe:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1d00:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1d02:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1d04:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1d06:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1d08:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1d0a:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1d0c:	08 95       	ret

00001d0e <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1d0e:	f8 94       	cli

00001d10 <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1d10:	ff cf       	rjmp	.-2      	; 0x1d10 <__stop_program>

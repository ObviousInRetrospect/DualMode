
/private/var/folders/jp/8cvzydc904n1td9j3y4ntcgm0000gn/T/arduino-sketch-A693075986D8149E02339963D9CBA8D8/DualModeExample.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	e2 c0       	rjmp	.+452    	; 0x1c6 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	13 c1       	rjmp	.+550    	; 0x22c <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	11 c1       	rjmp	.+546    	; 0x22c <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	0f c1       	rjmp	.+542    	; 0x22c <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	0d c1       	rjmp	.+538    	; 0x22c <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	0b c1       	rjmp	.+534    	; 0x22c <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	72 c7       	rjmp	.+3812   	; 0xefe <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	07 c1       	rjmp	.+526    	; 0x22c <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	05 c1       	rjmp	.+522    	; 0x22c <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	03 c1       	rjmp	.+518    	; 0x22c <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	01 c1       	rjmp	.+514    	; 0x22c <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	ff c0       	rjmp	.+510    	; 0x22c <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	fd c0       	rjmp	.+506    	; 0x22c <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	fb c0       	rjmp	.+502    	; 0x22c <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	f9 c0       	rjmp	.+498    	; 0x22c <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	f7 c0       	rjmp	.+494    	; 0x22c <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	f5 c0       	rjmp	.+490    	; 0x22c <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	f3 c0       	rjmp	.+486    	; 0x22c <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	9c c6       	rjmp	.+3384   	; 0xd82 <__vector_18>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	ef c0       	rjmp	.+478    	; 0x22c <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	ed c0       	rjmp	.+474    	; 0x22c <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	29 c6       	rjmp	.+3154   	; 0xca8 <__vector_21>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	22 c6       	rjmp	.+3140   	; 0xc9e <__vector_22>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	2a c6       	rjmp	.+3156   	; 0xcb2 <__vector_23>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	e5 c0       	rjmp	.+458    	; 0x22c <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	e3 c0       	rjmp	.+454    	; 0x22c <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	e1 c0       	rjmp	.+450    	; 0x22c <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	df c0       	rjmp	.+446    	; 0x22c <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	dd c0       	rjmp	.+442    	; 0x22c <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	db c0       	rjmp	.+438    	; 0x22c <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	d9 c0       	rjmp	.+434    	; 0x22c <__bad_interrupt>
      7a:	00 00       	nop
../../../../crt1/gcrt1.S:97
      7c:	e8 c5       	rjmp	.+3024   	; 0xc4e <__vector_31>
      7e:	00 00       	nop
../../../../crt1/gcrt1.S:98
      80:	d5 c0       	rjmp	.+426    	; 0x22c <__bad_interrupt>
      82:	00 00       	nop
../../../../crt1/gcrt1.S:99
      84:	d3 c0       	rjmp	.+422    	; 0x22c <__bad_interrupt>
      86:	00 00       	nop
../../../../crt1/gcrt1.S:100
      88:	d1 c0       	rjmp	.+418    	; 0x22c <__bad_interrupt>
      8a:	00 00       	nop
../../../../crt1/gcrt1.S:101
      8c:	cf c0       	rjmp	.+414    	; 0x22c <__bad_interrupt>
      8e:	00 00       	nop
../../../../crt1/gcrt1.S:102
      90:	cd c0       	rjmp	.+410    	; 0x22c <__bad_interrupt>
      92:	00 00       	nop
../../../../crt1/gcrt1.S:103
      94:	cb c0       	rjmp	.+406    	; 0x22c <__bad_interrupt>
      96:	00 00       	nop
../../../../crt1/gcrt1.S:104
      98:	c9 c0       	rjmp	.+402    	; 0x22c <__bad_interrupt>
      9a:	00 00       	nop
../../../../crt1/gcrt1.S:105
      9c:	c7 c0       	rjmp	.+398    	; 0x22c <__bad_interrupt>
      9e:	00 00       	nop
../../../../crt1/gcrt1.S:106
      a0:	c5 c0       	rjmp	.+394    	; 0x22c <__bad_interrupt>
      a2:	00 00       	nop
../../../../crt1/gcrt1.S:107
      a4:	c3 c0       	rjmp	.+390    	; 0x22c <__bad_interrupt>
      a6:	00 00       	nop
../../../../crt1/gcrt1.S:108
      a8:	07 c7       	rjmp	.+3598   	; 0xeb8 <__vector_42>
      aa:	00 00       	nop
../../../../crt1/gcrt1.S:109
      ac:	bf c0       	rjmp	.+382    	; 0x22c <__bad_interrupt>
	...

000000b0 <__trampolines_end>:
__trampolines_start():
      b0:	52 54       	subi	r21, 0x42	; 66
      b2:	43 20       	and	r4, r3
      b4:	69 6e       	ori	r22, 0xE9	; 233
      b6:	69 74       	andi	r22, 0x49	; 73
      b8:	69 61       	ori	r22, 0x19	; 25
      ba:	6c 69       	ori	r22, 0x9C	; 156
      bc:	7a 65       	ori	r23, 0x5A	; 90
      be:	64 20       	and	r6, r4
      c0:	75 73       	andi	r23, 0x35	; 53
      c2:	69 6e       	ori	r22, 0xE9	; 233
      c4:	67 20       	and	r6, r7
      c6:	58 4f       	sbci	r21, 0xF8	; 248
      c8:	53 43       	sbci	r21, 0x33	; 51
      ca:	33 32       	cpi	r19, 0x23	; 35
      cc:	4b 00       	.word	0x004b	; ????

000000ce <RTC_init()::__c>:
      ce:	58 4f 53 43 33 32 4b 20 73 74 61 72 74 65 64 2e     XOSC32K started.
      de:	20 49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54      Initializing RT
      ee:	43 2e 00                                            C..

000000f1 <RTC_init()::__c>:
      f1:	52 54 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 20     RTC initialized 
     101:	75 73 69 6e 67 20 4f 53 43 55 4c 50 33 32 4b 00     using OSCULP32K.

00000111 <RTC_init()::__c>:
     111:	58 4f 53 43 33 32 4b 20 73 74 61 72 74 75 70 20     XOSC32K startup 
     121:	46 41 49 4c 45 44 00                                FAILED.

00000128 <RTC_init()::__c>:
     128:	43 4c 4b 43 54 52 4c 5f 58 4f 53 43 33 32 4b 53     CLKCTRL_XOSC32KS
     138:	5f 62 6d 3a 20 00                                   _bm: .

0000013e <RTC_init()::__c>:
     13e:	4d 43 4c 4b 53 54 41 54 55 53 3a 20 00              MCLKSTATUS: .

0000014b <RTC_init()::__c>:
     14b:	58 4f 53 43 33 32 4b 43 54 52 4c 41 3a 20 00        XOSC32KCTRLA: .

0000015a <RTC_init()::__c>:
     15a:	57 61 69 74 69 6e 67 20 66 6f 72 20 58 4f 53 43     Waiting for XOSC
     16a:	33 32 4b 20 74 6f 20 73 74 61 72 74 2e 2e 2e 00     32K to start....

0000017a <crc32_table>:
     17a:	00 00 00 00 64 10 b7 1d c8 20 6e 3b ac 30 d9 26     ....d.... n;.0.&
     18a:	90 41 dc 76 f4 51 6b 6b 58 61 b2 4d 3c 71 05 50     .A.v.QkkXa.M<q.P
     19a:	20 83 b8 ed 44 93 0f f0 e8 a3 d6 d6 8c b3 61 cb      ...D.........a.
     1aa:	b0 c2 64 9b d4 d2 d3 86 78 e2 0a a0 1c f2 bd bd     ..d.....x.......

000001ba <_usart0_pins>:
     1ba:	00 00 02 01 04 06 03 00 03 00                       ..........

000001c4 <__ctors_start>:
__ctors_start():
     1c4:	a9 07       	cpc	r26, r25

000001c6 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     1c6:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     1c8:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     1ca:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     1cc:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     1ce:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
     1d0:	de bf       	out	0x3e, r29	; 62

000001d2 <_initThreeStuff()>:
init_reset_flags():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:100

  /* Minimum: Reset if we wound up here through malfunction - this relies on user clearing the  *
   * register on startup, which is rarely done in Arduino land.                                 */
  void __attribute__((weak)) init_reset_flags() ;
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
     1d2:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x7f0040>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:101
    RSTCTRL.RSTFR = flags;
     1d6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7f0040>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:102
    if (flags == 0) {
     1da:	81 11       	cpse	r24, r1
     1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <_initThreeStuff()+0x16>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:103
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
     1de:	98 ed       	ldi	r25, 0xD8	; 216
     1e0:	21 e0       	ldi	r18, 0x01	; 1
     1e2:	94 bf       	out	0x34, r25	; 52
     1e4:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <__TEXT_REGION_LENGTH__+0x7f0041>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:105
    }
    GPIOR0 = flags;
     1e8:	8c bb       	out	0x1c, r24	; 28

000001ea <__do_copy_data>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     1ea:	11 e6       	ldi	r17, 0x61	; 97
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     1ec:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     1ee:	b0 e6       	ldi	r27, 0x60	; 96
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     1f0:	e2 e3       	ldi	r30, 0x32	; 50
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     1f2:	fc e1       	ldi	r31, 0x1C	; 28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <__do_copy_data+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     1f6:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     1f8:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     1fa:	a6 31       	cpi	r26, 0x16	; 22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     1fc:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     1fe:	d9 f7       	brne	.-10     	; 0x1f6 <__do_copy_data+0xc>

00000200 <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     200:	23 e6       	ldi	r18, 0x63	; 99
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     202:	a6 e1       	ldi	r26, 0x16	; 22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     204:	b1 e6       	ldi	r27, 0x61	; 97
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     206:	01 c0       	rjmp	.+2      	; 0x20a <.do_clear_bss_start>

00000208 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     208:	1d 92       	st	X+, r1

0000020a <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     20a:	a2 3d       	cpi	r26, 0xD2	; 210
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     20c:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     20e:	e1 f7       	brne	.-8      	; 0x208 <.do_clear_bss_loop>

00000210 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     210:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     212:	c3 ee       	ldi	r28, 0xE3	; 227
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     214:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     216:	04 c0       	rjmp	.+8      	; 0x220 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     218:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     21a:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     21c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     220:	c2 3e       	cpi	r28, 0xE2	; 226
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     222:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     224:	c9 f7       	brne	.-14     	; 0x218 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     226:	c2 d6       	rcall	.+3460   	; 0xfac <main>
../../../../crt1/gcrt1.S:315
     228:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <_exit>

0000022c <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     22c:	e9 ce       	rjmp	.-558    	; 0x0 <__vectors>

0000022e <TWI_MasterWrite.constprop.64>:
TWI_MasterWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:311
  #else                                                   // Separate tx/rx Buffers
    uint8_t* txHead   = &(_data->_bytesToWrite);
    uint8_t* txBuffer =   _data->_txBuffer;
  #endif

  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
     22e:	e0 91 3c 62 	lds	r30, 0x623C	; 0x80623c <Wire+0xc>
     232:	f0 91 3d 62 	lds	r31, 0x623D	; 0x80623d <Wire+0xd>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:320
  uint8_t currentStatus;
  uint8_t dataWritten = 0;
  uint16_t timeout = 0;


    if (((module->MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_UNKNOWN_gc) || // If the bus was not initialized
     236:	85 81       	ldd	r24, Z+5	; 0x05
     238:	83 70       	andi	r24, 0x03	; 3
     23a:	09 f4       	brne	.+2      	; 0x23e <TWI_MasterWrite.constprop.64+0x10>
     23c:	42 c0       	rjmp	.+132    	; 0x2c2 <TWI_MasterWrite.constprop.64+0x94>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:321
      ((module->MCTRLA & TWI_ENABLE_bm) == false)) {  // Or is disabled,
     23e:	83 81       	ldd	r24, Z+3	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:320
  uint8_t currentStatus;
  uint8_t dataWritten = 0;
  uint16_t timeout = 0;


    if (((module->MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_UNKNOWN_gc) || // If the bus was not initialized
     240:	80 ff       	sbrs	r24, 0
     242:	3f c0       	rjmp	.+126    	; 0x2c2 <TWI_MasterWrite.constprop.64+0x94>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:349
        TWI_SET_ERROR(TWI_ERR_BUS_ARB);         // set error flag
        break;                                  // leave TX loop
    }

    if (currentSM == TWI_BUSSTATE_IDLE_gc) {                      // Bus has not sent START yet and is not BUSY
        module->MADDR = ADD_WRITE_BIT(_data->_clientAddress);
     244:	50 91 40 62 	lds	r21, 0x6240	; 0x806240 <Wire+0x10>
     248:	5e 7f       	andi	r21, 0xFE	; 254
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:317
                                      // creates bloat-y code, this fixes it
  TWI_INIT_ERROR;
  uint8_t currentSM;
  uint8_t currentStatus;
  uint8_t dataWritten = 0;
  uint16_t timeout = 0;
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	20 e0       	ldi	r18, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:316
  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
                                      // creates bloat-y code, this fixes it
  TWI_INIT_ERROR;
  uint8_t currentSM;
  uint8_t currentStatus;
  uint8_t dataWritten = 0;
     24e:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:326
      ((module->MCTRLA & TWI_ENABLE_bm) == false)) {  // Or is disabled,
      return TWI_ERR_UNINIT;                          // return
    }

  while (true) {
    currentStatus = module->MSTATUS;
     250:	45 81       	ldd	r20, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:327
    currentSM = currentStatus & TWI_BUSSTATE_gm;  // get the current mode of the state machine
     252:	84 2f       	mov	r24, r20
     254:	83 70       	andi	r24, 0x03	; 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:330

    #if defined(TWI_TIMEOUT_ENABLE)
      if (++timeout > (F_CPU/1000)) {
     256:	2f 5f       	subi	r18, 0xFF	; 255
     258:	3f 4f       	sbci	r19, 0xFF	; 255
     25a:	21 31       	cpi	r18, 0x11	; 17
     25c:	67 e2       	ldi	r22, 0x27	; 39
     25e:	36 07       	cpc	r19, r22
     260:	40 f0       	brcs	.+16     	; 0x272 <TWI_MasterWrite.constprop.64+0x44>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:331
        if        (currentSM == TWI_BUSSTATE_OWNER_gc) {
     262:	82 30       	cpi	r24, 0x02	; 2
     264:	41 f1       	breq	.+80     	; 0x2b6 <TWI_MasterWrite.constprop.64+0x88>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:333
          TWI_SET_ERROR(TWI_ERR_TIMEOUT);
        } else if (currentSM == TWI_BUSSTATE_IDLE_gc) {
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	41 f1       	breq	.+80     	; 0x2ba <TWI_MasterWrite.constprop.64+0x8c>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:336
          TWI_SET_ERROR(TWI_ERR_PULLUP);
        } else {
          TWI_SET_ERROR(TWI_ERR_UNDEFINED);
     26a:	84 e0       	ldi	r24, 0x04	; 4
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:372
    }
  }


  if ((send_stop != 0) || (TWI_ERR_SUCCESS != TWI_GET_ERROR)) {
    module->MCTRLB = TWI_MCMD_STOP_gc;                        // Send STOP
     26c:	93 e0       	ldi	r25, 0x03	; 3
     26e:	94 83       	std	Z+4, r25	; 0x04
     270:	08 95       	ret
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:342
        }
        break;
      }
    #endif

    if   (currentStatus & TWI_ARBLOST_bm) {     // Check for Bus error
     272:	43 ff       	sbrs	r20, 3
     274:	04 c0       	rjmp	.+8      	; 0x27e <TWI_MasterWrite.constprop.64+0x50>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:343
        module->MSTATUS = TWI_ARBLOST_bm;       // reset error flags
     276:	88 e0       	ldi	r24, 0x08	; 8
     278:	85 83       	std	Z+5, r24	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:344
        TWI_SET_ERROR(TWI_ERR_BUS_ARB);         // set error flag
     27a:	82 e1       	ldi	r24, 0x12	; 18
     27c:	f7 cf       	rjmp	.-18     	; 0x26c <TWI_MasterWrite.constprop.64+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:348
        break;                                  // leave TX loop
    }

    if (currentSM == TWI_BUSSTATE_IDLE_gc) {                      // Bus has not sent START yet and is not BUSY
     27e:	81 30       	cpi	r24, 0x01	; 1
     280:	21 f4       	brne	.+8      	; 0x28a <TWI_MasterWrite.constprop.64+0x5c>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:349
        module->MADDR = ADD_WRITE_BIT(_data->_clientAddress);
     282:	57 83       	std	Z+7, r21	; 0x07
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:361
          break;                                                  // leave loop
        } else {                                                  // otherwise WRITE was ACKed
          if (dataWritten < (*txHead)) {                          // check if there is data to be written
            module->MDATA = txBuffer[dataWritten];                // Writing to the register to send data
            dataWritten++;                                        // data was Written
            timeout = 0;                                          // reset timeout
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	e3 cf       	rjmp	.-58     	; 0x250 <TWI_MasterWrite.constprop.64+0x22>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:351
    }

    if (currentSM == TWI_BUSSTATE_IDLE_gc) {                      // Bus has not sent START yet and is not BUSY
        module->MADDR = ADD_WRITE_BIT(_data->_clientAddress);
        timeout = 0;
    } else if (currentSM == TWI_BUSSTATE_OWNER_gc) {              // Address was sent, host is owner
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	09 f7       	brne	.-62     	; 0x250 <TWI_MasterWrite.constprop.64+0x22>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:352
      if     (currentStatus & TWI_WIF_bm) {                       // data sent
     28e:	46 ff       	sbrs	r20, 6
     290:	df cf       	rjmp	.-66     	; 0x250 <TWI_MasterWrite.constprop.64+0x22>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:353
        if   (currentStatus & TWI_RXACK_bm) {                     // AND the RXACK bit is set, last byte has failed
     292:	44 ff       	sbrs	r20, 4
     294:	04 c0       	rjmp	.+8      	; 0x29e <TWI_MasterWrite.constprop.64+0x70>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:354
          if (dataWritten == 0) TWI_SET_ERROR(TWI_ERR_ACK_ADR);   // if dataWritten is 0, no payload was sent, so address was NACKed
     296:	99 23       	and	r25, r25
     298:	49 f3       	breq	.-46     	; 0x26c <TWI_MasterWrite.constprop.64+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:355
          else                  TWI_SET_ERROR(TWI_ERR_ACK_DAT);   // else payload was NACKed
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	e7 cf       	rjmp	.-50     	; 0x26c <TWI_MasterWrite.constprop.64+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:358
          break;                                                  // leave loop
        } else {                                                  // otherwise WRITE was ACKed
          if (dataWritten < (*txHead)) {                          // check if there is data to be written
     29e:	80 91 41 62 	lds	r24, 0x6241	; 0x806241 <Wire+0x11>
     2a2:	98 17       	cp	r25, r24
     2a4:	60 f4       	brcc	.+24     	; 0x2be <TWI_MasterWrite.constprop.64+0x90>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:359
            module->MDATA = txBuffer[dataWritten];                // Writing to the register to send data
     2a6:	a9 2f       	mov	r26, r25
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	a4 5b       	subi	r26, 0xB4	; 180
     2ac:	bd 49       	sbci	r27, 0x9D	; 157
     2ae:	8c 91       	ld	r24, X
     2b0:	80 87       	std	Z+8, r24	; 0x08
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:360
            dataWritten++;                                        // data was Written
     2b2:	9f 5f       	subi	r25, 0xFF	; 255
     2b4:	e7 cf       	rjmp	.-50     	; 0x284 <TWI_MasterWrite.constprop.64+0x56>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:332
    currentSM = currentStatus & TWI_BUSSTATE_gm;  // get the current mode of the state machine

    #if defined(TWI_TIMEOUT_ENABLE)
      if (++timeout > (F_CPU/1000)) {
        if        (currentSM == TWI_BUSSTATE_OWNER_gc) {
          TWI_SET_ERROR(TWI_ERR_TIMEOUT);
     2b6:	85 e0       	ldi	r24, 0x05	; 5
     2b8:	d9 cf       	rjmp	.-78     	; 0x26c <TWI_MasterWrite.constprop.64+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:334
        } else if (currentSM == TWI_BUSSTATE_IDLE_gc) {
          TWI_SET_ERROR(TWI_ERR_PULLUP);
     2ba:	81 e1       	ldi	r24, 0x11	; 17
     2bc:	d7 cf       	rjmp	.-82     	; 0x26c <TWI_MasterWrite.constprop.64+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:313
    uint8_t* txBuffer =   _data->_txBuffer;
  #endif

  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
                                      // creates bloat-y code, this fixes it
  TWI_INIT_ERROR;
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	d5 cf       	rjmp	.-86     	; 0x26c <TWI_MasterWrite.constprop.64+0x3e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:322
  uint16_t timeout = 0;


    if (((module->MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_UNKNOWN_gc) || // If the bus was not initialized
      ((module->MCTRLA & TWI_ENABLE_bm) == false)) {  // Or is disabled,
      return TWI_ERR_UNINIT;                          // return
     2c2:	80 e1       	ldi	r24, 0x10	; 16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:375

  if ((send_stop != 0) || (TWI_ERR_SUCCESS != TWI_GET_ERROR)) {
    module->MCTRLB = TWI_MCMD_STOP_gc;                        // Send STOP
  }
  return TWI_GET_ERROR;
}
     2c4:	08 95       	ret

000002c6 <NotifyUser_onReceive.constprop.10>:
NotifyUser_onReceive():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:783
      rxHead   = &(_data->_bytesToReadWrite);
    #else
      rxHead   = &(_data->_bytesToRead);
    #endif
  #endif
  if (_data->user_onReceive != NULL) {
     2c6:	e0 91 4a 62 	lds	r30, 0x624A	; 0x80624a <Wire+0x1a>
     2ca:	f0 91 4b 62 	lds	r31, 0x624B	; 0x80624b <Wire+0x1b>
     2ce:	30 97       	sbiw	r30, 0x00	; 0
     2d0:	31 f0       	breq	.+12     	; 0x2de <NotifyUser_onReceive.constprop.10+0x18>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:784
    if ((*rxHead) > 0) {
     2d2:	80 91 46 62 	lds	r24, 0x6246	; 0x806246 <Wire+0x16>
     2d6:	88 23       	and	r24, r24
     2d8:	11 f0       	breq	.+4      	; 0x2de <NotifyUser_onReceive.constprop.10+0x18>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:785
      _data->user_onReceive((*rxHead));
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	09 94       	ijmp
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:788
    }
  }
}
     2de:	08 95       	ret

000002e0 <micros>:
micros():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:210
      #else
        uint8_t ticks;
      #endif
      uint8_t flags;
      /* Save current state and disable interrupts */
      uint8_t oldSREG = SREG;
     2e0:	9f b7       	in	r25, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:211
      cli();
     2e2:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:226
        TCD0.CTRLE = TCD_SCAPTUREA_bm;
        while (!(TCD0.STATUS & TCD_CMDRDY_bm)); // wait for sync - should be only one iteration of this loop
        flags = TCD0.INTFLAGS;
        ticks = TCD0.CAPTUREA;
      #else
        ticks = _timer->CNT;
     2e4:	e0 91 2a 0b 	lds	r30, 0x0B2A	; 0x800b2a <__TEXT_REGION_LENGTH__+0x7f0b2a>
     2e8:	f0 91 2b 0b 	lds	r31, 0x0B2B	; 0x800b2b <__TEXT_REGION_LENGTH__+0x7f0b2b>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:227
        flags = _timer->INTFLAGS;
     2ec:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7f0b26>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:238
       * Next, get the current number of overflows
       */
      #if defined(MILLIS_USE_TIMERA0) || defined(MILLIS_USE_TIMERA1) || defined(MILLIS_USE_TIMERD0)
        overflows = timer_overflow_count;
      #else
        overflows = timer_millis;
     2f0:	20 91 95 61 	lds	r18, 0x6195	; 0x806195 <timer_millis>
     2f4:	30 91 96 61 	lds	r19, 0x6196	; 0x806196 <timer_millis+0x1>
     2f8:	40 91 97 61 	lds	r20, 0x6197	; 0x806197 <timer_millis+0x2>
     2fc:	50 91 98 61 	lds	r21, 0x6198	; 0x806198 <timer_millis+0x3>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:242
      #endif

      /* Turn interrupts back on, assuming they were on when micros was called. */
      SREG = oldSREG;
     300:	9f bf       	out	0x3f, r25	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:263
          }
        #else
          // here, ticks is F_CPU/2000 so it's trickier to pick something to check against.
          // Why not just do a damned normal compare? that bitwise and saved like 2-3 clocks, and vastly decreased our tolerance to disabled interrupts.
          #define OVERFLOW_THRESHOLD ((F_CPU / 2000) - 500)
          if ((flags & TCB_CAPT_bm) && (ticks < OVERFLOW_THRESHOLD)) {
     302:	80 ff       	sbrs	r24, 0
     304:	08 c0       	rjmp	.+16     	; 0x316 <micros+0x36>
     306:	e4 39       	cpi	r30, 0x94	; 148
     308:	81 e1       	ldi	r24, 0x11	; 17
     30a:	f8 07       	cpc	r31, r24
     30c:	20 f4       	brcc	.+8      	; 0x316 <micros+0x36>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:264
            overflows++;
     30e:	2f 5f       	subi	r18, 0xFF	; 255
     310:	3f 4f       	sbci	r19, 0xFF	; 255
     312:	4f 4f       	sbci	r20, 0xFF	; 255
     314:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:476
         * 46 replaced with 25 save 21 clocks @ 10 = 2.5 us saved
         * 56 replaced with 27 save 29 clocks @ 20 = 1.5 us saved
         * 66 replaced with 29 save 37 clocks @ 40 = 1 us saved
         */
        #elif (F_CPU == 40000000UL || F_CPU == 20000000UL || F_CPU == 10000000UL || F_CPU == 5000000UL)
          __asm__ __volatile__(
     316:	0f 01       	movw	r0, r30
     318:	16 94       	lsr	r1
     31a:	07 94       	ror	r0
     31c:	16 94       	lsr	r1
     31e:	07 94       	ror	r0
     320:	f0 01       	movw	r30, r0
     322:	16 94       	lsr	r1
     324:	07 94       	ror	r0
     326:	16 94       	lsr	r1
     328:	07 94       	ror	r0
     32a:	e0 19       	sub	r30, r0
     32c:	f1 09       	sbc	r31, r1
     32e:	16 94       	lsr	r1
     330:	07 94       	ror	r0
     332:	06 94       	lsr	r0
     334:	10 2c       	mov	r1, r0
     336:	16 94       	lsr	r1
     338:	16 94       	lsr	r1
     33a:	01 18       	sub	r0, r1
     33c:	16 94       	lsr	r1
     33e:	16 94       	lsr	r1
     340:	01 0c       	add	r0, r1
     342:	11 24       	eor	r1, r1
     344:	e0 0d       	add	r30, r0
     346:	f1 1d       	adc	r31, r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:513
            "add r0,r1"     "\n\t"  // + ticks >> 8
            "eor r1,r1"     "\n\t"  // restore zero_reg
            "add %A0,r0"    "\n\t"  // add to the shifted ticks
            "adc %B0,r1"    "\n"    // carry
            : "+r" (ticks));        // Do the rest in C
          microseconds = overflows * 1000 + ticks;
     348:	a8 ee       	ldi	r26, 0xE8	; 232
     34a:	b3 e0       	ldi	r27, 0x03	; 3
     34c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__muluhisi3>
     350:	6e 0f       	add	r22, r30
     352:	7f 1f       	adc	r23, r31
     354:	81 1d       	adc	r24, r1
     356:	91 1d       	adc	r25, r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:614
          microseconds = ((overflows *  clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                            + (ticks * (clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
        #endif
      #endif // end of timer-specific part of micros calculations
      return microseconds;
    }
     358:	08 95       	ret

0000035a <delay>:
delay():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:649

#if (!(defined(MILLIS_USE_TIMERNONE) || defined(MILLIS_USE_TIMERRTC) || (F_CPU == 7000000L || F_CPU == 14000000)))
  // delay implementation when we do have micros() - we know it won't work at 7 or 14, and those can be generated
  // from internal, and switch logic is in even though micros isn't.
  void delay(unsigned long ms)
  {
     35a:	8f 92       	push	r8
     35c:	9f 92       	push	r9
     35e:	af 92       	push	r10
     360:	bf 92       	push	r11
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	4b 01       	movw	r8, r22
     36c:	5c 01       	movw	r10, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:650
    uint32_t start = micros();
     36e:	b8 df       	rcall	.-144    	; 0x2e0 <micros>
     370:	6b 01       	movw	r12, r22
     372:	7c 01       	movw	r14, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:653
    while (ms > 0) {
      yield();
      while (ms > 0 && (micros() - start) >= 1000) {
     374:	b5 df       	rcall	.-150    	; 0x2e0 <micros>
     376:	6c 19       	sub	r22, r12
     378:	7d 09       	sbc	r23, r13
     37a:	8e 09       	sbc	r24, r14
     37c:	9f 09       	sbc	r25, r15
     37e:	68 3e       	cpi	r22, 0xE8	; 232
     380:	73 40       	sbci	r23, 0x03	; 3
     382:	81 05       	cpc	r24, r1
     384:	91 05       	cpc	r25, r1
     386:	b0 f3       	brcs	.-20     	; 0x374 <delay+0x1a>
     388:	21 e0       	ldi	r18, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:654
        ms--;
     38a:	82 1a       	sub	r8, r18
     38c:	91 08       	sbc	r9, r1
     38e:	a1 08       	sbc	r10, r1
     390:	b1 08       	sbc	r11, r1
     392:	88 ee       	ldi	r24, 0xE8	; 232
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:655
        start += 1000;
     394:	c8 0e       	add	r12, r24
     396:	83 e0       	ldi	r24, 0x03	; 3
     398:	d8 1e       	adc	r13, r24
     39a:	e1 1c       	adc	r14, r1
     39c:	f1 1c       	adc	r15, r1
     39e:	81 14       	cp	r8, r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:653
  void delay(unsigned long ms)
  {
    uint32_t start = micros();
    while (ms > 0) {
      yield();
      while (ms > 0 && (micros() - start) >= 1000) {
     3a0:	91 04       	cpc	r9, r1
     3a2:	a1 04       	cpc	r10, r1
     3a4:	b1 04       	cpc	r11, r1
     3a6:	31 f7       	brne	.-52     	; 0x374 <delay+0x1a>
     3a8:	ff 90       	pop	r15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:658
        ms--;
        start += 1000;
      }
    }
  }
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	cf 90       	pop	r12
     3b0:	bf 90       	pop	r11
     3b2:	af 90       	pop	r10
     3b4:	9f 90       	pop	r9
     3b6:	8f 90       	pop	r8
     3b8:	08 95       	ret

000003ba <Print::write(unsigned char const*, unsigned int)>:
write():
     3ba:	af 92       	push	r10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:30

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     3bc:	bf 92       	push	r11
     3be:	cf 92       	push	r12
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	6c 01       	movw	r12, r24
     3d0:	7b 01       	movw	r14, r22
     3d2:	8b 01       	movw	r16, r22
     3d4:	04 0f       	add	r16, r20
     3d6:	15 1f       	adc	r17, r21
     3d8:	eb 01       	movw	r28, r22
     3da:	5e 01       	movw	r10, r28
     3dc:	ae 18       	sub	r10, r14
     3de:	bf 08       	sbc	r11, r15
     3e0:	c0 17       	cp	r28, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:32
  size_t n = 0;
  while (size--) {
     3e2:	d1 07       	cpc	r29, r17
     3e4:	59 f0       	breq	.+22     	; 0x3fc <Print::write(unsigned char const*, unsigned int)+0x42>
     3e6:	69 91       	ld	r22, Y+
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:33
    if (write(*buffer++)) n++;
     3e8:	d6 01       	movw	r26, r12
     3ea:	ed 91       	ld	r30, X+
     3ec:	fc 91       	ld	r31, X
     3ee:	01 90       	ld	r0, Z+
     3f0:	f0 81       	ld	r31, Z
     3f2:	e0 2d       	mov	r30, r0
     3f4:	c6 01       	movw	r24, r12
     3f6:	09 95       	icall
     3f8:	89 2b       	or	r24, r25
     3fa:	79 f7       	brne	.-34     	; 0x3da <Print::write(unsigned char const*, unsigned int)+0x20>
     3fc:	c5 01       	movw	r24, r10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:37
    else break;
  }
  return n;
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	bf 90       	pop	r11
     410:	af 90       	pop	r10
     412:	08 95       	ret

00000414 <UartClass::availableForWrite()>:
availableForWrite():
     414:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:458
int UartClass::availableForWrite(void) {
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     416:	55 89       	ldd	r21, Z+21	; 0x15
     418:	46 89       	ldd	r20, Z+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:459
    tail = _tx_buffer_tail;
     41a:	25 2f       	mov	r18, r21
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	84 2f       	mov	r24, r20
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	82 1b       	sub	r24, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:462
  }
  if (head >= tail) {
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     424:	93 0b       	sbc	r25, r19
     426:	54 17       	cp	r21, r20
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:461

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    tail = _tx_buffer_tail;
  }
  if (head >= tail) {
     428:	10 f0       	brcs	.+4      	; 0x42e <UartClass::availableForWrite()+0x1a>
     42a:	cf 96       	adiw	r24, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:462
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     42c:	08 95       	ret
     42e:	01 97       	sbiw	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:464
  }
  return tail - head - 1;
     430:	08 95       	ret

00000432 <UartClass::read()>:
read():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:465
}
     432:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:442
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}

int UartClass::read(void) {
     434:	93 89       	ldd	r25, Z+19	; 0x13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:444
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     436:	84 89       	ldd	r24, Z+20	; 0x14
     438:	98 17       	cp	r25, r24
     43a:	61 f0       	breq	.+24     	; 0x454 <UartClass::read()+0x22>
     43c:	a4 89       	ldd	r26, Z+20	; 0x14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:447
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     43e:	ae 0f       	add	r26, r30
     440:	bf 2f       	mov	r27, r31
     442:	b1 1d       	adc	r27, r1
     444:	57 96       	adiw	r26, 0x17	; 23
     446:	8c 91       	ld	r24, X
     448:	94 89       	ldd	r25, Z+20	; 0x14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:448
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1);   // % SERIAL_RX_BUFFER_SIZE;
     44a:	9f 5f       	subi	r25, 0xFF	; 255
     44c:	9f 73       	andi	r25, 0x3F	; 63
     44e:	94 8b       	std	Z+20, r25	; 0x14
     450:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:449
    return c;
     452:	08 95       	ret
     454:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:445
}

int UartClass::read(void) {
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     456:	9f ef       	ldi	r25, 0xFF	; 255
     458:	08 95       	ret

0000045a <UartClass::peek()>:
peek():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:451
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1);   // % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     45a:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:434

int UartClass::available(void) {
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
}

int UartClass::peek(void) {
     45c:	93 89       	ldd	r25, Z+19	; 0x13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:435
  if (_rx_buffer_head == _rx_buffer_tail) {
     45e:	84 89       	ldd	r24, Z+20	; 0x14
     460:	98 17       	cp	r25, r24
     462:	31 f0       	breq	.+12     	; 0x470 <UartClass::peek()+0x16>
     464:	84 89       	ldd	r24, Z+20	; 0x14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:438
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     466:	e8 0f       	add	r30, r24
     468:	f1 1d       	adc	r31, r1
     46a:	87 89       	ldd	r24, Z+23	; 0x17
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	08 95       	ret
     470:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:436
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
}

int UartClass::peek(void) {
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     472:	9f ef       	ldi	r25, 0xFF	; 255
     474:	08 95       	ret

00000476 <UartClass::available()>:
available():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:440
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     476:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:430
  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
}

int UartClass::available(void) {
     478:	93 89       	ldd	r25, Z+19	; 0x13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:431
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
     47a:	24 89       	ldd	r18, Z+20	; 0x14
     47c:	89 2f       	mov	r24, r25
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	80 5c       	subi	r24, 0xC0	; 192
     482:	9f 4f       	sbci	r25, 0xFF	; 255
     484:	82 1b       	sub	r24, r18
     486:	91 09       	sbc	r25, r1
     488:	8f 73       	andi	r24, 0x3F	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:432
}
     48a:	99 27       	eor	r25, r25
     48c:	08 95       	ret

0000048e <UartClass::end()>:
end():
     48e:	cf 93       	push	r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:415
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_usart_pins, _mux_count, _pin_set, setpinmask);
  SREG=oldSREG;
}

void UartClass::end() {
     490:	df 93       	push	r29
     492:	ec 01       	movw	r28, r24
     494:	e8 81       	ld	r30, Y
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:417
  // wait for transmission of outgoing data
  flush();
     496:	f9 81       	ldd	r31, Y+1	; 0x01
     498:	06 80       	ldd	r0, Z+6	; 0x06
     49a:	f7 81       	ldd	r31, Z+7	; 0x07
     49c:	e0 2d       	mov	r30, r0
     49e:	09 95       	icall
     4a0:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:419
  // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
  volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
     4a2:	fd 85       	ldd	r31, Y+13	; 0x0d
     4a4:	86 81       	ldd	r24, Z+6	; 0x06
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:420
  temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
     4a6:	16 82       	std	Z+6, r1	; 0x06
     4a8:	85 81       	ldd	r24, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:421
  temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
     4aa:	15 82       	std	Z+5, r1	; 0x05
     4ac:	80 e4       	ldi	r24, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:422
  temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error. TXCIE only used in half duplex
     4ae:	84 83       	std	Z+4, r24	; 0x04
     4b0:	8c 89       	ldd	r24, Y+20	; 0x14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:424
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     4b2:	8b 8b       	std	Y+19, r24	; 0x13
     4b4:	1a 8a       	std	Y+18, r1	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:427
  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
     4b6:	df 91       	pop	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:428
}
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <UartClass::begin(unsigned long, unsigned int)>:
begin():
     4bc:	8f 92       	push	r8
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:359
    _pin_set = 0;
  }
  return false;
}

void UartClass::begin(unsigned long baud, uint16_t options) {
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	8c 01       	movw	r16, r24
     4d0:	4a 01       	movw	r8, r20
     4d2:	5b 01       	movw	r10, r22
     4d4:	d2 2f       	mov	r29, r18
     4d6:	c3 2f       	mov	r28, r19
     4d8:	dc 01       	movw	r26, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:362
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_state & 1) {
     4da:	52 96       	adiw	r26, 0x12	; 18
     4dc:	8c 91       	ld	r24, X
     4de:	52 97       	sbiw	r26, 0x12	; 18
     4e0:	80 ff       	sbrs	r24, 0
     4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <UartClass::begin(unsigned long, unsigned int)+0x36>
     4e4:	ed 91       	ld	r30, X+
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:363
    this->end();
     4e6:	fc 91       	ld	r31, X
     4e8:	02 88       	ldd	r0, Z+18	; 0x12
     4ea:	f3 89       	ldd	r31, Z+19	; 0x13
     4ec:	e0 2d       	mov	r30, r0
     4ee:	c8 01       	movw	r24, r16
     4f0:	09 95       	icall
     4f2:	d1 11       	cpse	r29, r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:367
  }

  uint8_t ctrlc = (uint8_t) options;
  if (ctrlc == 0) {                                 // low byte of 0 could mean they want SERIAL_5N1.
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <UartClass::begin(unsigned long, unsigned int)+0x3c>
     4f6:	d3 e0       	ldi	r29, 0x03	; 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:368
    ctrlc = (uint8_t)SERIAL_8N1;                    // Or that they were expecting to modify the default.
     4f8:	fd 2e       	mov	r15, r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:370
  }                                                 // unused bit 0x04 is set 1 for the special case of 5N1 only, and we unset it...
  ctrlc &= ~0x04;                                   // ... as none of the values with it set are supported.
     4fa:	e8 94       	clt
     4fc:	f2 f8       	bld	r15, 2
     4fe:	dc 2f       	mov	r29, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:373
  uint8_t   ctrla =(uint8_t) (options >> 8);        // CTRLA will get the remains of the options high byte.
  uint16_t baud_setting = 0;                        // at this point it should be able to reuse those 2 registers that it received options in!
  uint8_t         ctrlb = (~ctrla & 0xC0);          // Top two bits (TXEN RXEN), inverted so they match he sense in the registers - we could return here, but we don't cae about speed, and it'd be 4 more bytes
     500:	d0 95       	com	r29
     502:	d0 7c       	andi	r29, 0xC0	; 192
     504:	b9 e6       	ldi	r27, 0x69	; 105
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:374
  if (baud > F_CPU / 16) {                          // if this baud is too fast for non-U2X
     506:	8b 16       	cp	r8, r27
     508:	b9 e8       	ldi	r27, 0x89	; 137
     50a:	9b 06       	cpc	r9, r27
     50c:	b9 e0       	ldi	r27, 0x09	; 9
     50e:	ab 06       	cpc	r10, r27
     510:	b1 04       	cpc	r11, r1
     512:	28 f0       	brcs	.+10     	; 0x51e <UartClass::begin(unsigned long, unsigned int)+0x62>
     514:	d2 60       	ori	r29, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:375
    ctrlb              |= USART_RXMODE0_bm;         // set the U2X bit in what will become CTRLB
     516:	b6 94       	lsr	r11
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:376
    baud              >>= 1;                        // And lower the baud rate by haldf
     518:	a7 94       	ror	r10
     51a:	97 94       	ror	r9
     51c:	87 94       	ror	r8
     51e:	60 e0       	ldi	r22, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:378
  }
  baud_setting          = (((4 * F_CPU) / baud));   // And now the registers that baud was passed in are done.
     520:	7a e5       	ldi	r23, 0x5A	; 90
     522:	82 e6       	ldi	r24, 0x62	; 98
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	a5 01       	movw	r20, r10
     528:	94 01       	movw	r18, r8
     52a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__udivmodsi4>
     52e:	c9 01       	movw	r24, r18
     530:	20 34       	cpi	r18, 0x40	; 64
     532:	31 05       	cpc	r19, r1
     534:	10 f4       	brcc	.+4      	; 0x53a <UartClass::begin(unsigned long, unsigned int)+0x7e>
     536:	80 e4       	ldi	r24, 0x40	; 64
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	3c 2f       	mov	r19, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:384
  if (baud_setting < 64){                           // so set to the maximum baud rate setting.
    baud_setting = 64;       // set the U2X bit in what will become CTRLB
  }
  // Baud setting done now we do the other options.
  // that aren't in CTRLC;
  ctrla &= 0x2B;                            // Only LBME and RS485 (both of them); will get written to CTRLA, but we leave the event bit.
     53c:	3b 72       	andi	r19, 0x2B	; 43
     53e:	d7 fd       	sbrc	r29, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:385
  if (ctrlb & USART_RXEN_bm) {              // if RX is to be enabled
     540:	30 68       	ori	r19, 0x80	; 128
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:386
    ctrla  |= USART_RXCIE_bm;               // we will want to enable the ISR.
     542:	4d 2f       	mov	r20, r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:388
  }
  uint8_t setpinmask = ctrlb & 0xC8;        // ODME in bit 3, TX and RX enabled in bit 6, 7
     544:	48 7c       	andi	r20, 0xC8	; 200
     546:	30 fd       	sbrc	r19, 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:393
  if ((ctrla & USART_LBME_bm) && (setpinmask == 0xC8)) { // if it's open-drain and loopback AND both TX and RX are enabled, need to set state bit 2.
    _state                 |= 2;            // since that changes some behavior (RXC disabled while sending) // Now we should be able to ST _state.
    setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
  }
  if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
     548:	41 60       	ori	r20, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:394
    setpinmask             |= 0x01;         // set pin output if we need to do that.
     54a:	5f b7       	in	r21, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:396
  }
  uint8_t oldSREG = SREG;
     54c:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:397
  cli();
     54e:	d8 01       	movw	r26, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:398
  volatile USART_t* MyUSART = _hwserial_module;
     550:	1c 96       	adiw	r26, 0x0c	; 12
     552:	ed 91       	ld	r30, X+
     554:	fc 91       	ld	r31, X
     556:	16 82       	std	Z+6, r1	; 0x06
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:399
  (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
     558:	f7 82       	std	Z+7, r15	; 0x07
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:400
  (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
     55a:	80 87       	std	Z+8, r24	; 0x08
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:401
  (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
     55c:	91 87       	std	Z+9, r25	; 0x09
     55e:	35 ff       	sbrs	r19, 5
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:402
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
     560:	8b c0       	rjmp	.+278    	; 0x678 <UartClass::begin(unsigned long, unsigned int)+0x1bc>
     562:	4f 77       	andi	r20, 0x7F	; 127
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:403
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
     564:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:404
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
     566:	84 87       	std	Z+12, r24	; 0x0c
     568:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:405
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
     56a:	85 87       	std	Z+13, r24	; 0x0d
     56c:	3f 7d       	andi	r19, 0xDF	; 223
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:409
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
     56e:	35 83       	std	Z+5, r19	; 0x05
     570:	d6 83       	std	Z+6, r29	; 0x06
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:410
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
     572:	f8 01       	movw	r30, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:411
  _set_pins(_usart_pins, _mux_count, _pin_set, setpinmask);
     574:	21 89       	ldd	r18, Z+17	; 0x11
     576:	c0 89       	ldd	r28, Z+16	; 0x10
     578:	86 85       	ldd	r24, Z+14	; 0x0e
     57a:	97 85       	ldd	r25, Z+15	; 0x0f
_set_pins():
     57c:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:538
//  1  1  1  0      TX set output, RX not changed. Loopback mode: you can only see what you send since TX is OUTPUT and that's what's connected to RX.
//  1  1  1  1      TX set input pullup. Half-duplex mode.
// * indicates that RS485 mode if requested will be enabled, even though it is inappropriate. These configurations are documented unsupported.
// Static
void UartClass::_set_pins(uint8_t* mux_table_ptr, uint8_t mux_count, uint8_t mux_setting, uint8_t enmask) {
  uint8_t* mux_row_ptr   = mux_table_ptr + (mux_setting * USART_PINS_WIDTH);
     57e:	33 e0       	ldi	r19, 0x03	; 3
     580:	23 9f       	mul	r18, r19
     582:	e0 0d       	add	r30, r0
     584:	f1 1d       	adc	r31, r1
     586:	11 24       	eor	r1, r1
     588:	65 91       	lpm	r22, Z+
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:539
  uint16_t mux_row_gc_tx = pgm_read_word_near(mux_row_ptr); // Clever trick for faster PGM reads of consecutive bytes!
     58a:	74 91       	lpm	r23, Z
     58c:	2c 17       	cp	r18, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:541
  uint8_t mux_group_code = (uint8_t) (mux_row_gc_tx);       // this is the mux
  if (mux_setting < mux_count) {              // if false, pinmux none was selected, and we skip the pin configuration.
     58e:	08 f0       	brcs	.+2      	; 0x592 <UartClass::begin(unsigned long, unsigned int)+0xd6>
     590:	59 c0       	rjmp	.+178    	; 0x644 <UartClass::begin(unsigned long, unsigned int)+0x188>
     592:	27 2f       	mov	r18, r23
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:542
    uint8_t mux_pin_tx   = (uint8_t) (mux_row_gc_tx >> 8);
     594:	46 ff       	sbrs	r20, 6
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:543
    if ((enmask & 0x40 && !(enmask & 0x08))) {
     596:	72 c0       	rjmp	.+228    	; 0x67c <UartClass::begin(unsigned long, unsigned int)+0x1c0>
_pinMode():
     598:	7b 31       	cpi	r23, 0x1B	; 27
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     59a:	88 f4       	brcc	.+34     	; 0x5be <UartClass::begin(unsigned long, unsigned int)+0x102>
check_valid_digital_pin():
     59c:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:32
#include "pins_arduino.h"


inline __attribute__((always_inline)) void check_valid_digital_pin(uint8_t pin)
{
  if(__builtin_constant_p(pin)) {
     59e:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     5a0:	e0 50       	subi	r30, 0x00	; 0
     5a2:	f0 4a       	sbci	r31, 0xA0	; 160
     5a4:	a0 81       	ld	r26, Z
     5a6:	af 3f       	cpi	r26, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:223
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
     5a8:	51 f0       	breq	.+20     	; 0x5be <UartClass::begin(unsigned long, unsigned int)+0x102>
     5aa:	25 5e       	subi	r18, 0xE5	; 229
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:226
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
     5ac:	3f 49       	sbci	r19, 0x9F	; 159
     5ae:	f9 01       	movw	r30, r18
     5b0:	30 81       	ld	r19, Z
     5b2:	20 e2       	ldi	r18, 0x20	; 32
     5b4:	32 9f       	mul	r19, r18
     5b6:	f0 01       	movw	r30, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	fc 5f       	subi	r31, 0xFC	; 252
     5bc:	a1 83       	std	Z+1, r26	; 0x01
_set_pins():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:229
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
     5be:	47 ff       	sbrs	r20, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:548
      pinMode(mux_pin_tx, OUTPUT);            // If and only if TX is enabled and open drain isn't should the TX pin be output.
    } else if (enmask & 0x50) {               // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
      pinMode(mux_pin_tx, INPUT_PULLUP);      // TX should be INPUT_PULLUP.
    }
    if (enmask & 0x80 && !(enmask & 0x10)) {  // Likewise if RX is enabled, unless loopback mode is too
     5c0:	2a c0       	rjmp	.+84     	; 0x616 <UartClass::begin(unsigned long, unsigned int)+0x15a>
     5c2:	21 e0       	ldi	r18, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:549
      pinMode(mux_pin_tx + 1, INPUT_PULLUP);  // (in which case we caught it above), it should be pulled up
     5c4:	27 0f       	add	r18, r23
_pinMode():
     5c6:	2b 31       	cpi	r18, 0x1B	; 27
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     5c8:	30 f5       	brcc	.+76     	; 0x616 <UartClass::begin(unsigned long, unsigned int)+0x15a>
check_valid_digital_pin():
     5ca:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:32
#include "pins_arduino.h"


inline __attribute__((always_inline)) void check_valid_digital_pin(uint8_t pin)
{
  if(__builtin_constant_p(pin)) {
     5cc:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     5ce:	e0 50       	subi	r30, 0x00	; 0
     5d0:	f0 4a       	sbci	r31, 0xA0	; 160
     5d2:	d0 81       	ld	r29, Z
     5d4:	df 3f       	cpi	r29, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:223
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
     5d6:	f9 f0       	breq	.+62     	; 0x616 <UartClass::begin(unsigned long, unsigned int)+0x15a>
     5d8:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:226
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
     5da:	e5 5e       	subi	r30, 0xE5	; 229
     5dc:	ff 49       	sbci	r31, 0x9F	; 159
     5de:	a0 81       	ld	r26, Z
     5e0:	f0 e2       	ldi	r31, 0x20	; 32
     5e2:	af 9f       	mul	r26, r31
     5e4:	d0 01       	movw	r26, r0
     5e6:	11 24       	eor	r1, r1
     5e8:	bc 5f       	subi	r27, 0xFC	; 252
     5ea:	2a 5c       	subi	r18, 0xCA	; 202
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:232
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
     5ec:	3f 49       	sbci	r19, 0x9F	; 159
     5ee:	f9 01       	movw	r30, r18
     5f0:	10 81       	ld	r17, Z
begin():
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:233
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
     5f4:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
     5f6:	18 30       	cpi	r17, 0x08	; 8
     5f8:	30 f4       	brcc	.+12     	; 0x606 <UartClass::begin(unsigned long, unsigned int)+0x14a>
     5fa:	9d 01       	movw	r18, r26
     5fc:	20 5f       	subi	r18, 0xF0	; 240
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	f9 01       	movw	r30, r18
     602:	e1 0f       	add	r30, r17
     604:	f1 1d       	adc	r31, r1
     606:	3f b7       	in	r19, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:234
    uint8_t status = SREG;              /* Save state */
     608:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
     60a:	12 96       	adiw	r26, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
     60c:	dc 93       	st	X, r29
     60e:	20 81       	ld	r18, Z
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
     610:	28 60       	ori	r18, 0x08	; 8
     612:	20 83       	st	Z, r18
     614:	3f bf       	out	0x3f, r19	; 63
_set_pins():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
     616:	40 ff       	sbrs	r20, 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:551
    }
    if (enmask & 1) {
     618:	15 c0       	rjmp	.+42     	; 0x644 <UartClass::begin(unsigned long, unsigned int)+0x188>
     61a:	23 e0       	ldi	r18, 0x03	; 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:552
      pinMode(mux_pin_tx + 3, OUTPUT);        // in RS485 mode we need to make sure that XDIR is an output
     61c:	27 0f       	add	r18, r23
_pinMode():
     61e:	2b 31       	cpi	r18, 0x1B	; 27
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     620:	88 f4       	brcc	.+34     	; 0x644 <UartClass::begin(unsigned long, unsigned int)+0x188>
check_valid_digital_pin():
     622:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:32
#include "pins_arduino.h"


inline __attribute__((always_inline)) void check_valid_digital_pin(uint8_t pin)
{
  if(__builtin_constant_p(pin)) {
     624:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     626:	e0 50       	subi	r30, 0x00	; 0
     628:	f0 4a       	sbci	r31, 0xA0	; 160
     62a:	40 81       	ld	r20, Z
     62c:	4f 3f       	cpi	r20, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:223
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
     62e:	51 f0       	breq	.+20     	; 0x644 <UartClass::begin(unsigned long, unsigned int)+0x188>
     630:	25 5e       	subi	r18, 0xE5	; 229
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:226
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
     632:	3f 49       	sbci	r19, 0x9F	; 159
     634:	d9 01       	movw	r26, r18
     636:	ec 91       	ld	r30, X
     638:	b0 e2       	ldi	r27, 0x20	; 32
     63a:	eb 9f       	mul	r30, r27
     63c:	f0 01       	movw	r30, r0
     63e:	11 24       	eor	r1, r1
     640:	fc 5f       	subi	r31, 0xFC	; 252
     642:	41 83       	std	Z+1, r20	; 0x01
_mux_set():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:229
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
     644:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:508
  uint8_t temp   = *portmux;
  temp          &= ~((uint8_t) (mux_options_off_gm >> 8)); // Group Mask
  temp          |= mux_code;
  *portmux       = temp;
#else
  uint8_t* mux_info_ptr = mux_table_ptr + (mux_count * USART_PINS_WIDTH) + 2;
     646:	23 e0       	ldi	r18, 0x03	; 3
     648:	c2 9f       	mul	r28, r18
     64a:	e0 0d       	add	r30, r0
     64c:	f1 1d       	adc	r31, r1
     64e:	11 24       	eor	r1, r1
     650:	32 96       	adiw	r30, 0x02	; 2
     652:	e4 91       	lpm	r30, Z
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:510
  /* Only one register, so no offset, so only read a byte */
  uint8_t mux_mask = pgm_read_byte_near(mux_info_ptr);     // only read the group mask
     654:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:512
  volatile uint8_t* portmux = (uint8_t*)(HWSERIAL_MUX_REGISTER_BASE);
  uint8_t temp   = *portmux;
     658:	e0 95       	com	r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:513
  temp          &= ~(mux_mask);
     65a:	e8 23       	and	r30, r24
     65c:	e6 2b       	or	r30, r22
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:514
  temp          |= mux_code;
     65e:	e0 93 e2 05 	sts	0x05E2, r30	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
begin():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:515
  *portmux       = temp;
     662:	5f bf       	out	0x3f, r21	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:412
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_usart_pins, _mux_count, _pin_set, setpinmask);
  SREG=oldSREG;
     664:	df 91       	pop	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:413
}
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	bf 90       	pop	r11
     670:	af 90       	pop	r10
     672:	9f 90       	pop	r9
     674:	8f 90       	pop	r8
     676:	08 95       	ret
     678:	14 86       	std	Z+12, r1	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:407
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
     67a:	78 cf       	rjmp	.-272    	; 0x56c <UartClass::begin(unsigned long, unsigned int)+0xb0>
_set_pins():
     67c:	34 2f       	mov	r19, r20
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:545
  uint8_t mux_group_code = (uint8_t) (mux_row_gc_tx);       // this is the mux
  if (mux_setting < mux_count) {              // if false, pinmux none was selected, and we skip the pin configuration.
    uint8_t mux_pin_tx   = (uint8_t) (mux_row_gc_tx >> 8);
    if ((enmask & 0x40 && !(enmask & 0x08))) {
      pinMode(mux_pin_tx, OUTPUT);            // If and only if TX is enabled and open drain isn't should the TX pin be output.
    } else if (enmask & 0x50) {               // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
     67e:	30 75       	andi	r19, 0x50	; 80
     680:	09 f4       	brne	.+2      	; 0x684 <UartClass::begin(unsigned long, unsigned int)+0x1c8>
     682:	9d cf       	rjmp	.-198    	; 0x5be <UartClass::begin(unsigned long, unsigned int)+0x102>
_pinMode():
     684:	7b 31       	cpi	r23, 0x1B	; 27
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     686:	08 f0       	brcs	.+2      	; 0x68a <UartClass::begin(unsigned long, unsigned int)+0x1ce>
     688:	9a cf       	rjmp	.-204    	; 0x5be <UartClass::begin(unsigned long, unsigned int)+0x102>
check_valid_digital_pin():
     68a:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:32
#include "pins_arduino.h"


inline __attribute__((always_inline)) void check_valid_digital_pin(uint8_t pin)
{
  if(__builtin_constant_p(pin)) {
     68c:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:222
    }
  #endif
  _pinMode(pin, mode);
}
void _pinMode(uint8_t pin, uint8_t mode) {
  uint8_t bit_mask = digitalPinToBitMask(pin);
     68e:	e0 50       	subi	r30, 0x00	; 0
     690:	f0 4a       	sbci	r31, 0xA0	; 160
     692:	d0 81       	ld	r29, Z
     694:	df 3f       	cpi	r29, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:223
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
     696:	09 f4       	brne	.+2      	; 0x69a <UartClass::begin(unsigned long, unsigned int)+0x1de>
     698:	92 cf       	rjmp	.-220    	; 0x5be <UartClass::begin(unsigned long, unsigned int)+0x102>
     69a:	f9 01       	movw	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:226
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
     69c:	e5 5e       	subi	r30, 0xE5	; 229
     69e:	ff 49       	sbci	r31, 0x9F	; 159
     6a0:	a0 81       	ld	r26, Z
     6a2:	e0 e2       	ldi	r30, 0x20	; 32
     6a4:	ae 9f       	mul	r26, r30
     6a6:	d0 01       	movw	r26, r0
     6a8:	11 24       	eor	r1, r1
     6aa:	bc 5f       	subi	r27, 0xFC	; 252
     6ac:	2a 5c       	subi	r18, 0xCA	; 202
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:232
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
     6ae:	3f 49       	sbci	r19, 0x9F	; 159
     6b0:	f9 01       	movw	r30, r18
     6b2:	10 81       	ld	r17, Z
begin():
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:233
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
     6b6:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
     6b8:	18 30       	cpi	r17, 0x08	; 8
     6ba:	30 f4       	brcc	.+12     	; 0x6c8 <UartClass::begin(unsigned long, unsigned int)+0x20c>
     6bc:	9d 01       	movw	r18, r26
     6be:	20 5f       	subi	r18, 0xF0	; 240
     6c0:	3f 4f       	sbci	r19, 0xFF	; 255
     6c2:	f9 01       	movw	r30, r18
     6c4:	e1 0f       	add	r30, r17
     6c6:	f1 1d       	adc	r31, r1
     6c8:	3f b7       	in	r19, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:234
    uint8_t status = SREG;              /* Save state */
     6ca:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
     6cc:	12 96       	adiw	r26, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
     6ce:	dc 93       	st	X, r29
     6d0:	20 81       	ld	r18, Z
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
     6d2:	28 60       	ori	r18, 0x08	; 8
     6d4:	20 83       	st	Z, r18
     6d6:	3f bf       	out	0x3f, r19	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
     6d8:	72 cf       	rjmp	.-284    	; 0x5be <UartClass::begin(unsigned long, unsigned int)+0x102>

000006da <UartClass::_poll_tx_data_empty()>:
_poll_tx_data_empty():
     6da:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:285
    uartClass._tx_buffer_tail = txTail;
  }
#endif

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     6dc:	0f b6       	in	r0, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:286
  if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     6de:	07 fe       	sbrs	r0, 7
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <UartClass::_poll_tx_data_empty()+0x10>
     6e2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7f0111>
     6e6:	88 23       	and	r24, r24
     6e8:	a1 f0       	breq	.+40     	; 0x712 <_poll_dre_done>
     6ea:	a4 85       	ldd	r26, Z+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:303
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.
    // -Spence 10/23/20
    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     6ec:	b5 85       	ldd	r27, Z+13	; 0x0d
     6ee:	14 96       	adiw	r26, 0x04	; 4
     6f0:	8c 91       	ld	r24, X
     6f2:	14 97       	sbiw	r26, 0x04	; 4
     6f4:	85 ff       	sbrs	r24, 5
     6f6:	0d c0       	rjmp	.+26     	; 0x712 <_poll_dre_done>
     6f8:	95 89       	ldd	r25, Z+21	; 0x15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:304
      if (_tx_buffer_head != _tx_buffer_tail) {
     6fa:	86 89       	ldd	r24, Z+22	; 0x16
     6fc:	98 17       	cp	r25, r24
     6fe:	39 f0       	breq	.+14     	; 0x70e <UartClass::_poll_tx_data_empty()+0x34>
     700:	15 96       	adiw	r26, 0x05	; 5
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:306
        // Buffer empty, so disable "data register empty" interrupt
        (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     702:	8c 91       	ld	r24, X
     704:	15 97       	sbiw	r26, 0x05	; 5
     706:	8f 7d       	andi	r24, 0xDF	; 223
     708:	15 96       	adiw	r26, 0x05	; 5
     70a:	8c 93       	st	X, r24
     70c:	08 95       	ret
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:324
#else
                "rjmp _poll_dre"    "\n\t"
#endif
                "_poll_dre_done:"    "\n"
                ::"z"((uint16_t)thisSerial)
                : "r18","r19","r24","r25","r26","r27");
     70e:	e8 94       	clt
     710:	db c2       	rjmp	.+1462   	; 0xcc8 <_poll_dre>

00000712 <_poll_dre_done>:
     712:	08 95       	ret

00000714 <UartClass::write(unsigned char)>:
write():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:331
    }
    // In case interrupts are enabled, the interrupt routine will be invoked by itself
    // Note that this currently does not handle cases where the DRE interruopt becomes
    // disabled, yet you are actually attempting to send. I don't think it can happen.
  }
}
     714:	0f 93       	push	r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:612
  }
  return base; // RX = TX + 1. XDIR = XCK + 1 for all Dx and Ex parts!
}


size_t UartClass::write(uint8_t c) {
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	ec 01       	movw	r28, r24
     71e:	8a 89       	ldd	r24, Y+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:613
  _state |= 1;
     720:	98 2f       	mov	r25, r24
     722:	91 60       	ori	r25, 0x01	; 1
     724:	9a 8b       	std	Y+18, r25	; 0x12
     726:	2d 89       	ldd	r18, Y+21	; 0x15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:619

  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective data rate at high (>
  // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
  if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     728:	9e 89       	ldd	r25, Y+22	; 0x16
     72a:	29 13       	cpse	r18, r25
     72c:	0a c0       	rjmp	.+20     	; 0x742 <UartClass::write(unsigned char)+0x2e>
     72e:	ec 85       	ldd	r30, Y+12	; 0x0c
     730:	fd 85       	ldd	r31, Y+13	; 0x0d
     732:	94 81       	ldd	r25, Z+4	; 0x04
     734:	95 ff       	sbrs	r25, 5
     736:	05 c0       	rjmp	.+10     	; 0x742 <UartClass::write(unsigned char)+0x2e>
     738:	81 fd       	sbrc	r24, 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:620
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     73a:	0d c0       	rjmp	.+26     	; 0x756 <UartClass::write(unsigned char)+0x42>
     73c:	80 e4       	ldi	r24, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:627
      ctrla                      &= ~USART_RXCIE_bm;
      ctrla                      |= USART_TXCIE_bm;
      (*_hwserial_module).STATUS  = USART_TXCIF_bm;
      (*_hwserial_module).CTRLA   = ctrla;
    } else {
      (*_hwserial_module).STATUS  = USART_TXCIF_bm;
     73e:	84 83       	std	Z+4, r24	; 0x04
     740:	12 c0       	rjmp	.+36     	; 0x766 <UartClass::write(unsigned char)+0x52>
     742:	06 2f       	mov	r16, r22
     744:	1d 89       	ldd	r17, Y+21	; 0x15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:649
*/

    return 1;
  }

  tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     746:	1f 5f       	subi	r17, 0xFF	; 255
     748:	1f 73       	andi	r17, 0x3F	; 63
     74a:	8e 89       	ldd	r24, Y+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:653

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit (or emulate interrupts)
  while (i == _tx_buffer_tail) {
     74c:	81 13       	cpse	r24, r17
     74e:	15 c0       	rjmp	.+42     	; 0x77a <UartClass::write(unsigned char)+0x66>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:654
    _poll_tx_data_empty();
     750:	ce 01       	movw	r24, r28
     752:	c3 df       	rcall	.-122    	; 0x6da <UartClass::_poll_tx_data_empty()>
     754:	fa cf       	rjmp	.-12     	; 0x74a <UartClass::write(unsigned char)+0x36>
     756:	85 81       	ldd	r24, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:621
  // to the data register and be done. This shortcut helps
  // significantly improve the effective data rate at high (>
  // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
  if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
      uint8_t ctrla               = (*_hwserial_module).CTRLA;
     758:	8f 77       	andi	r24, 0x7F	; 127
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:622
      ctrla                      &= ~USART_RXCIE_bm;
     75a:	80 64       	ori	r24, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:623
      ctrla                      |= USART_TXCIE_bm;
     75c:	90 e4       	ldi	r25, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:624
      (*_hwserial_module).STATUS  = USART_TXCIF_bm;
     75e:	94 83       	std	Z+4, r25	; 0x04
     760:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:625
      (*_hwserial_module).CTRLA   = ctrla;
     762:	fd 85       	ldd	r31, Y+13	; 0x0d
     764:	85 83       	std	Z+5, r24	; 0x05
     766:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:630
    } else {
      (*_hwserial_module).STATUS  = USART_TXCIF_bm;
    }
    // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
    (*_hwserial_module).TXDATAL   = c;
     768:	fd 85       	ldd	r31, Y+13	; 0x0d
     76a:	62 83       	std	Z+2, r22	; 0x02
     76c:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:669
  } else { // Enable "data register empty interrupt"
    (*_hwserial_module).CTRLA |= USART_DREIE_bm;
  }

  return 1;
}
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	08 95       	ret
     77a:	ed 89       	ldd	r30, Y+21	; 0x15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:656
  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit (or emulate interrupts)
  while (i == _tx_buffer_tail) {
    _poll_tx_data_empty();
  }
  _tx_buffer[_tx_buffer_head]  = c;
     77c:	ec 0f       	add	r30, r28
     77e:	fd 2f       	mov	r31, r29
     780:	f1 1d       	adc	r31, r1
     782:	e9 5a       	subi	r30, 0xA9	; 169
     784:	ff 4f       	sbci	r31, 0xFF	; 255
     786:	00 83       	st	Z, r16
     788:	1d 8b       	std	Y+21, r17	; 0x15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:657
  _tx_buffer_head              = i;
     78a:	ec 85       	ldd	r30, Y+12	; 0x0c
     78c:	fd 85       	ldd	r31, Y+13	; 0x0d
     78e:	8a 89       	ldd	r24, Y+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:658
  if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     790:	81 ff       	sbrs	r24, 1
     792:	09 c0       	rjmp	.+18     	; 0x7a6 <UartClass::write(unsigned char)+0x92>
     794:	85 81       	ldd	r24, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:659
    uint8_t ctrla              = (*_hwserial_module).CTRLA;
     796:	8f 77       	andi	r24, 0x7F	; 127
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:660
    ctrla                     &= ~USART_RXCIE_bm;
     798:	80 66       	ori	r24, 0x60	; 96
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:661
    ctrla                     |= USART_TXCIE_bm | USART_DREIE_bm;
     79a:	90 e4       	ldi	r25, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:662
    (*_hwserial_module).STATUS = USART_TXCIF_bm;
     79c:	94 83       	std	Z+4, r25	; 0x04
     79e:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:663
    (*_hwserial_module).CTRLA  = ctrla;
     7a0:	fd 85       	ldd	r31, Y+13	; 0x0d
     7a2:	85 83       	std	Z+5, r24	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:665
  } else { // Enable "data register empty interrupt"
    (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     7a4:	e3 cf       	rjmp	.-58     	; 0x76c <UartClass::write(unsigned char)+0x58>
     7a6:	85 81       	ldd	r24, Z+5	; 0x05
     7a8:	80 62       	ori	r24, 0x20	; 32
     7aa:	fb cf       	rjmp	.-10     	; 0x7a2 <UartClass::write(unsigned char)+0x8e>

000007ac <Print::print(__FlashStringHelper const*) [clone .constprop.52]>:
print():
     7ac:	0f 93       	push	r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:39

size_t Print::print(const __FlashStringHelper *ifsh)
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	8c 01       	movw	r16, r24
     7b6:	d0 e0       	ldi	r29, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:43
{
#if defined(__AVR__)
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     7b8:	c0 e0       	ldi	r28, 0x00	; 0
     7ba:	f8 01       	movw	r30, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:45
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     7bc:	ec 0f       	add	r30, r28
     7be:	fd 1f       	adc	r31, r29
     7c0:	64 91       	lpm	r22, Z
     7c2:	66 23       	and	r22, r22
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:46
    if (c == 0) break;
     7c4:	39 f0       	breq	.+14     	; 0x7d4 <Print::print(__FlashStringHelper const*) [clone .constprop.52]+0x28>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:47
    if (write(c)) n++;
     7c6:	89 e9       	ldi	r24, 0x99	; 153
     7c8:	91 e6       	ldi	r25, 0x61	; 97
     7ca:	a4 df       	rcall	.-184    	; 0x714 <UartClass::write(unsigned char)>
     7cc:	89 2b       	or	r24, r25
     7ce:	11 f0       	breq	.+4      	; 0x7d4 <Print::print(__FlashStringHelper const*) [clone .constprop.52]+0x28>
     7d0:	21 96       	adiw	r28, 0x01	; 1
     7d2:	f3 cf       	rjmp	.-26     	; 0x7ba <Print::print(__FlashStringHelper const*) [clone .constprop.52]+0xe>
     7d4:	ce 01       	movw	r24, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:54
  }
  return n;
#else
  return print(reinterpret_cast<const char *>(ifsh));
#endif
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <Print::print(char) [clone .constprop.48]>:
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:68
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     7e0:	68 2f       	mov	r22, r24
     7e2:	89 e9       	ldi	r24, 0x99	; 153
     7e4:	91 e6       	ldi	r25, 0x61	; 97
     7e6:	96 cf       	rjmp	.-212    	; 0x714 <UartClass::write(unsigned char)>

000007e8 <UartClass::flush()>:
flush():
     7e8:	cf 93       	push	r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:467
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  }
  return tail - head - 1;
}

void UartClass::flush() {
     7ea:	df 93       	push	r29
     7ec:	ec 01       	movw	r28, r24
     7ee:	8a 89       	ldd	r24, Y+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:471
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXCIF (transmit
  // complete) bit to 1 during initialization
  if (!(_state & 1)) {
     7f0:	80 ff       	sbrs	r24, 0
     7f2:	0b c0       	rjmp	.+22     	; 0x80a <UartClass::flush()+0x22>
     7f4:	ec 85       	ldd	r30, Y+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:487
  // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
  // and in that case flush(), and write() with full buffer would just straight up hang...


  // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
  while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     7f6:	fd 85       	ldd	r31, Y+13	; 0x0d
     7f8:	85 81       	ldd	r24, Z+5	; 0x05
     7fa:	85 fd       	sbrc	r24, 5
     7fc:	03 c0       	rjmp	.+6      	; 0x804 <UartClass::flush()+0x1c>
     7fe:	84 81       	ldd	r24, Z+4	; 0x04
     800:	86 fd       	sbrc	r24, 6
     802:	03 c0       	rjmp	.+6      	; 0x80a <UartClass::flush()+0x22>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:489
    // poll this, which will ensure that bytes keep getting sent even if interrupts are disabled or something.
    _poll_tx_data_empty();
     804:	ce 01       	movw	r24, r28
     806:	69 df       	rcall	.-302    	; 0x6da <UartClass::_poll_tx_data_empty()>
     808:	f5 cf       	rjmp	.-22     	; 0x7f4 <UartClass::flush()+0xc>
     80a:	df 91       	pop	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:493
  }
  // When we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <UartClass::operator bool()>:
operator 3():
     810:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.h:200
    inline  size_t         write(unsigned long n) {return                   write((uint8_t)n);}
    inline  size_t         write(long          n) {return                   write((uint8_t)n);}
    inline  size_t         write(unsigned int  n) {return                   write((uint8_t)n);}
    inline  size_t         write(int           n) {return                   write((uint8_t)n);}
    using Print::write;   // pull in write(str) and write(buf, size) from Print
    explicit operator       bool()                {return                                true;}
     812:	08 95       	ret

00000814 <TWI0_ClearPins>:
TWI0_ClearPins():
     814:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7f05e5>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:76
  return true;
}

void TWI0_ClearPins() {
  #ifdef PORTMUX_TWIROUTEA
    uint8_t portmux = PORTMUX.TWIROUTEA & PORTMUX_TWI0_gm; // registers are volatile, so this is bulky to recheck multiple times.
     818:	83 70       	andi	r24, 0x03	; 3
     81a:	82 30       	cpi	r24, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:77
    if (portmux == PORTMUX_TWI0_ALT2_gc) {
     81c:	21 f4       	brne	.+8      	; 0x826 <TWI0_ClearPins+0x12>
     81e:	8c e0       	ldi	r24, 0x0C	; 12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:80
      // make sure we don't get errata'ed - make sure their bits in the
      // PORTx.OUT registers are 0.
      PORTC.OUTCLR = 0x0C;  // bits 2 and 3
     820:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
     824:	08 95       	ret
     826:	8c e0       	ldi	r24, 0x0C	; 12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:83
    } else {
      #if !defined(__AVR_DD__)
        PORTA.OUTCLR = 0x0C;  // bits 2 and 3
     828:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
     82c:	08 95       	ret

0000082e <TwoWire::flush()>:
TWI_Flush():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:116
      PORTA.OUTCLR = 0x06;  // 8-pin parts always have it on PA1/2
    #else
      PORTB.OUTCLR = 0x03;  // else, zero series, no remapping, it's on PB0, PB1
  #endif
#endif
}
     82e:	dc 01       	movw	r26, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:133
 */
void TWI_Flush(struct twiData *_data) {
  #if defined(ERRATA_TWI_FLUSH)
    // badCall("The AVR DA-series parts are impacted by an errata that leaves the TWI peripheral in a non-functioning state when using flush.");
    // restarting TWI hardware by hand. Extra size shouldn't matter on DA series
    uint8_t temp_MCTRLA     = _data->_module->MCTRLA;
     830:	1c 96       	adiw	r26, 0x0c	; 12
     832:	ed 91       	ld	r30, X+
     834:	fc 91       	ld	r31, X
     836:	93 81       	ldd	r25, Z+3	; 0x03
     838:	81 85       	ldd	r24, Z+9	; 0x09
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:134
    uint8_t temp_SCTRLA     = _data->_module->SCTRLA;
     83a:	13 82       	std	Z+3, r1	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:135
    _data->_module->MCTRLA  = 0x00;
     83c:	11 86       	std	Z+9, r1	; 0x09
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:136
    _data->_module->SCTRLA  = 0x00;
     83e:	93 83       	std	Z+3, r25	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:137
    _data->_module->MCTRLA  = temp_MCTRLA;
     840:	91 e0       	ldi	r25, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:138
    _data->_module->MSTATUS = 0x01;  // force TWI state machine into idle state
     842:	95 83       	std	Z+5, r25	; 0x05
     844:	81 87       	std	Z+9, r24	; 0x09
flush():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:139
    _data->_module->SCTRLA  = temp_SCTRLA;
     846:	08 95       	ret

00000848 <TwoWire::peek()>:
peek():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:559
 *@return     void
 */
void TwoWire::flush(void) {
  /* Turn off and on TWI module */
  TWI_Flush(&vars);
}
     848:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:519
 *@param      void
 *
 *@return     int
 *@retval     byte in the buffer or -1 if buffer is empty
 */
int TwoWire::peek(void) {
     84a:	86 85       	ldd	r24, Z+14	; 0x0e
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:523
  uint8_t *rxHead, *rxTail, *rxBuffer;

  #if defined(TWI_MANDS)                         // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     84c:	84 ff       	sbrs	r24, 4
     84e:	0d c0       	rjmp	.+26     	; 0x86a <TwoWire::peek()+0x22>
     850:	cf 01       	movw	r24, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:526
      rxHead   = &(vars._bytesToReadWriteS);
      rxTail   = &(vars._bytesReadWrittenS);
      rxBuffer =   vars._trBufferS;
     852:	80 5e       	subi	r24, 0xE0	; 224
     854:	9e 4f       	sbci	r25, 0xFE	; 254
     856:	26 89       	ldd	r18, Z+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:524
int TwoWire::peek(void) {
  uint8_t *rxHead, *rxTail, *rxBuffer;

  #if defined(TWI_MANDS)                         // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
      rxHead   = &(vars._bytesToReadWriteS);
     858:	e7 89       	ldd	r30, Z+23	; 0x17
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:525
      rxTail   = &(vars._bytesReadWrittenS);
     85a:	e2 17       	cp	r30, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:541
      rxTail   = &(vars._bytesRead);
      rxBuffer =   vars._rxBuffer;
    #endif
  }

  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
     85c:	60 f4       	brcc	.+24     	; 0x876 <TwoWire::peek()+0x2e>
     85e:	e8 0f       	add	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:542
    return rxBuffer[(*rxTail)];
     860:	f9 2f       	mov	r31, r25
     862:	f1 1d       	adc	r31, r1
     864:	80 81       	ld	r24, Z
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	08 95       	ret
     86a:	cf 01       	movw	r24, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:537
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
      rxTail   = &(vars._bytesRead);
      rxBuffer =   vars._rxBuffer;
     86c:	82 56       	subi	r24, 0x62	; 98
     86e:	9f 4f       	sbci	r25, 0xFF	; 255
     870:	22 89       	ldd	r18, Z+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:535
    #if defined(TWI_MERGE_BUFFERS)               // Same Buffers for tx/rx
      rxHead   = &(vars._bytesToReadWrite);
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
     872:	e3 89       	ldd	r30, Z+19	; 0x13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:536
      rxTail   = &(vars._bytesRead);
     874:	f2 cf       	rjmp	.-28     	; 0x85a <TwoWire::peek()+0x12>
     876:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:544
  }

  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
    return rxBuffer[(*rxTail)];
  } else {      // No bytes to read
    return -1;
     878:	9f ef       	ldi	r25, 0xFF	; 255
     87a:	08 95       	ret

0000087c <TwoWire::read()>:
read():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:546
  }
}
     87c:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:446
 *@param      void
 *
 *@return     int
 *@retval     byte in the buffer or -1 if buffer is empty
 */
int TwoWire::read(void) {
     87e:	86 85       	ldd	r24, Z+14	; 0x0e
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:450
  uint8_t *rxHead, *rxTail, *rxBuffer;

  #if defined(TWI_MANDS)                         // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     880:	df 01       	movw	r26, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:452
      rxHead   = &(vars._bytesToReadWriteS);
      rxTail   = &(vars._bytesReadWrittenS);
     882:	84 ff       	sbrs	r24, 4
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:450
 */
int TwoWire::read(void) {
  uint8_t *rxHead, *rxTail, *rxBuffer;

  #if defined(TWI_MANDS)                         // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     884:	10 c0       	rjmp	.+32     	; 0x8a6 <TwoWire::read()+0x2a>
     886:	57 96       	adiw	r26, 0x17	; 23
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:452
      rxHead   = &(vars._bytesToReadWriteS);
      rxTail   = &(vars._bytesReadWrittenS);
     888:	9f 01       	movw	r18, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:453
      rxBuffer =   vars._trBufferS;
     88a:	20 5e       	subi	r18, 0xE0	; 224
     88c:	3e 4f       	sbci	r19, 0xFE	; 254
     88e:	86 89       	ldd	r24, Z+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:451
int TwoWire::read(void) {
  uint8_t *rxHead, *rxTail, *rxBuffer;

  #if defined(TWI_MANDS)                         // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
      rxHead   = &(vars._bytesToReadWriteS);
     890:	97 89       	ldd	r25, Z+23	; 0x17
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:452
      rxTail   = &(vars._bytesReadWrittenS);
     892:	98 17       	cp	r25, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:469
      rxBuffer =   vars._rxBuffer;
    #endif
  }


  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
     894:	78 f4       	brcc	.+30     	; 0x8b4 <TwoWire::read()+0x38>
     896:	29 0f       	add	r18, r25
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:470
    uint8_t c = rxBuffer[(*rxTail)];
     898:	31 1d       	adc	r19, r1
     89a:	f9 01       	movw	r30, r18
     89c:	80 81       	ld	r24, Z
     89e:	9f 5f       	subi	r25, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:471
    (*rxTail)++;
     8a0:	9c 93       	st	X, r25
     8a2:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:472
    return c;
     8a4:	08 95       	ret
     8a6:	53 96       	adiw	r26, 0x13	; 19
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:463
      rxHead   = &(vars._bytesToReadWrite);
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
      rxTail   = &(vars._bytesRead);
     8a8:	9f 01       	movw	r18, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:464
      rxBuffer =   vars._rxBuffer;
     8aa:	22 56       	subi	r18, 0x62	; 98
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
     8ae:	82 89       	ldd	r24, Z+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:462
    #if defined(TWI_MERGE_BUFFERS)               // Same Buffers for tx/rx
      rxHead   = &(vars._bytesToReadWrite);
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
     8b0:	93 89       	ldd	r25, Z+19	; 0x13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:463
      rxTail   = &(vars._bytesRead);
     8b2:	ef cf       	rjmp	.-34     	; 0x892 <TwoWire::read()+0x16>
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:474
  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
    uint8_t c = rxBuffer[(*rxTail)];
    (*rxTail)++;
    return c;
  } else {                      // No bytes to read. At this point, rxTail moved up to
    return -1;                  // rxHead. To reset both to 0, a MasterRead or AddrWrite has to be called
     8b6:	9f ef       	ldi	r25, 0xFF	; 255
     8b8:	08 95       	ret

000008ba <TwoWire::available()>:
available():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:476
  }
}
     8ba:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:414
 *@param      void
 *
 *@return     int
 *@retval     amount of bytes available to read from the host buffer
 */
int TwoWire::available(void) {
     8bc:	86 85       	ldd	r24, Z+14	; 0x0e
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:417
  int rxHead;
  #if defined(TWI_MANDS)                          // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     8be:	84 ff       	sbrs	r24, 4
     8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <TwoWire::available()+0x16>
     8c2:	96 89       	ldd	r25, Z+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:418
      rxHead  = vars._bytesToReadWriteS - vars._bytesReadWrittenS;
     8c4:	87 89       	ldd	r24, Z+23	; 0x17
     8c6:	29 2f       	mov	r18, r25
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:425
  #endif
  {
    #if defined(TWI_MERGE_BUFFERS)                // Same Buffers for tx/rx
      rxHead  = vars._bytesToReadWrite - vars._bytesReadWritten;
    #else                                         // Separate tx/rx Buffers
      rxHead  = vars._bytesToRead - vars._bytesRead;
     8c8:	28 1b       	sub	r18, r24
     8ca:	33 0b       	sbc	r19, r19
     8cc:	c9 01       	movw	r24, r18
     8ce:	08 95       	ret
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:429
    #endif
  }
  return rxHead;
}
     8d0:	92 89       	ldd	r25, Z+18	; 0x12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:425
  #endif
  {
    #if defined(TWI_MERGE_BUFFERS)                // Same Buffers for tx/rx
      rxHead  = vars._bytesToReadWrite - vars._bytesReadWritten;
    #else                                         // Separate tx/rx Buffers
      rxHead  = vars._bytesToRead - vars._bytesRead;
     8d2:	83 89       	ldd	r24, Z+19	; 0x13
     8d4:	f8 cf       	rjmp	.-16     	; 0x8c6 <TwoWire::available()+0xc>

000008d6 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
     8d6:	cf 92       	push	r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:390
 *
 *
 *@return     uint8_t
 *@retval     amount of bytes copied
 */
size_t TwoWire::write(const uint8_t *data, size_t quantity) {
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	6c 01       	movw	r12, r24
     8e6:	43 38       	cpi	r20, 0x83	; 131
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:392
  uint8_t i = 0;  // uint8_t since we don't use bigger buffers
  uint8_t qty = quantity > BUFFER_LENGTH ? BUFFER_LENGTH : quantity; //Don't overfill the buffer.
     8e8:	51 05       	cpc	r21, r1
     8ea:	10 f0       	brcs	.+4      	; 0x8f0 <TwoWire::write(unsigned char const*, unsigned int)+0x1a>
     8ec:	42 e8       	ldi	r20, 0x82	; 130
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	c4 2f       	mov	r28, r20
     8f2:	7b 01       	movw	r14, r22
     8f4:	10 e0       	ldi	r17, 0x00	; 0
     8f6:	00 e0       	ldi	r16, 0x00	; 0
     8f8:	0c 17       	cp	r16, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:393
  for (; i < qty; i++) {
     8fa:	80 f4       	brcc	.+32     	; 0x91c <TwoWire::write(unsigned char const*, unsigned int)+0x46>
     8fc:	d7 01       	movw	r26, r14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:394
    if (write(*(data + i)) == 0) break;   // break if buffer full
     8fe:	6d 91       	ld	r22, X+
     900:	7d 01       	movw	r14, r26
     902:	d6 01       	movw	r26, r12
     904:	ed 91       	ld	r30, X+
     906:	fc 91       	ld	r31, X
     908:	01 90       	ld	r0, Z+
     90a:	f0 81       	ld	r31, Z
     90c:	e0 2d       	mov	r30, r0
     90e:	c6 01       	movw	r24, r12
     910:	09 95       	icall
     912:	98 01       	movw	r18, r16
     914:	2f 5f       	subi	r18, 0xFF	; 255
     916:	3f 4f       	sbci	r19, 0xFF	; 255
     918:	89 2b       	or	r24, r25
     91a:	49 f4       	brne	.+18     	; 0x92e <TwoWire::write(unsigned char const*, unsigned int)+0x58>
     91c:	c8 01       	movw	r24, r16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:398
  }

  return i;
}
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	08 95       	ret
     92e:	89 01       	movw	r16, r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:394
 */
size_t TwoWire::write(const uint8_t *data, size_t quantity) {
  uint8_t i = 0;  // uint8_t since we don't use bigger buffers
  uint8_t qty = quantity > BUFFER_LENGTH ? BUFFER_LENGTH : quantity; //Don't overfill the buffer.
  for (; i < qty; i++) {
    if (write(*(data + i)) == 0) break;   // break if buffer full
     930:	e3 cf       	rjmp	.-58     	; 0x8f8 <TwoWire::write(unsigned char const*, unsigned int)+0x22>

00000932 <TwoWire::write(unsigned char)>:
     932:	fc 01       	movw	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:346
 *
 *
 *@return     uint8_t
 *@retval     1 if successful, 0 if the buffer is full
 */
size_t TwoWire::write(uint8_t data) {
     934:	86 85       	ldd	r24, Z+14	; 0x0e
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:351
  uint8_t* txHead;
  uint8_t* txBuffer;

  #if defined(TWI_MANDS)                   // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     936:	df 01       	movw	r26, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:352
      txHead   = &(vars._bytesToReadWriteS);
     938:	84 ff       	sbrs	r24, 4
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:351
size_t TwoWire::write(uint8_t data) {
  uint8_t* txHead;
  uint8_t* txBuffer;

  #if defined(TWI_MANDS)                   // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
     93a:	11 c0       	rjmp	.+34     	; 0x95e <TwoWire::write(unsigned char)+0x2c>
     93c:	56 96       	adiw	r26, 0x16	; 22
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:352
      txHead   = &(vars._bytesToReadWriteS);
     93e:	cf 01       	movw	r24, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:353
      txBuffer =   vars._trBufferS;
     940:	80 5e       	subi	r24, 0xE0	; 224
     942:	9e 4f       	sbci	r25, 0xFE	; 254
     944:	e6 89       	ldd	r30, Z+22	; 0x16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:352
  uint8_t* txHead;
  uint8_t* txBuffer;

  #if defined(TWI_MANDS)                   // Add following if host and client are split
    if (vars._bools._toggleStreamFn == 0x01) {
      txHead   = &(vars._bytesToReadWriteS);
     946:	e2 38       	cpi	r30, 0x82	; 130
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:368
    #endif
  }

  /* Put byte in txBuffer */

  if ((*txHead) < BUFFER_LENGTH) {      // while buffer not full, write to it
     948:	78 f4       	brcc	.+30     	; 0x968 <TwoWire::write(unsigned char)+0x36>
     94a:	e8 0f       	add	r30, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:369
    txBuffer[(*txHead)] = data;             // Load data into the buffer
     94c:	f9 2f       	mov	r31, r25
     94e:	f1 1d       	adc	r31, r1
     950:	60 83       	st	Z, r22
     952:	8c 91       	ld	r24, X
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:370
    (*txHead)++;                            // advancing the head
     954:	8f 5f       	subi	r24, 0xFF	; 255
     956:	8c 93       	st	X, r24
     958:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:371
    return 1;
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	08 95       	ret
     95e:	51 96       	adiw	r26, 0x11	; 17
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:361
  {
    #if defined(TWI_MERGE_BUFFERS)         // Same Buffers for tx/rx
      txHead   = &(vars._bytesToReadWrite);
      txBuffer =   vars._trBuffer;
    #else                                  // Separate tx/rx Buffers
      txHead   = &(vars._bytesToWrite);
     960:	cf 01       	movw	r24, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:362
      txBuffer =   vars._txBuffer;
     962:	4c 96       	adiw	r24, 0x1c	; 28
     964:	e1 89       	ldd	r30, Z+17	; 0x11
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:361
  {
    #if defined(TWI_MERGE_BUFFERS)         // Same Buffers for tx/rx
      txHead   = &(vars._bytesToReadWrite);
      txBuffer =   vars._trBuffer;
    #else                                  // Separate tx/rx Buffers
      txHead   = &(vars._bytesToWrite);
     966:	ef cf       	rjmp	.-34     	; 0x946 <TwoWire::write(unsigned char)+0x14>
     968:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:373
  if ((*txHead) < BUFFER_LENGTH) {      // while buffer not full, write to it
    txBuffer[(*txHead)] = data;             // Load data into the buffer
    (*txHead)++;                            // advancing the head
    return 1;
  } else {
    return 0;
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	08 95       	ret

0000096e <Print::availableForWrite()>:
availableForWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:375
  }
}
     96e:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.h:58
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	08 95       	ret

00000974 <receiveHandler(int)>:
receiveHandler():
     974:	0f 93       	push	r16
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:265
      RTC_PI_bm; /* Clear interrupt flag by writing '1' (required) */
  ticks++;
}

uint16_t WirePointer = 0;
void receiveHandler(int numbytes) {
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	8c 01       	movw	r16, r24
getBytesRead():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:595
 *              the last time this was called.
 */

uint8_t TwoWire::getBytesRead() {
  uint8_t num = vars._bytesTransmittedS;
  vars._bytesTransmittedS = 0;
     97e:	10 92 3f 62 	sts	0x623F, r1	; 0x80623f <Wire+0xf>
receiveHandler():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:269
  Wire.getBytesRead(); // reset count of bytes read. We don't do anything with
                       // it here, but a write is going to reset it to a new
                       // value.
  WirePointer = Wire.read();
     982:	80 e3       	ldi	r24, 0x30	; 48
     984:	92 e6       	ldi	r25, 0x62	; 98
     986:	7a df       	rcall	.-268    	; 0x87c <TwoWire::read()>
     988:	c8 2f       	mov	r28, r24
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:271
  WirePointer <<= 8;
  WirePointer |= Wire.read();
     98a:	80 e3       	ldi	r24, 0x30	; 48
     98c:	92 e6       	ldi	r25, 0x62	; 98
     98e:	76 df       	rcall	.-276    	; 0x87c <TwoWire::read()>
     990:	20 e0       	ldi	r18, 0x00	; 0
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:270
void receiveHandler(int numbytes) {
  Wire.getBytesRead(); // reset count of bytes read. We don't do anything with
                       // it here, but a write is going to reset it to a new
                       // value.
  WirePointer = Wire.read();
  WirePointer <<= 8;
     992:	82 2b       	or	r24, r18
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:271
  WirePointer |= Wire.read();
     994:	9c 2b       	or	r25, r28
     996:	80 93 18 61 	sts	0x6118, r24	; 0x806118 <WirePointer>
     99a:	90 93 19 61 	sts	0x6119, r25	; 0x806119 <WirePointer+0x1>
     99e:	e8 01       	movw	r28, r16
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:273
  numbytes -= 2;
  while (numbytes) {
     9a0:	c2 30       	cpi	r28, 0x02	; 2
     9a2:	d1 05       	cpc	r29, r1
     9a4:	b1 f0       	breq	.+44     	; 0x9d2 <receiveHandler(int)+0x5e>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:274
    uint8_t nv = Wire.read();
     9a6:	80 e3       	ldi	r24, 0x30	; 48
     9a8:	92 e6       	ldi	r25, 0x62	; 98
     9aa:	68 df       	rcall	.-304    	; 0x87c <TwoWire::read()>
     9ac:	80 91 18 61 	lds	r24, 0x6118	; 0x806118 <WirePointer>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:294
    }
    if (!wrote) {
      reg.r[WirePointer++] = nv;
    }
    #else
      WirePointer++; //ignore write
     9b0:	90 91 19 61 	lds	r25, 0x6119	; 0x806119 <WirePointer+0x1>
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	89 33       	cpi	r24, 0x39	; 57
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:296
    #endif
    if (WirePointer >= sizeof(ewdt_regs_t))
     9b8:	91 05       	cpc	r25, r1
     9ba:	30 f4       	brcc	.+12     	; 0x9c8 <receiveHandler(int)+0x54>
     9bc:	80 93 18 61 	sts	0x6118, r24	; 0x806118 <WirePointer>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:294
    }
    if (!wrote) {
      reg.r[WirePointer++] = nv;
    }
    #else
      WirePointer++; //ignore write
     9c0:	90 93 19 61 	sts	0x6119, r25	; 0x806119 <WirePointer+0x1>
     9c4:	21 97       	sbiw	r28, 0x01	; 1
     9c6:	ec cf       	rjmp	.-40     	; 0x9a0 <receiveHandler(int)+0x2c>
     9c8:	10 92 18 61 	sts	0x6118, r1	; 0x806118 <WirePointer>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:297
    #endif
    if (WirePointer >= sizeof(ewdt_regs_t))
      WirePointer = 0;
     9cc:	10 92 19 61 	sts	0x6119, r1	; 0x806119 <WirePointer+0x1>
     9d0:	f9 cf       	rjmp	.-14     	; 0x9c4 <receiveHandler(int)+0x50>
     9d2:	df 91       	pop	r29
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:300
    numbytes--;
  }
}
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	08 95       	ret

000009dc <requestHandler()>:
requestHandler():
     9dc:	0f 93       	push	r16
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:302

void requestHandler() {
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
getBytesRead():
     9e4:	c0 91 3f 62 	lds	r28, 0x623F	; 0x80623f <Wire+0xf>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:594
 *@retval     Number of bytes read by a master from this device acting as a slave since
 *              the last time this was called.
 */

uint8_t TwoWire::getBytesRead() {
  uint8_t num = vars._bytesTransmittedS;
     9e8:	10 92 3f 62 	sts	0x623F, r1	; 0x80623f <Wire+0xf>
requestHandler():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:595
  vars._bytesTransmittedS = 0;
     9ec:	80 91 18 61 	lds	r24, 0x6118	; 0x806118 <WirePointer>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:304
  uint8_t bytes_read = Wire.getBytesRead();
  WirePointer = (WirePointer + (bytes_read));
     9f0:	90 91 19 61 	lds	r25, 0x6119	; 0x806119 <WirePointer+0x1>
     9f4:	c8 0f       	add	r28, r24
     9f6:	d9 2f       	mov	r29, r25
     9f8:	d1 1d       	adc	r29, r1
     9fa:	c0 93 18 61 	sts	0x6118, r28	; 0x806118 <WirePointer>
     9fe:	d0 93 19 61 	sts	0x6119, r29	; 0x806119 <WirePointer+0x1>
     a02:	8e 01       	movw	r16, r28
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:305
  uint16_t end = WirePointer + CHUNK_SZ;
     a04:	00 5e       	subi	r16, 0xE0	; 224
     a06:	1f 4f       	sbci	r17, 0xFF	; 255
     a08:	09 33       	cpi	r16, 0x39	; 57
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:306
  end = min(end, sizeof(ewdt_regs_t));
     a0a:	11 05       	cpc	r17, r1
     a0c:	10 f0       	brcs	.+4      	; 0xa12 <requestHandler()+0x36>
     a0e:	09 e3       	ldi	r16, 0x39	; 57
     a10:	10 e0       	ldi	r17, 0x00	; 0
     a12:	cd 5a       	subi	r28, 0xAD	; 173
     a14:	de 49       	sbci	r29, 0x9E	; 158
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:307
  for (uint16_t i = WirePointer; i < end; i++) {
     a16:	ce 01       	movw	r24, r28
     a18:	83 55       	subi	r24, 0x53	; 83
     a1a:	91 46       	sbci	r25, 0x61	; 97
     a1c:	80 17       	cp	r24, r16
     a1e:	91 07       	cpc	r25, r17
     a20:	28 f4       	brcc	.+10     	; 0xa2c <requestHandler()+0x50>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:308
    Wire.write(reg.r[i]);
     a22:	69 91       	ld	r22, Y+
     a24:	80 e3       	ldi	r24, 0x30	; 48
     a26:	92 e6       	ldi	r25, 0x62	; 98
     a28:	84 df       	rcall	.-248    	; 0x932 <TwoWire::write(unsigned char)>
     a2a:	f5 cf       	rjmp	.-22     	; 0xa16 <requestHandler()+0x3a>
     a2c:	df 91       	pop	r29
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:314
    // "write" a bunch of data - but the master might only want one byte.
    // The slave doesn't know how much data the master will want yet.
    // and won't know until it's gotten all that it wants and has generated a
    // stop condition.
  }
}
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	08 95       	ret

00000a36 <UartClass::begin(unsigned long)>:
begin():
     a36:	dc 01       	movw	r26, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.h:166
  /* DANGER DANGER DANGER
   * ANY CHANGES BETWEEN OTHER SCARY COMMENT AND THIS ONE WILL BREAK SERIAL when USE_ASM_DRE or USE_ASM_RXC is used!
   * DANGER DANGER DANGER */
 public:
    inline UartClass(volatile USART_t *hwserial_module, uint8_t *usart_pins, uint8_t mux_count, uint8_t mux_default);
    void                   begin(unsigned long   baud) {begin(baud, SERIAL_8N1);}
     a38:	ed 91       	ld	r30, X+
     a3a:	fc 91       	ld	r31, X
     a3c:	00 88       	ldd	r0, Z+16	; 0x10
     a3e:	f1 89       	ldd	r31, Z+17	; 0x11
     a40:	e0 2d       	mov	r30, r0
     a42:	23 e0       	ldi	r18, 0x03	; 3
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	09 94       	ijmp

00000a48 <ina_wr(ina3221_reg_t, unsigned int*) [clone .constprop.58]>:
ina_wr():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:37
  *val <<= 8;
  *val |= Wire.read();
}

// write an ina3221 register from val
void ina_wr(ina3221_reg_t reg, uint16_t *val) {
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	ec 01       	movw	r28, r24
beginTransmission():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:294
  if (__builtin_constant_p(address) > 0x7F) {     // Compile-time check if address is actually 7 bit long
    badArg("Supplied address seems to be 8 bit. Only 7-bit-addresses are supported");
    return;
  }
  // set address of targeted client
  vars._clientAddress = address << 1;
     a4e:	e0 e3       	ldi	r30, 0x30	; 48
     a50:	f2 e6       	ldi	r31, 0x62	; 98
     a52:	80 e8       	ldi	r24, 0x80	; 128
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/wire.h:112
    void onRequest(void (*)(void));

    inline size_t write(unsigned long n) {  return      write((uint8_t)     n);}
    inline size_t write(long          n) {  return      write((uint8_t)     n);}
    inline size_t write(unsigned int  n) {  return      write((uint8_t)     n);}
    inline size_t write(int           n) {  return      write((uint8_t)     n);}
     a54:	80 8b       	std	Z+16, r24	; 0x10
     a56:	11 8a       	std	Z+17, r1	; 0x11
write():
     a58:	60 e0       	ldi	r22, 0x00	; 0
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:40
  Wire.beginTransmission(INA_ADDR);
  Wire.write(reg);
  Wire.write((*val) >> 8);
     a5a:	cf 01       	movw	r24, r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/wire.h:111
    void onReceive(void (*)(int));
    void onRequest(void (*)(void));

    inline size_t write(unsigned long n) {  return      write((uint8_t)     n);}
    inline size_t write(long          n) {  return      write((uint8_t)     n);}
    inline size_t write(unsigned int  n) {  return      write((uint8_t)     n);}
     a5c:	6a df       	rcall	.-300    	; 0x932 <TwoWire::write(unsigned char)>
ina_wr():
     a5e:	69 81       	ldd	r22, Y+1	; 0x01
write():
     a60:	80 e3       	ldi	r24, 0x30	; 48
     a62:	92 e6       	ldi	r25, 0x62	; 98
     a64:	66 df       	rcall	.-308    	; 0x932 <TwoWire::write(unsigned char)>
     a66:	68 81       	ld	r22, Y
     a68:	80 e3       	ldi	r24, 0x30	; 48
     a6a:	92 e6       	ldi	r25, 0x62	; 98
     a6c:	62 df       	rcall	.-316    	; 0x932 <TwoWire::write(unsigned char)>
ina_wr():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:43
  Wire.write((*val) & 0xff);
  Wire.endTransmission();
}
     a6e:	df 91       	pop	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:328
 *           20 for likely a slave holding the clock low
 *          255 (-1) for TWI not initialized (begin not called) or bus somehow in "unknown" state.
 */
uint8_t TwoWire::endTransmission(bool sendStop) {
  // transmit (blocking)
  return TWI_MasterWrite(&vars, sendStop);
     a70:	cf 91       	pop	r28
endTransmission():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:26
SOFTWARE.*/

#include "ina3221.h"
#include <wire.h>
// read an ina3221 register into val
void ina_rr(ina3221_reg_t reg, uint16_t *val) {
     a72:	dd cb       	rjmp	.-2118   	; 0x22e <TWI_MasterWrite.constprop.64>

00000a74 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]>:
ina_rr():
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:294
  if (__builtin_constant_p(address) > 0x7F) {     // Compile-time check if address is actually 7 bit long
    badArg("Supplied address seems to be 8 bit. Only 7-bit-addresses are supported");
    return;
  }
  // set address of targeted client
  vars._clientAddress = address << 1;
     a7a:	ec 01       	movw	r28, r24
beginTransmission():
     a7c:	10 e8       	ldi	r17, 0x80	; 128
     a7e:	10 93 40 62 	sts	0x6240, r17	; 0x806240 <Wire+0x10>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:295
  (*txHead) = 0;  // fill buffer from 0
     a82:	10 92 41 62 	sts	0x6241, r1	; 0x806241 <Wire+0x11>
write():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/wire.h:112
    inline size_t write(int           n) {  return      write((uint8_t)     n);}
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	80 e3       	ldi	r24, 0x30	; 48
     a8a:	92 e6       	ldi	r25, 0x62	; 98
     a8c:	52 df       	rcall	.-348    	; 0x932 <TwoWire::write(unsigned char)>
endTransmission():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:328
 *           20 for likely a slave holding the clock low
 *          255 (-1) for TWI not initialized (begin not called) or bus somehow in "unknown" state.
 */
uint8_t TwoWire::endTransmission(bool sendStop) {
  // transmit (blocking)
  return TWI_MasterWrite(&vars, sendStop);
     a8e:	cf db       	rcall	.-2146   	; 0x22e <TWI_MasterWrite.constprop.64>
requestFrom():
     a90:	10 93 40 62 	sts	0x6240, r17	; 0x806240 <Wire+0x10>
TWI_MasterRead():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:266
 */
uint8_t TwoWire::requestFrom(uint8_t  address,  uint8_t  quantity,  uint8_t sendStop) {
  if (quantity > BUFFER_LENGTH) {
    quantity = BUFFER_LENGTH;
  }
  vars._clientAddress = address << 1;
     a94:	10 92 43 62 	sts	0x6243, r1	; 0x806243 <Wire+0x13>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:405
    uint8_t* rxHead   = &(_data->_bytesToRead);
    uint8_t* rxTail   = &(_data->_bytesRead);
    uint8_t* rxBuffer =   _data->_rxBuffer;
  #endif

  (*rxTail) = 0;                      // Reset counter
     a98:	e0 91 3c 62 	lds	r30, 0x623C	; 0x80623c <Wire+0xc>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:407

  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
     a9c:	f0 91 3d 62 	lds	r31, 0x623D	; 0x80623d <Wire+0xd>
     aa0:	85 81       	ldd	r24, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:413
                                      // creates bloat-y code, using a local variable fixes that

  TWIR_INIT_ERROR;             // local variable for errors
  uint8_t dataRead = 0;

  if ((module->MSTATUS & TWI_BUSSTATE_gm) != TWI_BUSSTATE_UNKNOWN_gc) {
     aa2:	83 70       	andi	r24, 0x03	; 3
     aa4:	b1 f0       	breq	.+44     	; 0xad2 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x5e>
     aa6:	81 e8       	ldi	r24, 0x81	; 129
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:419
    uint8_t currentSM;
    uint8_t currentStatus;
    uint8_t command  = 0;
    uint16_t timeout = 0;

    module->MADDR = ADD_READ_BIT(_data->_clientAddress);  // Send Address with read bit
     aa8:	87 83       	std	Z+7, r24	; 0x07
ina_rr():
     aaa:	30 e0       	ldi	r19, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:417

  if ((module->MSTATUS & TWI_BUSSTATE_gm) != TWI_BUSSTATE_UNKNOWN_gc) {
    uint8_t currentSM;
    uint8_t currentStatus;
    uint8_t command  = 0;
    uint16_t timeout = 0;
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:416
  uint8_t dataRead = 0;

  if ((module->MSTATUS & TWI_BUSSTATE_gm) != TWI_BUSSTATE_UNKNOWN_gc) {
    uint8_t currentSM;
    uint8_t currentStatus;
    uint8_t command  = 0;
     ab0:	80 e0       	ldi	r24, 0x00	; 0
TWI_MasterRead():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:411

  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
                                      // creates bloat-y code, using a local variable fixes that

  TWIR_INIT_ERROR;             // local variable for errors
  uint8_t dataRead = 0;
     ab2:	62 e0       	ldi	r22, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:460
            rxBuffer[dataRead] = module->MDATA;      // save byte in the Buffer.
            dataRead++;                              // increment read counter
            timeout = 0;                             // reset timeout

            if (dataRead < bytesToRead) {            // expecting more bytes, so
              module->MCTRLB = TWI_MCMD_RECVTRANS_gc;  // send an ACK so the Slave so it can send the next byte
     ab4:	45 81       	ldd	r20, Z+5	; 0x05
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:423

    module->MADDR = ADD_READ_BIT(_data->_clientAddress);  // Send Address with read bit

    while (true) {
      currentStatus = module->MSTATUS;
      currentSM = currentStatus & TWI_BUSSTATE_gm;  // get the current mode of the state machine
     ab6:	54 2f       	mov	r21, r20
     ab8:	53 70       	andi	r21, 0x03	; 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:426

      #if defined(TWI_TIMEOUT_ENABLE)
        if (++timeout > (F_CPU/1000)) {
     aba:	2f 5f       	subi	r18, 0xFF	; 255
     abc:	3f 4f       	sbci	r19, 0xFF	; 255
     abe:	21 31       	cpi	r18, 0x11	; 17
     ac0:	77 e2       	ldi	r23, 0x27	; 39
     ac2:	37 07       	cpc	r19, r23
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:438
          }
          break;
        }
      #endif

      if (currentStatus & TWI_ARBLOST_bm) {   // Check for Bus error
     ac4:	20 f4       	brcc	.+8      	; 0xace <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x5a>
     ac6:	43 ff       	sbrs	r20, 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:439
        module->MSTATUS = TWI_ARBLOST_bm;     // reset error flags
     ac8:	1a c0       	rjmp	.+52     	; 0xafe <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x8a>
     aca:	98 e0       	ldi	r25, 0x08	; 8
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:479
          TWIR_SET_ERROR(TWI_ERR_RXACK);          // set error flag
          command = TWI_MCMD_STOP_gc;             // free the bus
        }
      }
    }
    (*rxHead) = dataRead;
     acc:	95 83       	std	Z+5, r25	; 0x05
     ace:	80 93 42 62 	sts	0x6242, r24	; 0x806242 <Wire+0x12>
ina_rr():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:31
  Wire.beginTransmission(INA_ADDR);
  Wire.write(reg);
  Wire.endTransmission();
  Wire.requestFrom((uint8_t)INA_ADDR, (uint8_t)2);
  *val = (uint16_t)Wire.read();
     ad2:	80 e3       	ldi	r24, 0x30	; 48
     ad4:	92 e6       	ldi	r25, 0x62	; 98
     ad6:	d2 de       	rcall	.-604    	; 0x87c <TwoWire::read()>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:32
  *val <<= 8;
     ad8:	18 82       	st	Y, r1
     ada:	89 83       	std	Y+1, r24	; 0x01
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:33
  *val |= Wire.read();
     adc:	80 e3       	ldi	r24, 0x30	; 48
     ade:	92 e6       	ldi	r25, 0x62	; 98
     ae0:	cd de       	rcall	.-614    	; 0x87c <TwoWire::read()>
     ae2:	28 81       	ld	r18, Y
     ae4:	39 81       	ldd	r19, Y+1	; 0x01
     ae6:	82 2b       	or	r24, r18
     ae8:	93 2b       	or	r25, r19
     aea:	88 83       	st	Y, r24
     aec:	99 83       	std	Y+1, r25	; 0x01
     aee:	df 91       	pop	r29
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/ina3221.cpp:34
}
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	08 95       	ret
     af6:	30 e0       	ldi	r19, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:457
      if (currentSM == TWI_BUSSTATE_OWNER_gc) {  // Address sent, check for WIF/RIF
        if (currentStatus & TWI_RIF_bm) {         // data received
          if (dataRead < BUFFER_LENGTH) {          // Buffer still free
            rxBuffer[dataRead] = module->MDATA;      // save byte in the Buffer.
            dataRead++;                              // increment read counter
            timeout = 0;                             // reset timeout
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	97 e0       	ldi	r25, 0x07	; 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:463

            if (dataRead < bytesToRead) {            // expecting more bytes, so
              module->MCTRLB = TWI_MCMD_RECVTRANS_gc;  // send an ACK so the Slave so it can send the next byte
            } else {                                 // Otherwise,
              if (send_stop != 0) {
                command = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;   // send STOP + NACK
     afc:	db cf       	rjmp	.-74     	; 0xab4 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x40>
TWI_MasterRead():
     afe:	99 23       	and	r25, r25
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:444
        module->MSTATUS = TWI_ARBLOST_bm;     // reset error flags
        TWIR_SET_ERROR(TWI_ERR_BUS_ARB);      // set error flag
        break;                                // leave TX loop
      }

      if (command != 0) {
     b00:	a1 f0       	breq	.+40     	; 0xb2a <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0xb6>
     b02:	52 30       	cpi	r21, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:445
        if (currentSM == TWI_BUSSTATE_OWNER_gc) {
     b04:	21 f7       	brne	.-56     	; 0xace <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x5a>
     b06:	94 83       	std	Z+4, r25	; 0x04
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:446
          module->MCTRLB = command;
     b08:	47 ff       	sbrs	r20, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:453
          break;
        }
      }

      if (currentSM == TWI_BUSSTATE_OWNER_gc) {  // Address sent, check for WIF/RIF
        if (currentStatus & TWI_RIF_bm) {         // data received
     b0a:	12 c0       	rjmp	.+36     	; 0xb30 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0xbc>
     b0c:	82 38       	cpi	r24, 0x82	; 130
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:454
          if (dataRead < BUFFER_LENGTH) {          // Buffer still free
     b0e:	a8 f7       	brcc	.-22     	; 0xafa <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x86>
     b10:	20 85       	ldd	r18, Z+8	; 0x08
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:455
            rxBuffer[dataRead] = module->MDATA;      // save byte in the Buffer.
     b12:	a8 2f       	mov	r26, r24
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	a2 53       	subi	r26, 0x32	; 50
     b18:	bd 49       	sbci	r27, 0x9D	; 157
     b1a:	2c 93       	st	X, r18
     b1c:	8f 5f       	subi	r24, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:456
            dataRead++;                              // increment read counter
     b1e:	81 30       	cpi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:459
            timeout = 0;                             // reset timeout

            if (dataRead < bytesToRead) {            // expecting more bytes, so
     b20:	51 f7       	brne	.-44     	; 0xaf6 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x82>
     b22:	64 83       	std	Z+4, r22	; 0x04
ina_rr():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:460
              module->MCTRLB = TWI_MCMD_RECVTRANS_gc;  // send an ACK so the Slave so it can send the next byte
     b24:	30 e0       	ldi	r19, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:457
      if (currentSM == TWI_BUSSTATE_OWNER_gc) {  // Address sent, check for WIF/RIF
        if (currentStatus & TWI_RIF_bm) {         // data received
          if (dataRead < BUFFER_LENGTH) {          // Buffer still free
            rxBuffer[dataRead] = module->MDATA;      // save byte in the Buffer.
            dataRead++;                              // increment read counter
            timeout = 0;                             // reset timeout
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	c5 cf       	rjmp	.-118    	; 0xab4 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x40>
TWI_MasterRead():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:452
        } else {
          break;
        }
      }

      if (currentSM == TWI_BUSSTATE_OWNER_gc) {  // Address sent, check for WIF/RIF
     b2a:	52 30       	cpi	r21, 0x02	; 2
     b2c:	19 f6       	brne	.-122    	; 0xab4 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x40>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:473

          } else {                                        // Buffer overflow with the incoming byte
            TWIR_SET_ERROR(TWI_ERR_BUF_OVERFLOW);         // Set Error and
            command = TWI_ACKACT_bm | TWI_MCMD_STOP_gc;   // send STOP + NACK
          }
        } else if (currentStatus & TWI_WIF_bm) {  // Address NACKed
     b2e:	ec cf       	rjmp	.-40     	; 0xb08 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x94>
     b30:	46 ff       	sbrs	r20, 6
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:475
          TWIR_SET_ERROR(TWI_ERR_RXACK);          // set error flag
          command = TWI_MCMD_STOP_gc;             // free the bus
     b32:	c0 cf       	rjmp	.-128    	; 0xab4 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x40>
ina_rr():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.h:49
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     b34:	93 e0       	ldi	r25, 0x03	; 3
     b36:	be cf       	rjmp	.-132    	; 0xab4 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]+0x40>

00000b38 <Print::write(char const*) [clone .part.2] [clone .constprop.54]>:
_ZN5Print5writeEPKc.part.2():
     b38:	fc 01       	movw	r30, r24
     b3a:	01 90       	ld	r0, Z+
     b3c:	00 20       	and	r0, r0
     b3e:	e9 f7       	brne	.-6      	; 0xb3a <Print::write(char const*) [clone .part.2] [clone .constprop.54]+0x2>
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	af 01       	movw	r20, r30
     b44:	48 1b       	sub	r20, r24
     b46:	59 0b       	sbc	r21, r25
     b48:	bc 01       	movw	r22, r24
     b4a:	89 e9       	ldi	r24, 0x99	; 153
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:125
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     b4c:	91 e6       	ldi	r25, 0x61	; 97
     b4e:	35 cc       	rjmp	.-1942   	; 0x3ba <Print::write(unsigned char const*, unsigned int)>

00000b50 <Print::println() [clone .constprop.53]>:
write():
     b50:	8d e7       	ldi	r24, 0x7D	; 125
     b52:	90 e6       	ldi	r25, 0x60	; 96
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:113
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
     b54:	f1 cf       	rjmp	.-30     	; 0xb38 <Print::write(char const*) [clone .part.2] [clone .constprop.54]>

00000b56 <Print::println(__FlashStringHelper const*) [clone .constprop.51]>:
println():
     b56:	cf 93       	push	r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:115
{
  size_t n = print(ifsh);
     b58:	df 93       	push	r29
     b5a:	28 de       	rcall	.-944    	; 0x7ac <Print::print(__FlashStringHelper const*) [clone .constprop.52]>
     b5c:	ec 01       	movw	r28, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:116
  n += println();
     b5e:	f8 df       	rcall	.-16     	; 0xb50 <Print::println() [clone .constprop.53]>
     b60:	8c 0f       	add	r24, r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:118
  return n;
}
     b62:	9d 1f       	adc	r25, r29
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>:
printNumber():
     b6a:	8f 92       	push	r8
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:231
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     b6c:	9f 92       	push	r9
     b6e:	af 92       	push	r10
     b70:	bf 92       	push	r11
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	a1 97       	sbiw	r28, 0x21	; 33
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	19 a2       	std	Y+33, r1	; 0x21
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:236
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     b86:	42 30       	cpi	r20, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:239

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     b88:	08 f4       	brcc	.+2      	; 0xb8c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]+0x22>
     b8a:	4a e0       	ldi	r20, 0x0A	; 10
     b8c:	8e 01       	movw	r16, r28
     b8e:	0f 5d       	subi	r16, 0xDF	; 223
     b90:	1f 4f       	sbci	r17, 0xFF	; 255
     b92:	84 2e       	mov	r8, r20
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:242

  do {
    char c = n % base;
     b94:	91 2c       	mov	r9, r1
     b96:	b1 2c       	mov	r11, r1
     b98:	a1 2c       	mov	r10, r1
     b9a:	a5 01       	movw	r20, r10
     b9c:	94 01       	movw	r18, r8
     b9e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__udivmodsi4>
     ba2:	e6 2f       	mov	r30, r22
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:243
    n /= base;
     ba4:	b9 01       	movw	r22, r18
     ba6:	ca 01       	movw	r24, r20
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:245

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     ba8:	ea 30       	cpi	r30, 0x0A	; 10
     baa:	d4 f4       	brge	.+52     	; 0xbe0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]+0x76>
     bac:	e0 5d       	subi	r30, 0xD0	; 208
     bae:	d8 01       	movw	r26, r16
     bb0:	ee 93       	st	-X, r30
     bb2:	8d 01       	movw	r16, r26
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:246
  } while(n);
     bb4:	23 2b       	or	r18, r19
     bb6:	24 2b       	or	r18, r20
     bb8:	25 2b       	or	r18, r21
     bba:	79 f7       	brne	.-34     	; 0xb9a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]+0x30>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.h:48
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	80 e0       	ldi	r24, 0x00	; 0
write():
     bc0:	10 97       	sbiw	r26, 0x00	; 0
     bc2:	11 f0       	breq	.+4      	; 0xbc8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]+0x5e>
     bc4:	cd 01       	movw	r24, r26
     bc6:	b8 df       	rcall	.-144    	; 0xb38 <Print::write(char const*) [clone .part.2] [clone .constprop.54]>
printNumber():
     bc8:	a1 96       	adiw	r28, 0x21	; 33
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:249

  return write(str);
}
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	9f 90       	pop	r9
     bdc:	8f 90       	pop	r8
     bde:	08 95       	ret
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:245

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     be0:	e9 5c       	subi	r30, 0xC9	; 201
     be2:	e5 cf       	rjmp	.-54     	; 0xbae <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]+0x44>

00000be4 <Print::print(long, int) [clone .constprop.46]>:
print():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:86
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	cf 93       	push	r28
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:90
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
     bee:	df 93       	push	r29
     bf0:	4a 30       	cpi	r20, 0x0A	; 10
     bf2:	51 05       	cpc	r21, r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:96
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     bf4:	d1 f4       	brne	.+52     	; 0xc2a <Print::print(long, int) [clone .constprop.46]+0x46>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:91
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     bf6:	4a e0       	ldi	r20, 0x0A	; 10
     bf8:	97 ff       	sbrs	r25, 7
     bfa:	17 c0       	rjmp	.+46     	; 0xc2a <Print::print(long, int) [clone .constprop.46]+0x46>
     bfc:	6b 01       	movw	r12, r22
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:92
      int t = print('-');
     bfe:	7c 01       	movw	r14, r24
     c00:	8d e2       	ldi	r24, 0x2D	; 45
     c02:	ee dd       	rcall	.-1060   	; 0x7e0 <Print::print(char) [clone .constprop.48]>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:93
      n = -n;
     c04:	ec 01       	movw	r28, r24
     c06:	66 27       	eor	r22, r22
     c08:	77 27       	eor	r23, r23
     c0a:	cb 01       	movw	r24, r22
     c0c:	6c 19       	sub	r22, r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:94
      return printNumber(n, 10) + t;
     c0e:	7d 09       	sbc	r23, r13
     c10:	8e 09       	sbc	r24, r14
     c12:	9f 09       	sbc	r25, r15
     c14:	4a e0       	ldi	r20, 0x0A	; 10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:100
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c16:	a9 df       	rcall	.-174    	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
     c18:	8c 0f       	add	r24, r28
     c1a:	9d 1f       	adc	r25, r29
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	08 95       	ret
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	ff 90       	pop	r15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:98
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:137
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     c34:	cf 90       	pop	r12
     c36:	99 cf       	rjmp	.-206    	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>

00000c38 <Print::println(char const*) [clone .constprop.32]>:
println():
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
write():
     c3c:	7d df       	rcall	.-262    	; 0xb38 <Print::write(char const*) [clone .part.2] [clone .constprop.54]>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:140
{
  size_t n = print(c);
  n += println();
     c3e:	ec 01       	movw	r28, r24
println():
     c40:	87 df       	rcall	.-242    	; 0xb50 <Print::println() [clone .constprop.53]>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:142
  return n;
}
     c42:	8c 0f       	add	r24, r28
     c44:	9d 1f       	adc	r25, r29
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <Print::print(char const*) [clone .constprop.31]>:
write():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:61
size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
     c4c:	75 cf       	rjmp	.-278    	; 0xb38 <Print::write(char const*) [clone .part.2] [clone .constprop.54]>

00000c4e <__vector_31>:
__vector_31():
     c4e:	1f 92       	push	r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:135
  #elif defined(MILLIS_USE_TIMERB4)
    ISR(TCB4_INT_vect)
  #else
    #error "no millis timer selected"
  #endif
  {
     c50:	0f 92       	push	r0
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	0f 92       	push	r0
     c56:	11 24       	eor	r1, r1
     c58:	8f 93       	push	r24
     c5a:	9f 93       	push	r25
     c5c:	af 93       	push	r26
     c5e:	bf 93       	push	r27
     c60:	80 91 95 61 	lds	r24, 0x6195	; 0x806195 <timer_millis>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:141

    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    #if (defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4))
      #if(F_CPU>1000000)
        timer_millis++; // that's all we need to do!
     c64:	90 91 96 61 	lds	r25, 0x6196	; 0x806196 <timer_millis+0x1>
     c68:	a0 91 97 61 	lds	r26, 0x6197	; 0x806197 <timer_millis+0x2>
     c6c:	b0 91 98 61 	lds	r27, 0x6198	; 0x806198 <timer_millis+0x3>
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	a1 1d       	adc	r26, r1
     c74:	b1 1d       	adc	r27, r1
     c76:	80 93 95 61 	sts	0x6195, r24	; 0x806195 <timer_millis>
     c7a:	90 93 96 61 	sts	0x6196, r25	; 0x806196 <timer_millis+0x1>
     c7e:	a0 93 97 61 	sts	0x6197, r26	; 0x806197 <timer_millis+0x2>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:172
    #elif defined(MILLIS_USE_TIMERD0)
      TCD0.INTFLAGS = TCD_OVF_bm;
    #elif defined(MILLIS_USE_TIMERRTC)
      RTC.INTFLAGS = RTC_OVF_bm;
    #else // timerb
      _timer->INTFLAGS = TCB_CAPT_bm;
     c82:	b0 93 98 61 	sts	0x6198, r27	; 0x806198 <timer_millis+0x3>
     c86:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:174
    #endif
  }
     c88:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7f0b26>
     c8c:	bf 91       	pop	r27
     c8e:	af 91       	pop	r26
     c90:	9f 91       	pop	r25
     c92:	8f 91       	pop	r24
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART0.cpp:92
  #else
    ISR(USART0_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"    "\n\t"
                "push  r31"    "\n\t"
                :::);
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <__vector_22>:
__vector_22():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART0.cpp:99
#if PROGMEM_SIZE > 8192
                "jmp _do_dre"  "\n\t"
#else
                "rjmp _do_dre" "\n\t"
#endif
                ::"z"(&Serial0));
     c9e:	ef 93       	push	r30
     ca0:	ff 93       	push	r31
     ca2:	e9 e9       	ldi	r30, 0x99	; 153
     ca4:	f1 e6       	ldi	r31, 0x61	; 97
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART0.cpp:71
  #else
    ISR(USART0_RXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push      r30"     "\n\t"
            "push      r31"     "\n\t"
            :::);
     ca6:	08 c0       	rjmp	.+16     	; 0xcb8 <_do_dre()>

00000ca8 <__vector_21>:
__vector_21():
     ca8:	ef 93       	push	r30
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART0.cpp:78
#if PROGMEM_SIZE > 8192
            "jmp   _do_rxc"     "\n\t"
#else
            "rjmp   _do_rxc"    "\n\t"
#endif
            ::"z"(&Serial0));
     caa:	ff 93       	push	r31
     cac:	e9 e9       	ldi	r30, 0x99	; 153
     cae:	f1 e6       	ldi	r31, 0x61	; 97
     cb0:	31 c0       	rjmp	.+98     	; 0xd14 <_do_rxc()>

00000cb2 <__vector_23>:
__vector_23():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART0.cpp:45
#if PROGMEM_SIZE > 8192
            "jmp _do_txc"       "\n\t"
#else
            "rjmp _do_txc"      "\n\t"
#endif // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
     cb2:	ef 93       	push	r30
     cb4:	e0 e0       	ldi	r30, 0x00	; 0
     cb6:	52 c0       	rjmp	.+164    	; 0xd5c <_do_txc()>

00000cb8 <_do_dre()>:
_Z7_do_drev():
     cb8:	2f 93       	push	r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:245
      "out        0x3f,     r18"      "\n\t"  // restore SREG
      "pop         r18"               "\n\t"  // pop old r18
      "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
      "pop         r30"               "\n\t"
      "reti"                          "\n"   // and RETI!
      ::);
     cba:	2f b7       	in	r18, 0x3f	; 63
     cbc:	2f 93       	push	r18
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	af 93       	push	r26
     cc4:	bf 93       	push	r27
     cc6:	68 94       	set

00000cc8 <_poll_dre>:
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	c4 85       	ldd	r28, Z+12	; 0x0c
     cd0:	d8 e0       	ldi	r29, 0x08	; 8
     cd2:	96 89       	ldd	r25, Z+22	; 0x16
     cd4:	df 01       	movw	r26, r30
     cd6:	a9 0f       	add	r26, r25
     cd8:	b2 1f       	adc	r27, r18
     cda:	a9 5a       	subi	r26, 0xA9	; 169
     cdc:	bf 4f       	sbci	r27, 0xFF	; 255
     cde:	8c 91       	ld	r24, X
     ce0:	20 e4       	ldi	r18, 0x40	; 64
     ce2:	2c 83       	std	Y+4, r18	; 0x04
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	9f 5f       	subi	r25, 0xFF	; 255
     ce8:	9f 73       	andi	r25, 0x3F	; 63
     cea:	8d 81       	ldd	r24, Y+5	; 0x05
     cec:	25 89       	ldd	r18, Z+21	; 0x15
     cee:	29 13       	cpse	r18, r25
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <_done_dre_irq>
     cf2:	8f 7d       	andi	r24, 0xDF	; 223
     cf4:	8d 83       	std	Y+5, r24	; 0x05

00000cf6 <_done_dre_irq>:
     cf6:	96 8b       	std	Z+22, r25	; 0x16
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	0e f0       	brts	.+2      	; 0xd00 <_done_dre_irq+0xa>
     cfe:	09 cd       	rjmp	.-1518   	; 0x712 <_poll_dre_done>
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	2f 91       	pop	r18
     d0a:	2f bf       	out	0x3f, r18	; 63
     d0c:	2f 91       	pop	r18
     d0e:	ff 91       	pop	r31
     d10:	ef 91       	pop	r30
     d12:	18 95       	reti

00000d14 <_do_rxc()>:
_Z7_do_rxcv():
     d14:	2f 93       	push	r18
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:127
        "out       0x3f,       r18"   "\n\t" // and write back
        "pop        r18"              "\n\t" // used as tail pointer and z known zero.
        "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
        "pop        r30"              "\n\t" // pointer to serial instance
        "reti"                        "\n"   // return
        ::);
     d16:	2f b7       	in	r18, 0x3f	; 63
     d18:	2f 93       	push	r18
     d1a:	8f 93       	push	r24
     d1c:	9f 93       	push	r25
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	c4 85       	ldd	r28, Z+12	; 0x0c
     d24:	d8 e0       	ldi	r29, 0x08	; 8
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	98 81       	ld	r25, Y
     d2a:	81 fd       	sbrc	r24, 1
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <_end_rxc>
     d2e:	c3 89       	ldd	r28, Z+19	; 0x13
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	8c 0f       	add	r24, r28
     d34:	8f 73       	andi	r24, 0x3F	; 63
     d36:	24 89       	ldd	r18, Z+20	; 0x14
     d38:	28 17       	cp	r18, r24
     d3a:	31 f0       	breq	.+12     	; 0xd48 <_end_rxc>
     d3c:	ce 0f       	add	r28, r30
     d3e:	df 2f       	mov	r29, r31
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	d2 1f       	adc	r29, r18
     d44:	9f 8b       	std	Y+23, r25	; 0x17
     d46:	83 8b       	std	Z+19, r24	; 0x13

00000d48 <_end_rxc>:
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	2f 91       	pop	r18
     d52:	2f bf       	out	0x3f, r18	; 63
     d54:	2f 91       	pop	r18
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	18 95       	reti

00000d5c <_do_txc()>:
_Z7_do_txcv():
     d5c:	ff 93       	push	r31
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:68
        "out     0x3f,      r24"  "\n\t"  // restore it
        "pop      r24"            "\n\t"  // pop r24 to get it's old value back
        "pop      r31"            "\n\t"  // and r31
        "pop      r30"            "\n\t"  // Pop the register the ISR did
        "reti"                    "\n"    // return from the interrupt.
        ::);
     d5e:	8f 93       	push	r24
     d60:	8f b7       	in	r24, 0x3f	; 63
     d62:	8f 93       	push	r24
     d64:	f8 e0       	ldi	r31, 0x08	; 8

00000d66 <_txc_flush_rx>:
     d66:	80 81       	ld	r24, Z
     d68:	84 81       	ldd	r24, Z+4	; 0x04
     d6a:	87 ff       	sbrs	r24, 7
     d6c:	fc cf       	rjmp	.-8      	; 0xd66 <_txc_flush_rx>
     d6e:	85 81       	ldd	r24, Z+5	; 0x05
     d70:	8f 7b       	andi	r24, 0xBF	; 191
     d72:	80 68       	ori	r24, 0x80	; 128
     d74:	85 83       	std	Z+5, r24	; 0x05
     d76:	8f 91       	pop	r24
     d78:	8f bf       	out	0x3f, r24	; 63
     d7a:	8f 91       	pop	r24
     d7c:	ff 91       	pop	r31
     d7e:	ef 91       	pop	r30
     d80:	18 95       	reti

00000d82 <__vector_18>:
__vector_18():
     d82:	1f 92       	push	r1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:757


/**
 *@brief      TWI0 Slave Interrupt vector
 */
ISR(TWI0_TWIS_vect) {
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
TWI_HandleSlaveIRQ():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:510
 *@param      struct twiData *_data is a pointer to the structure that holds the Wire variables
 *
 *@return     void
 */
void TWI_HandleSlaveIRQ(struct twiData *_data) {
  uint8_t clientStatus = _data->_module->SSTATUS;
     da4:	e0 91 3c 62 	lds	r30, 0x623C	; 0x80623c <Wire+0xc>
     da8:	f0 91 3d 62 	lds	r31, 0x623D	; 0x80623d <Wire+0xd>
     dac:	93 85       	ldd	r25, Z+11	; 0x0b
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:513

  #if defined(TWI_MANDS)
    _data->_bools._toggleStreamFn = 0x01;             // reroute stream functions to slave elements
     dae:	80 91 3e 62 	lds	r24, 0x623E	; 0x80623e <Wire+0xe>
     db2:	80 61       	ori	r24, 0x10	; 16
     db4:	80 93 3e 62 	sts	0x623E, r24	; 0x80623e <Wire+0xe>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:516
  #endif

  if (clientStatus & TWI_APIF_bm) {  // Address/Stop Bit set
     db8:	96 ff       	sbrs	r25, 6
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:517
    if (clientStatus & TWI_AP_bm) {    // Address bit set
     dba:	39 c0       	rjmp	.+114    	; 0xe2e <__vector_18+0xac>
     dbc:	90 ff       	sbrs	r25, 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:569
      txHead   = &(_data->_bytesToWrite);
      txTail   = &(_data->_bytesWritten);
    #endif
  #endif

  (*address) = _data->_module->SDATA;       // saving address to expose to the user sketch
     dbe:	1c c0       	rjmp	.+56     	; 0xdf8 <__vector_18+0x76>
SlaveIRQ_AddrRead():
     dc0:	85 85       	ldd	r24, Z+13	; 0x0d
     dc2:	80 93 45 62 	sts	0x6245, r24	; 0x806245 <Wire+0x15>
TWI_HandleSlaveIRQ():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:518
    _data->_bools._toggleStreamFn = 0x01;             // reroute stream functions to slave elements
  #endif

  if (clientStatus & TWI_APIF_bm) {  // Address/Stop Bit set
    if (clientStatus & TWI_AP_bm) {    // Address bit set
      if (clientStatus & TWI_DIR_bm) {  // Master is reading
     dc6:	91 ff       	sbrs	r25, 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:572
  #endif

  (*address) = _data->_module->SDATA;       // saving address to expose to the user sketch

                                            // There is no way to identify a REPSTART, so when a Master Read occurs after a Master write
  NotifyUser_onReceive(_data);              // Notify user program "onReceive" if necessary
     dc8:	11 c0       	rjmp	.+34     	; 0xdec <__vector_18+0x6a>
SlaveIRQ_AddrRead():
     dca:	7d da       	rcall	.-2822   	; 0x2c6 <NotifyUser_onReceive.constprop.10>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:574

  (*txHead) = 0;                            // reset buffer positions so the Slave can start writing at zero.
     dcc:	10 92 46 62 	sts	0x6246, r1	; 0x806246 <Wire+0x16>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:575
  (*txTail) = 0;
     dd0:	10 92 47 62 	sts	0x6247, r1	; 0x806247 <Wire+0x17>
NotifyUser_onRequest():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:755
 *@param      struct twiData *_data is a pointer to the structure that holds the Wire variables
 *
 *@return     void
 */
void NotifyUser_onRequest(struct twiData *_data) {
  if (_data->user_onRequest != NULL) {
     dd4:	e0 91 48 62 	lds	r30, 0x6248	; 0x806248 <Wire+0x18>
     dd8:	f0 91 49 62 	lds	r31, 0x6249	; 0x806249 <Wire+0x19>
     ddc:	30 97       	sbiw	r30, 0x00	; 0
     dde:	09 f0       	breq	.+2      	; 0xde2 <__vector_18+0x60>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:756
    _data->user_onRequest();
     de0:	09 95       	icall
SlaveIRQ_DataWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:736
  uint8_t payload = _data->_module->SDATA;

  if ((*rxHead) < BUFFER_LENGTH) {                // if buffer is not full
    rxBuffer[(*rxHead)] = payload;                  // Load data into the buffer
    (*rxHead)++;                                    // Advance Head
    _data->_module->SCTRLB = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
     de2:	e0 91 3c 62 	lds	r30, 0x623C	; 0x80623c <Wire+0xc>
     de6:	f0 91 3d 62 	lds	r31, 0x623D	; 0x80623d <Wire+0xd>
     dea:	04 c0       	rjmp	.+8      	; 0xdf4 <__vector_18+0x72>
SlaveIRQ_AddrWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:607
      rxTail   = &(_data->_bytesRead);
    #endif
  #endif

  (*address) = _data->_module->SDATA;
  (*rxHead) = 0;                                    // reset buffer positions so the Master can start writing at zero.
     dec:	10 92 46 62 	sts	0x6246, r1	; 0x806246 <Wire+0x16>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:608
  (*rxTail) = 0;
     df0:	10 92 47 62 	sts	0x6247, r1	; 0x806247 <Wire+0x17>
SlaveIRQ_DataWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:736
  uint8_t payload = _data->_module->SDATA;

  if ((*rxHead) < BUFFER_LENGTH) {                // if buffer is not full
    rxBuffer[(*rxHead)] = payload;                  // Load data into the buffer
    (*rxHead)++;                                    // Advance Head
    _data->_module->SCTRLB = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	47 c0       	rjmp	.+142    	; 0xe86 <__vector_18+0x104>
SlaveIRQ_Stop():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:635
      txHead   = &(_data->_bytesToWrite);
      rxHead   = &(_data->_bytesToRead);
    #endif
  #endif

  _data->_module->SSTATUS = TWI_APIF_bm;      // Clear Flag, no further action needed
     df8:	80 e4       	ldi	r24, 0x40	; 64
     dfa:	83 87       	std	Z+11, r24	; 0x0b
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:636
  NotifyUser_onReceive(_data);                // Notify user program "onReceive" if necessary
     dfc:	64 da       	rcall	.-2872   	; 0x2c6 <NotifyUser_onReceive.constprop.10>
SlaveIRQ_DataReadNack():
     dfe:	10 92 46 62 	sts	0x6246, r1	; 0x806246 <Wire+0x16>
TWI_HandleSlaveIRQ():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:664
  #endif


  _data->_bools._ackMatters = false;                // stop checking for NACK
  _data->_module->SCTRLB = TWI_SCMD_COMPTRANS_gc;   // "Wait for any Start (S/Sr) condition"
  (*txHead) = 0;                                    // Abort further data writes
     e02:	80 91 3e 62 	lds	r24, 0x623E	; 0x80623e <Wire+0xe>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:540
      SlaveIRQ_DataWrite(_data);
    }
  }

  #if defined(TWI_MANDS)
    _data->_bools._toggleStreamFn = 0x00;
     e06:	8f 7e       	andi	r24, 0xEF	; 239
     e08:	80 93 3e 62 	sts	0x623E, r24	; 0x80623e <Wire+0xe>
__vector_18():
     e0c:	ff 91       	pop	r31
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:759
  TwoWire::onSlaveIRQ(&TWI0);
}
     e0e:	ef 91       	pop	r30
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti
TWI_HandleSlaveIRQ():
     e2e:	97 ff       	sbrs	r25, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:526
        SlaveIRQ_AddrWrite(_data);
      }
    } else {                          // Stop bit set
      SlaveIRQ_Stop(_data);
    }
  } else if (clientStatus & TWI_DIF_bm) {  // Data bit set
     e30:	e8 cf       	rjmp	.-48     	; 0xe02 <__vector_18+0x80>
     e32:	91 ff       	sbrs	r25, 1
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:527
    if (clientStatus & TWI_DIR_bm) {         // Master is reading
     e34:	2a c0       	rjmp	.+84     	; 0xe8a <__vector_18+0x108>
     e36:	93 fd       	sbrc	r25, 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:528
      if ((clientStatus & TWI_COLL_bm) ||    // If a collision was detected, or
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <__vector_18+0xc0>
     e3a:	94 ff       	sbrs	r25, 4
     e3c:	08 c0       	rjmp	.+16     	; 0xe4e <__vector_18+0xcc>
     e3e:	87 ff       	sbrs	r24, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:529
         ((clientStatus & TWI_RXACK_bm) && _data->_bools._ackMatters)) {  // RXACK bit is set and it matters
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <__vector_18+0xcc>
SlaveIRQ_DataReadNack():
     e42:	8f 77       	andi	r24, 0x7F	; 127
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:662
      txHead   = &(_data->_bytesToWrite);
    #endif
  #endif


  _data->_bools._ackMatters = false;                // stop checking for NACK
     e44:	80 93 3e 62 	sts	0x623E, r24	; 0x80623e <Wire+0xe>
     e48:	82 e0       	ldi	r24, 0x02	; 2
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:663
  _data->_module->SCTRLB = TWI_SCMD_COMPTRANS_gc;   // "Wait for any Start (S/Sr) condition"
     e4a:	82 87       	std	Z+10, r24	; 0x0a
     e4c:	d8 cf       	rjmp	.-80     	; 0xdfe <__vector_18+0x7c>
SlaveIRQ_DataReadAck():
     e4e:	80 68       	ori	r24, 0x80	; 128
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:692
      txTail   = &(_data->_bytesWritten);
      txBuffer =   _data->_txBuffer;
    #endif
  #endif

  _data->_bools._ackMatters = true;             // start checking for NACK
     e50:	80 93 3e 62 	sts	0x623E, r24	; 0x80623e <Wire+0xe>
     e54:	80 91 3f 62 	lds	r24, 0x623F	; 0x80623f <Wire+0xf>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:693
  _data->_bytesTransmittedS++;                  // increment bytes transmitted counter (for register model)
     e58:	8f 5f       	subi	r24, 0xFF	; 255
     e5a:	80 93 3f 62 	sts	0x623F, r24	; 0x80623f <Wire+0xf>
     e5e:	a0 91 47 62 	lds	r26, 0x6247	; 0x806247 <Wire+0x17>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:694
  if ((*txTail) < (*txHead)) {                  // Data is available
     e62:	80 91 46 62 	lds	r24, 0x6246	; 0x806246 <Wire+0x16>
     e66:	a8 17       	cp	r26, r24
     e68:	68 f4       	brcc	.+26     	; 0xe84 <__vector_18+0x102>
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:695
    _data->_module->SDATA = txBuffer[(*txTail)];    // Writing to the register to send data
     e6c:	a0 5b       	subi	r26, 0xB0	; 176
     e6e:	bc 49       	sbci	r27, 0x9C	; 156
     e70:	8c 91       	ld	r24, X
     e72:	85 87       	std	Z+13, r24	; 0x0d
     e74:	83 e0       	ldi	r24, 0x03	; 3
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:696
    _data->_module->SCTRLB = TWI_SCMD_RESPONSE_gc;  // "Execute a byte read operation followed by Acknowledge Action"
     e76:	82 87       	std	Z+10, r24	; 0x0a
     e78:	80 91 47 62 	lds	r24, 0x6247	; 0x806247 <Wire+0x17>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:697
    (*txTail)++;                                    // Increment counter for sent bytes
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	80 93 47 62 	sts	0x6247, r24	; 0x806247 <Wire+0x17>
     e82:	bf cf       	rjmp	.-130    	; 0xe02 <__vector_18+0x80>
     e84:	82 e0       	ldi	r24, 0x02	; 2
SlaveIRQ_DataWrite():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:700

  } else {                                            // No more data available
    _data->_module->SCTRLB = TWI_SCMD_COMPTRANS_gc;   // "Wait for any Start (S/Sr) condition"
     e86:	82 87       	std	Z+10, r24	; 0x0a
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:736
  uint8_t payload = _data->_module->SDATA;

  if ((*rxHead) < BUFFER_LENGTH) {                // if buffer is not full
    rxBuffer[(*rxHead)] = payload;                  // Load data into the buffer
    (*rxHead)++;                                    // Advance Head
    _data->_module->SCTRLB = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
     e88:	bc cf       	rjmp	.-136    	; 0xe02 <__vector_18+0x80>
     e8a:	95 85       	ldd	r25, Z+13	; 0x0d
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:731
      rxBuffer =   _data->_rxBuffer;
    #endif
  #endif


  uint8_t payload = _data->_module->SDATA;
     e8c:	80 91 46 62 	lds	r24, 0x6246	; 0x806246 <Wire+0x16>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:733

  if ((*rxHead) < BUFFER_LENGTH) {                // if buffer is not full
     e90:	82 38       	cpi	r24, 0x82	; 130
     e92:	58 f4       	brcc	.+22     	; 0xeaa <__vector_18+0x128>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:734
    rxBuffer[(*rxHead)] = payload;                  // Load data into the buffer
     e94:	e8 2f       	mov	r30, r24
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	e0 5b       	subi	r30, 0xB0	; 176
     e9a:	fc 49       	sbci	r31, 0x9C	; 156
     e9c:	90 83       	st	Z, r25
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:735
    (*rxHead)++;                                    // Advance Head
     e9e:	80 91 46 62 	lds	r24, 0x6246	; 0x806246 <Wire+0x16>
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	80 93 46 62 	sts	0x6246, r24	; 0x806246 <Wire+0x16>
     ea8:	9c cf       	rjmp	.-200    	; 0xde2 <__vector_18+0x60>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:738
    _data->_module->SCTRLB = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
  } else {                                          // else buffer is full
    _data->_module->SCTRLB = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;  // "Execute ACK Action succeeded by waiting for any Start (S/Sr) condition"
     eaa:	86 e0       	ldi	r24, 0x06	; 6
     eac:	82 87       	std	Z+10, r24	; 0x0a
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:739
    (*rxHead) = 0;                                           // Dismiss all received Data since data integrity can't be guaranteed
     eae:	10 92 46 62 	sts	0x6246, r1	; 0x806246 <Wire+0x16>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:740
    (*rxTail) = 0;  // Make sure available will return 0
     eb2:	10 92 47 62 	sts	0x6247, r1	; 0x806247 <Wire+0x17>
     eb6:	a5 cf       	rjmp	.-182    	; 0xe02 <__vector_18+0x80>

00000eb8 <__vector_42>:
__vector_42():
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
     eda:	53 df       	rcall	.-346    	; 0xd82 <__vector_18>
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_6>:
__vector_6():
     efe:	1f 92       	push	r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:257

volatile uint8_t wake = 0;
volatile uint32_t ticks = 0;
// programmable interrupt timer
// fires at RTC_HZ (16)
ISR(RTC_PIT_vect) {
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	8f 93       	push	r24
     f0a:	9f 93       	push	r25
     f0c:	af 93       	push	r26
     f0e:	bf 93       	push	r27
     f10:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:258
  wake = 1;
     f12:	80 93 94 61 	sts	0x6194, r24	; 0x806194 <wake>
     f16:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f0153>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:259
  RTC.PITINTFLAGS =
     f1a:	80 91 90 61 	lds	r24, 0x6190	; 0x806190 <ticks>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:261
      RTC_PI_bm; /* Clear interrupt flag by writing '1' (required) */
  ticks++;
     f1e:	90 91 91 61 	lds	r25, 0x6191	; 0x806191 <ticks+0x1>
     f22:	a0 91 92 61 	lds	r26, 0x6192	; 0x806192 <ticks+0x2>
     f26:	b0 91 93 61 	lds	r27, 0x6193	; 0x806193 <ticks+0x3>
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	a1 1d       	adc	r26, r1
     f2e:	b1 1d       	adc	r27, r1
     f30:	80 93 90 61 	sts	0x6190, r24	; 0x806190 <ticks>
     f34:	90 93 91 61 	sts	0x6191, r25	; 0x806191 <ticks+0x1>
     f38:	a0 93 92 61 	sts	0x6192, r26	; 0x806192 <ticks+0x2>
     f3c:	b0 93 93 61 	sts	0x6193, r27	; 0x806193 <ticks+0x3>
     f40:	bf 91       	pop	r27
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:262
}
     f42:	af 91       	pop	r26
     f44:	9f 91       	pop	r25
     f46:	8f 91       	pop	r24
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <global constructors keyed to 65535_0_DualModeExample.ino.cpp.o.3534>:
_GLOBAL__I_65535_0_DualModeExample.ino.cpp.o.3534():
     f52:	e9 e9       	ldi	r30, 0x99	; 153
     f54:	f1 e6       	ldi	r31, 0x61	; 97
     f56:	12 82       	std	Z+2, r1	; 0x02
     f58:	13 82       	std	Z+3, r1	; 0x03
     f5a:	88 ee       	ldi	r24, 0xE8	; 232
     f5c:	93 e0       	ldi	r25, 0x03	; 3
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	84 83       	std	Z+4, r24	; 0x04
     f64:	95 83       	std	Z+5, r25	; 0x05
     f66:	a6 83       	std	Z+6, r26	; 0x06
     f68:	b7 83       	std	Z+7, r27	; 0x07
     f6a:	25 e5       	ldi	r18, 0x55	; 85
     f6c:	30 e6       	ldi	r19, 0x60	; 96
     f6e:	20 83       	st	Z, r18
     f70:	31 83       	std	Z+1, r19	; 0x01
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	38 e0       	ldi	r19, 0x08	; 8
     f76:	24 87       	std	Z+12, r18	; 0x0c
     f78:	35 87       	std	Z+13, r19	; 0x0d
     f7a:	2a eb       	ldi	r18, 0xBA	; 186
     f7c:	31 e0       	ldi	r19, 0x01	; 1
     f7e:	26 87       	std	Z+14, r18	; 0x0e
     f80:	37 87       	std	Z+15, r19	; 0x0f
     f82:	22 e0       	ldi	r18, 0x02	; 2
     f84:	20 8b       	std	Z+16, r18	; 0x10
     f86:	11 8a       	std	Z+17, r1	; 0x11
     f88:	12 8a       	std	Z+18, r1	; 0x12
     f8a:	e0 e3       	ldi	r30, 0x30	; 48
     f8c:	f2 e6       	ldi	r31, 0x62	; 98
     f8e:	12 82       	std	Z+2, r1	; 0x02
     f90:	13 82       	std	Z+3, r1	; 0x03
     f92:	84 83       	std	Z+4, r24	; 0x04
     f94:	95 83       	std	Z+5, r25	; 0x05
     f96:	a6 83       	std	Z+6, r26	; 0x06
     f98:	b7 83       	std	Z+7, r27	; 0x07
     f9a:	8f e6       	ldi	r24, 0x6F	; 111
     f9c:	90 e6       	ldi	r25, 0x60	; 96
     f9e:	80 83       	st	Z, r24
     fa0:	91 83       	std	Z+1, r25	; 0x01
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	99 e0       	ldi	r25, 0x09	; 9
     fa6:	84 87       	std	Z+12, r24	; 0x0c
     fa8:	95 87       	std	Z+13, r25	; 0x0d
     faa:	08 95       	ret

00000fac <main>:
main():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	2a 97       	sbiw	r28, 0x0a	; 10
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	de bf       	out	0x3e, r29	; 62
init_clock():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1330
    #elif (F_CPU == 14000000)
      _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB,  (CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm));
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x0A << 2));
      #warning "14 MHz, currently selected for F_CPU, is not supported by this core and has not been tested. Expect timekeeping problems."
    #elif (F_CPU == 10000000) /* 10 MHz = 20 MHz prescaled by 2 */
      _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB,  (CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm));
     fba:	88 ed       	ldi	r24, 0xD8	; 216
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	84 bf       	out	0x34, r24	; 52
     fc0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1331
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x08 << 2));
     fc4:	20 e2       	ldi	r18, 0x20	; 32
     fc6:	84 bf       	out	0x34, r24	; 52
     fc8:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
init_TCA0():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1565
}

void __attribute__((weak)) init_TCA0() {
  /* TCA0_PINS from pins_arduino.h */
  /* Enable Split Mode to get more PWM pins, since analogWrite() only provides 8-bit PWM anyway*/
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
     fcc:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f0a03>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1570

  // Only 1 WGM is available in split mode

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
     fd0:	8e ef       	ldi	r24, 0xFE	; 254
     fd2:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f0a26>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1571
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
     fd6:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f0a27>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1602
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) // use 64 divider unless it's 5 MHz or under
    #if defined(MILLIS_USE_TIMERA0) && (TIME_TRACKING_TIMER_DIVIDER != 64)
      #error "wiring.c and timers.h want to set millis timer TCA0 to different divider"
    #endif
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
     fda:	2b e0       	ldi	r18, 0x0B	; 11
     fdc:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
init_timers():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1554
  init_TCA0();
  #if (defined(TCA1))
    PORTMUX.TCAROUTEA = TCA0_PINS | TCA1_PINS;
    init_TCA1();
  #else
    PORTMUX.TCAROUTEA = TCA0_PINS;
     fe0:	33 e0       	ldi	r19, 0x03	; 3
     fe2:	30 93 e6 05 	sts	0x05E6, r19	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7f05e6>
init_TCBs():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1657
 * Set up routing (defined in pins_arduino.h)
 * Notice how there's no semicolon until after the preprocessor conditionals.
 * In other words, that's all one line.
 */

  PORTMUX.TCBROUTEA = 0
     fe6:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7f05e7>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1696
  #endif

  // Timer B Setup loop for TCB[0:end]
  do {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
     fea:	47 e0       	ldi	r20, 0x07	; 7
     fec:	40 93 01 0b 	sts	0x0B01, r20	; 0x800b01 <__TEXT_REGION_LENGTH__+0x7f0b01>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1699

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD; // TOP = 254 see section at start
     ff0:	80 93 0c 0b 	sts	0x0B0C, r24	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7f0b0c>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1702
    // default duty 50% - we have to set something here because of the
    // errata, otherwise CCMP will not get the CCMPL either.
    timer_B->CCMPH = PWM_TIMER_COMPARE;
     ff4:	10 92 0d 0b 	sts	0x0B0D, r1	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7f0b0d>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1705

    // Use TCA clock (250kHz, +/- 50%) and enable
    timer_B->CTRLA = (TCB_CLKSEL_TCA0_gc) | (TCB_ENABLE_bm);
     ff8:	25 e0       	ldi	r18, 0x05	; 5
     ffa:	20 93 00 0b 	sts	0x0B00, r18	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1696
  #endif

  // Timer B Setup loop for TCB[0:end]
  do {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
     ffe:	40 93 11 0b 	sts	0x0B11, r20	; 0x800b11 <__TEXT_REGION_LENGTH__+0x7f0b11>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1699

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD; // TOP = 254 see section at start
    1002:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1702
    // default duty 50% - we have to set something here because of the
    // errata, otherwise CCMP will not get the CCMPL either.
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    1006:	10 92 1d 0b 	sts	0x0B1D, r1	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1705

    // Use TCA clock (250kHz, +/- 50%) and enable
    timer_B->CTRLA = (TCB_CLKSEL_TCA0_gc) | (TCB_ENABLE_bm);
    100a:	20 93 10 0b 	sts	0x0B10, r18	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
init_TCD0():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1749
 * be set in the status register. We skip checking this here because, as we do many places the  *
 * initiialization functions assume that the chip starts from a reset condition.                */

void __attribute__((weak)) init_TCD0() {
  #if defined(USE_TIMERD0_PWM) || defined (MILLIS_USE_TIMERD0)
    TCD0.CMPACLR  = 0x0FFF;
    100e:	4f ef       	ldi	r20, 0xFF	; 255
    1010:	5f e0       	ldi	r21, 0x0F	; 15
    1012:	40 93 aa 0b 	sts	0x0BAA, r20	; 0x800baa <__TEXT_REGION_LENGTH__+0x7f0baa>
    1016:	50 93 ab 0b 	sts	0x0BAB, r21	; 0x800bab <__TEXT_REGION_LENGTH__+0x7f0bab>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1753
    // Match with CMPBCLR clears all outputs. For normal PWM this just needs to be higher than
    // it will count to - so set to maximum (other settings used for non-overlapping PWM and
    // other advanced functionality)
    TCD0.CTRLC    = 0x80;                   // WOD outputs PWM B, WOC outputs PWM A
    101a:	80 e8       	ldi	r24, 0x80	; 128
    101c:	80 93 82 0b 	sts	0x0B82, r24	; 0x800b82 <__TEXT_REGION_LENGTH__+0x7f0b82>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1755
    // That doesn't need to be that way, but I declare that that's all we support through analogWrite()
    TCD0.CTRLB    = TIMERD0_WGMODE_SETTING;
    1020:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <__TEXT_REGION_LENGTH__+0x7f0b81>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1758
    // One ramp or dual slope are the only options that are viable to reproduce classic behavior without
    // considerable calculation overhead. We use one-ramp mode
    TCD0.CMPBCLR  = TIMERD0_TOP_SETTING;
    1024:	4d ef       	ldi	r20, 0xFD	; 253
    1026:	51 e0       	ldi	r21, 0x01	; 1
    1028:	40 93 ae 0b 	sts	0x0BAE, r20	; 0x800bae <__TEXT_REGION_LENGTH__+0x7f0bae>
    102c:	50 93 af 0b 	sts	0x0BAF, r21	; 0x800baf <__TEXT_REGION_LENGTH__+0x7f0baf>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1767
    #if defined(TIMERD0_SET_CLOCK)
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (TIMERD0_SET_CLOCK));
    #endif


    TCD0.CTRLA    = TIMERD0_CLOCK_SETTING | TCD_ENABLE_bm;
    1030:	81 e1       	ldi	r24, 0x11	; 17
    1032:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7f0b80>
init_ADC0():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1203
    #elif F_CPU >= 20000000
      ADC0.CTRLC = ADC_PRESC_DIV16_gc; // 1.25 @ 20 MHz
    #elif F_CPU >  12000000
      ADC0.CTRLC = ADC_PRESC_DIV12_gc; // 1 @ 12, 1.333 @ 16 MHz
    #elif F_CPU >= 8000000
      ADC0.CTRLC = ADC_PRESC_DIV8_gc;  // 1-1.499 between 8 and 11.99 MHz
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f0602>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1209
    #elif F_CPU >= 4000000
      ADC0.CTRLC = ADC_PRESC_DIV4_gc;  // 1 MHz
    #else  // 1 MHz / 2 = 500 kHz - the lowest setting
      ADC0.CTRLC = ADC_PRESC_DIV2_gc;
    #endif
    ADC0.SAMPCTRL = 14; // 16 ADC clock sampling time - should be about the same amount of *time* as originally?
    103c:	8e e0       	ldi	r24, 0x0E	; 14
    103e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7f0605>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1211
    // This is WAY conservative! We could drop it down...
    ADC0.CTRLD = ADC_INITDLY_DLY64_gc; // VREF can take 50uS to become ready, and we're running the ADC clock
    1042:	80 e6       	ldi	r24, 0x60	; 96
    1044:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f0603>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1214
    // at around 1 MHz, so we want 64 ADC clocks when we start up a new reference so we don't get bad readings at first
    /* Enable ADC */
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_10BIT_gc;
    1048:	20 93 00 06 	sts	0x0600, r18	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f0600>
analogReference():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_analog.c:124


void analogReference(uint8_t mode) {
  check_valid_analog_ref(mode);
  if (mode < 7 && mode !=4) {
    VREF.ADC0REF = (VREF.ADC0REF & ~(VREF_REFSEL_gm))|(mode);
    104c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    1050:	88 7f       	andi	r24, 0xF8	; 248
    1052:	85 60       	ori	r24, 0x05	; 5
    1054:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
DACReference():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_analog.c:131
}

void DACReference(uint8_t mode) {
  check_valid_analog_ref(mode);
  if (mode < 7 && mode !=4) {
    VREF.DAC0REF = (VREF.DAC0REF & ~(VREF_REFSEL_gm))|(mode);
    1058:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    105c:	88 7f       	andi	r24, 0xF8	; 248
    105e:	85 60       	ori	r24, 0x05	; 5
    1060:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
init_millis():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1134
      // RTC.CLKSEL = 0; this is the power on value
    #endif
      RTC.INTCTRL = 0x01; // enable overflow interrupt
      RTC.CTRLA = (RTC_RUNSTDBY_bm|RTC_RTCEN_bm|RTC_PRESCALER_DIV32_gc);//fire it up, prescale by 32.
    #else // It's a type b timer
      _timer->CCMP = TIME_TRACKING_TIMER_PERIOD;
    1064:	47 e8       	ldi	r20, 0x87	; 135
    1066:	53 e1       	ldi	r21, 0x13	; 19
    1068:	40 93 2c 0b 	sts	0x0B2C, r20	; 0x800b2c <__TEXT_REGION_LENGTH__+0x7f0b2c>
    106c:	50 93 2d 0b 	sts	0x0B2D, r21	; 0x800b2d <__TEXT_REGION_LENGTH__+0x7f0b2d>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1136
      // Enable timer interrupt, but clear the rest of register
      _timer->INTCTRL = TCB_CAPT_bm;
    1070:	90 93 25 0b 	sts	0x0B25, r25	; 0x800b25 <__TEXT_REGION_LENGTH__+0x7f0b25>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1138
      // Clear timer mode (since it will have been set as PWM by init())
      _timer->CTRLB = 0;
    1074:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <__TEXT_REGION_LENGTH__+0x7f0b21>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:1140
      // CLK_PER/1 is 0b00, . CLK_PER/2 is 0b01, so bitwise OR of valid divider with enable works
      _timer->CTRLA = TIME_TRACKING_TIMER_DIVIDER|TCB_ENABLE_bm;  // Keep this last before enabling interrupts to ensure tracking as accurate as possible
    1078:	30 93 20 0b 	sts	0x0B20, r19	; 0x800b20 <__TEXT_REGION_LENGTH__+0x7f0b20>
main():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
    107c:	78 94       	sei
setup():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:317
    // stop condition.
  }
}

void setup() {
  memset(reg.r, 0, sizeof(ewdt_regs_t));
    107e:	89 e3       	ldi	r24, 0x39	; 57
    1080:	e3 e5       	ldi	r30, 0x53	; 83
    1082:	f1 e6       	ldi	r31, 0x61	; 97
    1084:	df 01       	movw	r26, r30
    1086:	08 2f       	mov	r16, r24
    1088:	1d 92       	st	X+, r1
    108a:	0a 95       	dec	r16
    108c:	e9 f7       	brne	.-6      	; 0x1088 <main+0xdc>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:318
  memset(bak.r, 0, sizeof(ewdt_regs_t));
    108e:	ea e1       	ldi	r30, 0x1A	; 26
    1090:	f1 e6       	ldi	r31, 0x61	; 97
    1092:	df 01       	movw	r26, r30
    1094:	1d 92       	st	X+, r1
    1096:	8a 95       	dec	r24
    1098:	e9 f7       	brne	.-6      	; 0x1094 <main+0xe8>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:319
  TCB2.CTRLA |= 1 << TCB_RUNSTDBY_bp;
    109a:	80 91 20 0b 	lds	r24, 0x0B20	; 0x800b20 <__TEXT_REGION_LENGTH__+0x7f0b20>
    109e:	80 64       	ori	r24, 0x40	; 64
    10a0:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x7f0b20>
enableDualMode():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:634
 *
 *@return     void
 */
void TwoWire::enableDualMode(bool fmp_enable) {
  #if defined(TWI_DUALCTRL)
    vars._module->DUALCTRL = ((fmp_enable << TWI_FMPEN_bp) | TWI_ENABLE_bm);
    10a4:	e0 91 3c 62 	lds	r30, 0x623C	; 0x80623c <Wire+0xc>
    10a8:	f0 91 3d 62 	lds	r31, 0x623D	; 0x80623d <Wire+0xd>
    10ac:	91 83       	std	Z+1, r25	; 0x01
setup():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:321
  Wire.enableDualMode(false);
  Serial.begin(115200);
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	52 ec       	ldi	r21, 0xC2	; 194
    10b2:	61 e0       	ldi	r22, 0x01	; 1
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	89 e9       	ldi	r24, 0x99	; 153
    10b8:	91 e6       	ldi	r25, 0x61	; 97
    10ba:	bd dc       	rcall	.-1670   	; 0xa36 <UartClass::begin(unsigned long)>
TWI_MasterInit():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:50
 *
 *@return     void
 */
void TWI_MasterInit(struct twiData *_data) {
  #if defined(TWI_MANDS)                            // Check if the user wants to use Master AND Slave
    if (_data->_bools._hostEnabled == 1) {          // Slave is allowed to be enabled, don't re-enable the host though
    10bc:	80 91 3e 62 	lds	r24, 0x623E	; 0x80623e <Wire+0xe>
    10c0:	85 fd       	sbrc	r24, 5
    10c2:	27 c0       	rjmp	.+78     	; 0x1112 <main+0x166>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:61
    }
  #endif


  #if defined(TWI1)                                 // More then one TWI used
    if        (&TWI0 == _data->_module) {           // check which one this function is working with
    10c4:	80 91 3c 62 	lds	r24, 0x623C	; 0x80623c <Wire+0xc>
    10c8:	90 91 3d 62 	lds	r25, 0x623D	; 0x80623d <Wire+0xd>
    10cc:	81 15       	cp	r24, r1
    10ce:	b9 e0       	ldi	r27, 0x09	; 9
    10d0:	9b 07       	cpc	r25, r27
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <main+0x12a>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:62
      TWI0_ClearPins();
    10d4:	8a c1       	rjmp	.+788    	; 0x13ea <main+0x43e>
    10d6:	9e db       	rcall	.-2244   	; 0x814 <TWI0_ClearPins>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:70
    }
  #else                                             // Only one TWI is used
    TWI0_ClearPins();                               // Only one option is possible
  #endif

  _data->_bools._hostEnabled    = 1;
    10d8:	80 91 3e 62 	lds	r24, 0x623E	; 0x80623e <Wire+0xe>
    10dc:	80 62       	ori	r24, 0x20	; 32
    10de:	80 93 3e 62 	sts	0x623E, r24	; 0x80623e <Wire+0xe>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:71
  _data->_module->MCTRLA        = TWI_ENABLE_bm;  // Master Interrupt flags stay disabled
    10e2:	e0 91 3c 62 	lds	r30, 0x623C	; 0x80623c <Wire+0xc>
    10e6:	f0 91 3d 62 	lds	r31, 0x623D	; 0x80623d <Wire+0xd>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	83 83       	std	Z+3, r24	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:72
  _data->_module->MSTATUS       = TWI_BUSSTATE_IDLE_gc;
    10ee:	85 83       	std	Z+5, r24	; 0x05
TWI_MasterSetBaud():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:218
  } else {
    if (frequency < 1000) {
      return 1;
    }
  }
  if (_data->_bools._hostEnabled == 1) {                  // Do something only if the host is enabled.
    10f0:	90 91 3e 62 	lds	r25, 0x623E	; 0x80623e <Wire+0xe>
    10f4:	95 ff       	sbrs	r25, 5
    10f6:	0d c0       	rjmp	.+26     	; 0x1112 <main+0x166>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:220
    uint8_t newBaud = TWI_MasterCalcBaud(frequency);      // get the new Baud value
    uint8_t oldBaud = _data->_module->MBAUD;              // load the old Baud value
    10f8:	96 81       	ldd	r25, Z+6	; 0x06
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:221
    if (newBaud != oldBaud) {                             // compare both, in case the code is issuing this before every transmission.
    10fa:	9a 32       	cpi	r25, 0x2A	; 42
    10fc:	51 f0       	breq	.+20     	; 0x1112 <main+0x166>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:222
      uint8_t restore = _data->_module->MCTRLA;           // Save the old Master state
    10fe:	23 81       	ldd	r18, Z+3	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:223
      _data->_module->MCTRLA    = 0;                      // Disable Master
    1100:	13 82       	std	Z+3, r1	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:224
      _data->_module->MBAUD     = newBaud;                // update Baud register
    1102:	9a e2       	ldi	r25, 0x2A	; 42
    1104:	96 83       	std	Z+6, r25	; 0x06
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:228
      if (frequency > 400000) {
        _data->_module->CTRLA  |=  TWI_FMPEN_bm;          // Enable FastMode+
      } else {
        _data->_module->CTRLA  &= ~TWI_FMPEN_bm;          // Disable FastMode+
    1106:	90 81       	ld	r25, Z
    1108:	9d 7f       	andi	r25, 0xFD	; 253
    110a:	90 83       	st	Z, r25
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:230
      }
      _data->_module->MCTRLA    = restore;                // restore the old register, thus enabling it again
    110c:	23 83       	std	Z+3, r18	; 0x03
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:231
      if (restore & TWI_ENABLE_bm) {                      // If the TWI was enabled,
    110e:	20 fd       	sbrc	r18, 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:232
        _data->_module->MSTATUS   = TWI_BUSSTATE_IDLE_gc;   // Force the state machine into IDLE according to the data sheet
    1110:	85 83       	std	Z+5, r24	; 0x05
setup():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:323
  Wire.begin();
  Serial.println("boot");
    1112:	80 e8       	ldi	r24, 0x80	; 128
    1114:	90 e6       	ldi	r25, 0x60	; 96
    1116:	90 dd       	rcall	.-1248   	; 0xc38 <Print::println(char const*) [clone .constprop.32]>
ina_reset():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:112
#define P_LED PIN_PD4

// reset the ina3221
void ina_reset() {
  conf_reg_t conf;
  ina_rr(INA3221_REG_CONF, (uint16_t *)&conf);
    1118:	ce 01       	movw	r24, r28
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	ab dc       	rcall	.-1706   	; 0xa74 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]>
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:113
  conf.reset = 1;
    1120:	80 68       	ori	r24, 0x80	; 128
    1122:	8a 83       	std	Y+2, r24	; 0x02
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:114
  ina_wr(INA3221_REG_CONF, (uint16_t *)&conf);
    1124:	ce 01       	movw	r24, r28
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	8f dc       	rcall	.-1762   	; 0xa48 <ina_wr(ina3221_reg_t, unsigned int*) [clone .constprop.58]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:115
  delay(100);
    112a:	64 e6       	ldi	r22, 0x64	; 100
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	13 d9       	rcall	.-3546   	; 0x35a <delay>
ina_config():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:121
}

// configure the ina3221 for ~410ms samples
void ina_config() {
  conf_reg_t conf_reg;
  ina_rr(INA3221_REG_CONF, (uint16_t *)&conf_reg);
    1134:	ce 01       	movw	r24, r28
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	9d dc       	rcall	.-1734   	; 0xa74 <ina_rr(ina3221_reg_t, unsigned int*) [clone .constprop.55]>
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:122
  conf_reg.ch1_en = 1;
    113c:	80 78       	andi	r24, 0x80	; 128
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:125
  conf_reg.ch2_en = 1;
  conf_reg.ch3_en = 1;
  conf_reg.avg_mode = INA3221_REG_CONF_AVG_16; // was 64
    113e:	99 81       	ldd	r25, Y+1	; 0x01
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:126
  conf_reg.bus_conv_time = INA3221_REG_CONF_CT_588US;
    1140:	84 67       	ori	r24, 0x74	; 116
    1142:	8a 83       	std	Y+2, r24	; 0x02
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:127
  conf_reg.shunt_conv_time = INA3221_REG_CONF_CT_8244US;
    1144:	98 6f       	ori	r25, 0xF8	; 248
    1146:	99 83       	std	Y+1, r25	; 0x01
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:128
  ina_wr(INA3221_REG_CONF, (uint16_t *)&conf_reg);
    1148:	ce 01       	movw	r24, r28
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	7d dc       	rcall	.-1798   	; 0xa48 <ina_wr(ina3221_reg_t, unsigned int*) [clone .constprop.58]>
_pinMode():
    114e:	80 e1       	ldi	r24, 0x10	; 16
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:229
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
    1150:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
digitalWriteFast():
    1154:	6c 9a       	sbi	0x0d, 4	; 13
millis():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring_digital.c:448
  if (val == LOW)
    vport->OUT &= ~mask;
  else if (val == CHANGE)
    vport->IN |= mask;
  else // HIGH
    vport->OUT |= mask;
    1156:	8f b7       	in	r24, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:181
  unsigned long millis()
  {
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    1158:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:182
    cli();
    115a:	c0 90 95 61 	lds	r12, 0x6195	; 0x806195 <timer_millis>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:194
      m = (m << 16);
      m += RTC.CNT;
      // now correct for there being 1000ms to the second instead of 1024
      m = m - (m >> 5) - (m >> 6);
    #else
      m = timer_millis;
    115e:	d0 90 96 61 	lds	r13, 0x6196	; 0x806196 <timer_millis+0x1>
    1162:	e0 90 97 61 	lds	r14, 0x6197	; 0x806197 <timer_millis+0x2>
    1166:	f0 90 98 61 	lds	r15, 0x6198	; 0x806198 <timer_millis+0x3>
    116a:	8f bf       	out	0x3f, r24	; 63
RTC_init():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:195
      SREG = oldSREG;
    116c:	88 ed       	ldi	r24, 0xD8	; 216
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:206
  _PROTECTED_WRITE(CLKCTRL.XOSC32KCTRLA,
                   CLKCTRL_CSUT_1K_gc            /* 64k cycles */
                       | 1 << CLKCTRL_ENABLE_bp   /* Enable: enabled */
                       | 1 << CLKCTRL_RUNSTDBY_bp /* Run standby: enabled */
                       | 0 << CLKCTRL_SEL_bp      /* Select: disabled */
                       | 1 << CLKCTRL_LPMODE_bp /* Low-Power Mode: disabled */);
    116e:	23 e8       	ldi	r18, 0x83	; 131
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	84 bf       	out	0x34, r24	; 52
    1174:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    1178:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:209

  // wait for the crystal to start
  while (0 == (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm)) {
    117c:	83 fd       	sbrc	r24, 3
    117e:	3d c1       	rjmp	.+634    	; 0x13fa <main+0x44e>
millis():
    1180:	2f b7       	in	r18, 0x3f	; 63
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:181
  unsigned long millis()
  {
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    1182:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:182
    cli();
    1184:	80 91 95 61 	lds	r24, 0x6195	; 0x806195 <timer_millis>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:194
      m = (m << 16);
      m += RTC.CNT;
      // now correct for there being 1000ms to the second instead of 1024
      m = m - (m >> 5) - (m >> 6);
    #else
      m = timer_millis;
    1188:	90 91 96 61 	lds	r25, 0x6196	; 0x806196 <timer_millis+0x1>
    118c:	a0 91 97 61 	lds	r26, 0x6197	; 0x806197 <timer_millis+0x2>
    1190:	b0 91 98 61 	lds	r27, 0x6198	; 0x806198 <timer_millis+0x3>
    1194:	2f bf       	out	0x3f, r18	; 63
RTC_init():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:195
      SREG = oldSREG;
    1196:	8c 19       	sub	r24, r12
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:210
    if ((millis() - ims) > 2000) { // taking too long, make noise
    1198:	9d 09       	sbc	r25, r13
    119a:	ae 09       	sbc	r26, r14
    119c:	bf 09       	sbc	r27, r15
    119e:	81 3d       	cpi	r24, 0xD1	; 209
    11a0:	97 40       	sbci	r25, 0x07	; 7
    11a2:	a1 05       	cpc	r26, r1
    11a4:	b1 05       	cpc	r27, r1
    11a6:	40 f1       	brcs	.+80     	; 0x11f8 <main+0x24c>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:211
      Serial.println(F("Waiting for XOSC32K to start..."));
    11a8:	8a e5       	ldi	r24, 0x5A	; 90
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	d4 dc       	rcall	.-1624   	; 0xb56 <Print::println(__FlashStringHelper const*) [clone .constprop.51]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:212
      delay(1000);
    11ae:	68 ee       	ldi	r22, 0xE8	; 232
    11b0:	73 e0       	ldi	r23, 0x03	; 3
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	d1 d8       	rcall	.-3678   	; 0x35a <delay>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:213
      Serial.print(F("XOSC32KCTRLA: "));
    11b8:	8b e4       	ldi	r24, 0x4B	; 75
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	f7 da       	rcall	.-2578   	; 0x7ac <Print::print(__FlashStringHelper const*) [clone .constprop.52]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:214
      Serial.println(CLKCTRL.XOSC32KCTRLA, 2);
    11be:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
print():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:73
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	80 e0       	ldi	r24, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    11c8:	42 e0       	ldi	r20, 0x02	; 2
    11ca:	cf dc       	rcall	.-1634   	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
println():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    11cc:	c1 dc       	rcall	.-1662   	; 0xb50 <Print::println() [clone .constprop.53]>
RTC_init():
    11ce:	8e e3       	ldi	r24, 0x3E	; 62
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:215
      Serial.print(F("MCLKSTATUS: "));
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	ec da       	rcall	.-2600   	; 0x7ac <Print::print(__FlashStringHelper const*) [clone .constprop.52]>
    11d4:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
print():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:216
      Serial.println(CLKCTRL.MCLKSTATUS, 2);
    11d8:	70 e0       	ldi	r23, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:73
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    11da:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	42 e0       	ldi	r20, 0x02	; 2
    11e0:	c4 dc       	rcall	.-1656   	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
println():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    11e2:	b6 dc       	rcall	.-1684   	; 0xb50 <Print::println() [clone .constprop.53]>
RTC_init():
    11e4:	88 e2       	ldi	r24, 0x28	; 40
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:217
      Serial.print(F("CLKCTRL_XOSC32KS_bm: "));
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	e1 da       	rcall	.-2622   	; 0x7ac <Print::print(__FlashStringHelper const*) [clone .constprop.52]>
print():
    11ea:	42 e0       	ldi	r20, 0x02	; 2
    11ec:	68 e0       	ldi	r22, 0x08	; 8
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:98
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	ba dc       	rcall	.-1676   	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
println():
    11f6:	ac dc       	rcall	.-1704   	; 0xb50 <Print::println() [clone .constprop.53]>
millis():
    11f8:	2f b7       	in	r18, 0x3f	; 63
    11fa:	f8 94       	cli
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:161
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    11fc:	80 91 95 61 	lds	r24, 0x6195	; 0x806195 <timer_millis>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:181
  unsigned long millis()
  {
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    1200:	90 91 96 61 	lds	r25, 0x6196	; 0x806196 <timer_millis+0x1>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:194
      m = (m << 16);
      m += RTC.CNT;
      // now correct for there being 1000ms to the second instead of 1024
      m = m - (m >> 5) - (m >> 6);
    #else
      m = timer_millis;
    1204:	a0 91 97 61 	lds	r26, 0x6197	; 0x806197 <timer_millis+0x2>
    1208:	b0 91 98 61 	lds	r27, 0x6198	; 0x806198 <timer_millis+0x3>
    120c:	2f bf       	out	0x3f, r18	; 63
RTC_init():
    120e:	8c 19       	sub	r24, r12
    1210:	9d 09       	sbc	r25, r13
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/wiring.c:195
      SREG = oldSREG;
    1212:	ae 09       	sbc	r26, r14
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:220
      Serial.println(CLKCTRL_XOSC32KS_bm, 2);
    }
    if ((millis() - ims) > 4000) { // give up and use OSCULP32K instead
    1214:	bf 09       	sbc	r27, r15
    1216:	81 3a       	cpi	r24, 0xA1	; 161
    1218:	9f 40       	sbci	r25, 0x0F	; 15
    121a:	a1 05       	cpc	r26, r1
    121c:	b1 05       	cpc	r27, r1
    121e:	08 f4       	brcc	.+2      	; 0x1222 <main+0x276>
    1220:	ab cf       	rjmp	.-170    	; 0x1178 <main+0x1cc>
    1222:	81 e1       	ldi	r24, 0x11	; 17
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	97 dc       	rcall	.-1746   	; 0xb56 <Print::println(__FlashStringHelper const*) [clone .constprop.51]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:221
      Serial.println(F("XOSC32K startup FAILED"));
    1228:	80 91 87 61 	lds	r24, 0x6187	; 0x806187 <reg+0x34>
    122c:	81 60       	ori	r24, 0x01	; 1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:222
      reg.d.err |= ERR_CRYSTAL;
    122e:	80 93 87 61 	sts	0x6187, r24	; 0x806187 <reg+0x34>
    1232:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f0141>
    1236:	81 11       	cpse	r24, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:223
      while (RTC.STATUS > 0) {
    1238:	fc cf       	rjmp	.-8      	; 0x1232 <main+0x286>
    123a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x7f0147>
    123e:	81 e0       	ldi	r24, 0x01	; 1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:226
        ; /* Wait for all registers to be synchronized */
      }
      RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32.768kHz Internal Ultra-Low-Power
    1240:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x7f0152>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:229
                                      Oscillator (OSCULP32K) */

      RTC.PITINTCTRL = RTC_PI_bm; /* PIT Interrupt: enabled */
    1244:	81 e5       	ldi	r24, 0x51	; 81
    1246:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f0150>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:231

      RTC.PITCTRLA = RTC_PERIOD_CYC2048_gc /* RTC Clock Cycles 2048, resulting
    124a:	81 ef       	ldi	r24, 0xF1	; 241
    124c:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:234
                                    in 32.768kHz/2048 = 16Hz */
                     | RTC_PITEN_bm;       /* Enable PIT counter: enabled */
      Serial.println(F("RTC initialized using OSCULP32K"));
    124e:	83 dc       	rcall	.-1786   	; 0xb56 <Print::println(__FlashStringHelper const*) [clone .constprop.51]>
setup():
    1250:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x7f0050>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:250
  RTC.CLKSEL = CLKCTRL_CLKSEL_XOSC32K_gc; /* 32.768kHz crystal */
  RTC.PITINTCTRL = RTC_PI_bm;             /* PIT Interrupt: enabled */
  RTC.PITCTRLA = RTC_PERIOD_CYC2048_gc    /* RTC Clock Cycles 2048, resulting
                                   in 32.768kHz/2048 = 16Hz */
                 | RTC_PITEN_bm;          /* Enable PIT counter: enabled */
  Serial.println(F("RTC initialized using XOSC32K"));
    1254:	89 7f       	andi	r24, 0xF9	; 249
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:329
  ina_reset();
  ina_config();
  pinMode(P_LED, OUTPUT);
  digitalWriteFast(P_LED, 1);
  RTC_init();
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1256:	84 60       	ori	r24, 0x04	; 4
    1258:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7f0050>
    125c:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x7f0050>
    1260:	81 60       	ori	r24, 0x01	; 1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:330
  sleep_enable();
    1262:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7f0050>
    1266:	85 e8       	ldi	r24, 0x85	; 133
    1268:	90 e6       	ldi	r25, 0x60	; 96
    126a:	e6 dc       	rcall	.-1588   	; 0xc38 <Print::println(char const*) [clone .constprop.32]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:335
#ifdef ENABLE_SCAN     // i2c scan
  byte error, address; // variable for error and I2C address
  int nDevices;

  Serial.println("Scanning...");
    126c:	c1 2c       	mov	r12, r1
    126e:	d1 2c       	mov	r13, r1
    1270:	76 01       	movw	r14, r12
    1272:	c3 94       	inc	r12
main():
    1274:	10 e0       	ldi	r17, 0x00	; 0
    1276:	00 e0       	ldi	r16, 0x00	; 0
beginTransmission():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:337

  nDevices = 0;
    1278:	8c 2d       	mov	r24, r12
    127a:	88 0f       	add	r24, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:294
  if (__builtin_constant_p(address) > 0x7F) {     // Compile-time check if address is actually 7 bit long
    badArg("Supplied address seems to be 8 bit. Only 7-bit-addresses are supported");
    return;
  }
  // set address of targeted client
  vars._clientAddress = address << 1;
    127c:	80 93 40 62 	sts	0x6240, r24	; 0x806240 <Wire+0x10>
    1280:	10 92 41 62 	sts	0x6241, r1	; 0x806241 <Wire+0x11>
endTransmission():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:295
  (*txHead) = 0;  // fill buffer from 0
    1284:	0e 94 17 01 	call	0x22e	; 0x22e <TWI_MasterWrite.constprop.64>
setup():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:328
 *           20 for likely a slave holding the clock low
 *          255 (-1) for TWI not initialized (begin not called) or bus somehow in "unknown" state.
 */
uint8_t TwoWire::endTransmission(bool sendStop) {
  // transmit (blocking)
  return TWI_MasterWrite(&vars, sendStop);
    1288:	81 11       	cpse	r24, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:345
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    error = Wire.endTransmission();

    if (error == 0) {
    128a:	cf c0       	rjmp	.+414    	; 0x142a <main+0x47e>
    128c:	81 e9       	ldi	r24, 0x91	; 145
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:346
      Serial.print("I2C device found at address 0x");
    128e:	90 e6       	ldi	r25, 0x60	; 96
    1290:	dd dc       	rcall	.-1606   	; 0xc4c <Print::print(char const*) [clone .constprop.31]>
    1292:	2f e0       	ldi	r18, 0x0F	; 15
    1294:	2c 15       	cp	r18, r12
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:347
      if (address < 16)
    1296:	18 f0       	brcs	.+6      	; 0x129e <main+0x2f2>
    1298:	80 eb       	ldi	r24, 0xB0	; 176
    129a:	90 e6       	ldi	r25, 0x60	; 96
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:348
        Serial.print("0");
    129c:	d7 dc       	rcall	.-1618   	; 0xc4c <Print::print(char const*) [clone .constprop.31]>
print():
    129e:	40 e1       	ldi	r20, 0x10	; 16
    12a0:	c7 01       	movw	r24, r14
    12a2:	b6 01       	movw	r22, r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    12a4:	62 dc       	rcall	.-1852   	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
setup():
    12a6:	82 eb       	ldi	r24, 0xB2	; 178
    12a8:	90 e6       	ldi	r25, 0x60	; 96
    12aa:	c6 dc       	rcall	.-1652   	; 0xc38 <Print::println(char const*) [clone .constprop.32]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:350
      Serial.print(address, HEX);
      Serial.println("  !");
    12ac:	0f 5f       	subi	r16, 0xFF	; 255
    12ae:	1f 4f       	sbci	r17, 0xFF	; 255
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	c8 1a       	sub	r12, r24
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:351
      nDevices++;
    12b4:	d8 0a       	sbc	r13, r24
    12b6:	e8 0a       	sbc	r14, r24
    12b8:	f8 0a       	sbc	r15, r24
    12ba:	9f e7       	ldi	r25, 0x7F	; 127
    12bc:	c9 16       	cp	r12, r25
    12be:	d1 04       	cpc	r13, r1
    12c0:	e1 04       	cpc	r14, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:338
  int nDevices;

  Serial.println("Scanning...");

  nDevices = 0;
  for (address = 1; address < 127; address++) {
    12c2:	f1 04       	cpc	r15, r1
    12c4:	c9 f6       	brne	.-78     	; 0x1278 <main+0x2cc>
    12c6:	82 ed       	ldi	r24, 0xD2	; 210
    12c8:	90 e6       	ldi	r25, 0x60	; 96
    12ca:	01 2b       	or	r16, r17
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <main+0x326>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:360
        Serial.print("0");
      Serial.println(address, HEX);
    }
  }
  if (nDevices == 0)
    Serial.println("No I2C devices found\n");
    12ce:	88 ee       	ldi	r24, 0xE8	; 232
    12d0:	90 e6       	ldi	r25, 0x60	; 96
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:359
      if (address < 16)
        Serial.print("0");
      Serial.println(address, HEX);
    }
  }
  if (nDevices == 0)
    12d2:	b2 dc       	rcall	.-1692   	; 0xc38 <Print::println(char const*) [clone .constprop.32]>
main():
    12d4:	e3 e5       	ldi	r30, 0x53	; 83
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:362
    Serial.println("No I2C devices found\n");
  else
    Serial.println("done\n");
    12d6:	f1 e6       	ldi	r31, 0x61	; 97
    12d8:	80 e0       	ldi	r24, 0x00	; 0
rd_ina3221():
    12da:	81 93       	st	Z+, r24
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:337
  byte error, address; // variable for error and I2C address
  int nDevices;

  Serial.println("Scanning...");

  nDevices = 0;
    12de:	89 33       	cpi	r24, 0x39	; 57
    12e0:	e1 f7       	brne	.-8      	; 0x12da <main+0x32e>
    12e2:	28 e8       	ldi	r18, 0x88	; 136
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:191
    sei();
  }
  #else
   //test pattern data
   for(uint16_t i=0; i<sizeof(ewdt_regs_t); i++){
     reg.r[i]=i&0xFF;
    12e4:	31 e6       	ldi	r19, 0x61	; 97
    12e6:	a3 e5       	ldi	r26, 0x53	; 83
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:190
    memcpy(reg.r, bak.r, sizeof(ewdt_regs_t));
    sei();
  }
  #else
   //test pattern data
   for(uint16_t i=0; i<sizeof(ewdt_regs_t); i++){
    12e8:	b1 e6       	ldi	r27, 0x61	; 97
__base_ctor ():
    12ea:	4f ef       	ldi	r20, 0xFF	; 255
    12ec:	5f ef       	ldi	r21, 0xFF	; 255
    12ee:	ba 01       	movw	r22, r20
update():
    12f0:	8d 91       	ld	r24, X+
    12f2:	e8 2f       	mov	r30, r24
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:29
    0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
    0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c
};


CRC32::CRC32()
    12f4:	e4 27       	eor	r30, r20
    12f6:	ef 70       	andi	r30, 0x0F	; 15
    12f8:	04 e0       	ldi	r16, 0x04	; 4
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:46
void CRC32::update(const uint8_t& data)
{
    // via http://forum.arduino.cc/index.php?topic=91179.0
    uint8_t tbl_idx = 0;

    tbl_idx = _state ^ (data >> (0 * 4));
    12fa:	e0 9f       	mul	r30, r16
    12fc:	f0 01       	movw	r30, r0
    12fe:	11 24       	eor	r1, r1
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:47
    _state = FLASH_READ_DWORD(crc32_table + (tbl_idx & 0x0f)) ^ (_state >> 4);
    1300:	e6 58       	subi	r30, 0x86	; 134
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	c5 90       	lpm	r12, Z+
    1306:	d5 90       	lpm	r13, Z+
    1308:	e5 90       	lpm	r14, Z+
    130a:	f4 90       	lpm	r15, Z
    130c:	e4 e0       	ldi	r30, 0x04	; 4
    130e:	76 95       	lsr	r23
    1310:	67 95       	ror	r22
    1312:	57 95       	ror	r21
    1314:	47 95       	ror	r20
    1316:	ea 95       	dec	r30
    1318:	d1 f7       	brne	.-12     	; 0x130e <main+0x362>
    131a:	4c 25       	eor	r20, r12
    131c:	5d 25       	eor	r21, r13
    131e:	6e 25       	eor	r22, r14
    1320:	7f 25       	eor	r23, r15
    1322:	e8 2f       	mov	r30, r24
    1324:	e2 95       	swap	r30
    1326:	ef 70       	andi	r30, 0x0F	; 15
    1328:	e4 27       	eor	r30, r20
    132a:	ef 70       	andi	r30, 0x0F	; 15
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:48
    tbl_idx = _state ^ (data >> (1 * 4));
    132c:	14 e0       	ldi	r17, 0x04	; 4
    132e:	e1 9f       	mul	r30, r17
    1330:	f0 01       	movw	r30, r0
    1332:	11 24       	eor	r1, r1
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:49
    _state = FLASH_READ_DWORD(crc32_table + (tbl_idx & 0x0f)) ^ (_state >> 4);
    1334:	e6 58       	subi	r30, 0x86	; 134
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	c5 90       	lpm	r12, Z+
    133a:	d5 90       	lpm	r13, Z+
    133c:	e5 90       	lpm	r14, Z+
    133e:	f4 90       	lpm	r15, Z
    1340:	f4 e0       	ldi	r31, 0x04	; 4
    1342:	76 95       	lsr	r23
    1344:	67 95       	ror	r22
    1346:	57 95       	ror	r21
    1348:	47 95       	ror	r20
    134a:	fa 95       	dec	r31
    134c:	d1 f7       	brne	.-12     	; 0x1342 <main+0x396>
    134e:	4c 25       	eor	r20, r12
    1350:	5d 25       	eor	r21, r13
    1352:	6e 25       	eor	r22, r14
    1354:	7f 25       	eor	r23, r15
    1356:	2a 17       	cp	r18, r26
    1358:	3b 07       	cpc	r19, r27
    135a:	09 f0       	breq	.+2      	; 0x135e <main+0x3b2>
    135c:	c9 cf       	rjmp	.-110    	; 0x12f0 <main+0x344>
finalize():
    135e:	40 95       	com	r20
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.h:48
    void update(const Type* data, size_t size)
    {
        size_t nBytes = size * sizeof(Type);
        const uint8_t* pData = (const uint8_t*)data;

        for (size_t i = 0; i < nBytes; i++)
    1360:	50 95       	com	r21
    1362:	60 95       	com	r22
    1364:	70 95       	com	r23
rd_ina3221():
/Users/gbr4/Documents/Arduino/libraries/CRC32/src/CRC32.cpp:55
}


uint32_t CRC32::finalize() const
{
    return ~_state;
    1366:	40 93 88 61 	sts	0x6188, r20	; 0x806188 <reg+0x35>
    136a:	50 93 89 61 	sts	0x6189, r21	; 0x806189 <reg+0x36>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:193
     reg.r[i]=i&0xFF;
   }
   reg.d.crc=CRC32::calculate(reg.r,sizeof(ewdt_regs_t)-4);
    136e:	60 93 8a 61 	sts	0x618A, r22	; 0x80618a <reg+0x37>
    1372:	70 93 8b 61 	sts	0x618B, r23	; 0x80618b <reg+0x38>
TWI_SlaveInit():
    1376:	80 91 3e 62 	lds	r24, 0x623E	; 0x80623e <Wire+0xe>
    137a:	86 fd       	sbrc	r24, 6
    137c:	18 c0       	rjmp	.+48     	; 0x13ae <main+0x402>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:93
 *
 *@return     void
 */
void TWI_SlaveInit(struct twiData *_data, uint8_t address, uint8_t receive_broadcast, uint8_t second_address) {
  #if defined(TWI_MANDS)                      // Check if the user wants to use Master AND Slave
    if (_data->_bools._clientEnabled  == 1) {  // Master is allowed to be enabled, don't re-enable the client though
    137e:	80 91 3c 62 	lds	r24, 0x623C	; 0x80623c <Wire+0xc>
    1382:	90 91 3d 62 	lds	r25, 0x623D	; 0x80623d <Wire+0xd>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:103
      return;                                     // return and do nothing
    }
  #endif

  #if defined(TWI1)
    if        (&TWI0 == _data->_module) {
    1386:	81 15       	cp	r24, r1
    1388:	29 e0       	ldi	r18, 0x09	; 9
    138a:	92 07       	cpc	r25, r18
    138c:	09 f0       	breq	.+2      	; 0x1390 <main+0x3e4>
    138e:	5f c0       	rjmp	.+190    	; 0x144e <main+0x4a2>
    1390:	41 da       	rcall	.-2942   	; 0x814 <TWI0_ClearPins>
    1392:	80 91 3e 62 	lds	r24, 0x623E	; 0x80623e <Wire+0xe>
    1396:	80 64       	ori	r24, 0x40	; 64
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:104
      TWI0_ClearPins();
    1398:	80 93 3e 62 	sts	0x623E, r24	; 0x80623e <Wire+0xe>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:112
    }
  #else
    TWI0_ClearPins();
  #endif

  _data->_bools._clientEnabled = 1;
    139c:	e0 91 3c 62 	lds	r30, 0x623C	; 0x80623c <Wire+0xc>
    13a0:	f0 91 3d 62 	lds	r31, 0x623D	; 0x80623d <Wire+0xd>
    13a4:	84 e8       	ldi	r24, 0x84	; 132
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:113
  _data->_module->SADDR        = (address << 1) | receive_broadcast;
    13a6:	84 87       	std	Z+12, r24	; 0x0c
    13a8:	16 86       	std	Z+14, r1	; 0x0e
    13aa:	81 ee       	ldi	r24, 0xE1	; 225
    13ac:	81 87       	std	Z+9, r24	; 0x09
onReceive():
    13ae:	8a eb       	ldi	r24, 0xBA	; 186
    13b0:	94 e0       	ldi	r25, 0x04	; 4
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:114
  _data->_module->SADDRMASK    = second_address;
    13b2:	80 93 4a 62 	sts	0x624A, r24	; 0x80624a <Wire+0x1a>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:115
  _data->_module->SCTRLA       = TWI_DIEN_bm | TWI_APIEN_bm | TWI_PIEN_bm  | TWI_ENABLE_bm;
    13b6:	90 93 4b 62 	sts	0x624B, r25	; 0x80624b <Wire+0x1b>
onRequest():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:729
 *@param      void (*function)(int) - a void returning function that accepts an int as parameter
 *
 *@return     void
 */
void TwoWire::onReceive(void (*function)(int)) {
  vars.user_onReceive = function;
    13ba:	8e ee       	ldi	r24, 0xEE	; 238
    13bc:	94 e0       	ldi	r25, 0x04	; 4
    13be:	80 93 48 62 	sts	0x6248, r24	; 0x806248 <Wire+0x18>
    13c2:	90 93 49 62 	sts	0x6249, r25	; 0x806249 <Wire+0x19>
loop():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:743
 *@param      void (*function)(void) - a void returning function that does not accept any parameters
 *
 *@return     void
 */
void TwoWire::onRequest(void (*function)(void)) {
  vars.user_onRequest = function;
    13c6:	80 91 94 61 	lds	r24, 0x6194	; 0x806194 <wake>
    13ca:	81 11       	cpse	r24, r1
    13cc:	48 c0       	rjmp	.+144    	; 0x145e <main+0x4b2>
slaveTransactionOpen():
    13ce:	e0 91 3c 62 	lds	r30, 0x623C	; 0x80623c <Wire+0xc>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:374
  Wire.onRequest(requestHandler);
}

uint32_t ll = 0;
void loop() {
  while (!wake && Wire.slaveTransactionOpen()) {
    13d2:	f0 91 3d 62 	lds	r31, 0x623D	; 0x80623d <Wire+0xd>
    13d6:	83 85       	ldd	r24, Z+11	; 0x0b
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:615
 *              must be polled if it is necessary to know when this has concluded, as the
 *              onRequest handler is called at the start of a read only.
 */

uint8_t TwoWire::slaveTransactionOpen() {
  uint8_t status = vars._module->SSTATUS;
    13d8:	80 ff       	sbrs	r24, 0
    13da:	41 c0       	rjmp	.+130    	; 0x145e <main+0x4b2>
loop():
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	70 e0       	ldi	r23, 0x00	; 0
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:616
  if (!(status & TWI_AP_bm)) return 0;  // If AP bit is cleared, last match was a stop condition -> not in transaction.
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:375
    delay(1);
    13e4:	0e 94 ad 01 	call	0x35a	; 0x35a <delay>
    13e8:	ee cf       	rjmp	.-36     	; 0x13c6 <main+0x41a>
TWI_MasterInit():
    13ea:	80 32       	cpi	r24, 0x20	; 32
    13ec:	99 40       	sbci	r25, 0x09	; 9
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <main+0x446>
    13f0:	73 ce       	rjmp	.-794    	; 0x10d8 <main+0x12c>
TWI1_ClearPins():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:63


  #if defined(TWI1)                                 // More then one TWI used
    if        (&TWI0 == _data->_module) {           // check which one this function is working with
      TWI0_ClearPins();
    } else if (&TWI1 == _data->_module) {
    13f2:	8c e0       	ldi	r24, 0x0C	; 12
    13f4:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
    13f8:	6f ce       	rjmp	.-802    	; 0x10d8 <main+0x12c>
RTC_init():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:354
      // PORTx.OUT registers are 0.
      PORTB.OUTCLR = 0x0C;  // bits 2 and 3
      } else
    #endif
    {
      PORTF.OUTCLR = 0x0C;  // bits 2 and 3
    13fa:	80 91 87 61 	lds	r24, 0x6187	; 0x806187 <reg+0x34>
    13fe:	8e 7f       	andi	r24, 0xFE	; 254
    1400:	80 93 87 61 	sts	0x6187, r24	; 0x806187 <reg+0x34>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:238
                     | RTC_PITEN_bm;       /* Enable PIT counter: enabled */
      Serial.println(F("RTC initialized using OSCULP32K"));
      return;
    }
  }
  reg.d.err &= ~ERR_CRYSTAL;
    1404:	8e ec       	ldi	r24, 0xCE	; 206
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a6 db       	rcall	.-2228   	; 0xb56 <Print::println(__FlashStringHelper const*) [clone .constprop.51]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:239
  Serial.println(F("XOSC32K started. Initializing RTC."));
    140a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f0141>
    140e:	81 11       	cpse	r24, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:242

  /* Initialize RTC: */
  while (RTC.STATUS > 0) {
    1410:	fc cf       	rjmp	.-8      	; 0x140a <main+0x45e>
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__TEXT_REGION_LENGTH__+0x7f0147>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:245
    ; /* Wait for all registers to be synchronized */
  }
  RTC.CLKSEL = CLKCTRL_CLKSEL_XOSC32K_gc; /* 32.768kHz crystal */
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x7f0152>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:246
  RTC.PITINTCTRL = RTC_PI_bm;             /* PIT Interrupt: enabled */
    141e:	81 e5       	ldi	r24, 0x51	; 81
    1420:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f0150>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:247
  RTC.PITCTRLA = RTC_PERIOD_CYC2048_gc    /* RTC Clock Cycles 2048, resulting
    1424:	80 eb       	ldi	r24, 0xB0	; 176
    1426:	90 e0       	ldi	r25, 0x00	; 0
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:250
                                   in 32.768kHz/2048 = 16Hz */
                 | RTC_PITEN_bm;          /* Enable PIT counter: enabled */
  Serial.println(F("RTC initialized using XOSC32K"));
    1428:	12 cf       	rjmp	.-476    	; 0x124e <main+0x2a2>
setup():
    142a:	84 30       	cpi	r24, 0x04	; 4
    142c:	09 f0       	breq	.+2      	; 0x1430 <main+0x484>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:352
      if (address < 16)
        Serial.print("0");
      Serial.print(address, HEX);
      Serial.println("  !");
      nDevices++;
    } else if (error == 4) {
    142e:	40 cf       	rjmp	.-384    	; 0x12b0 <main+0x304>
    1430:	86 eb       	ldi	r24, 0xB6	; 182
    1432:	90 e6       	ldi	r25, 0x60	; 96
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:353
      Serial.print("Unknown error at address 0x");
    1434:	0b dc       	rcall	.-2026   	; 0xc4c <Print::print(char const*) [clone .constprop.31]>
    1436:	3f e0       	ldi	r19, 0x0F	; 15
    1438:	3c 15       	cp	r19, r12
    143a:	18 f0       	brcs	.+6      	; 0x1442 <main+0x496>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:354
      if (address < 16)
    143c:	80 eb       	ldi	r24, 0xB0	; 176
    143e:	90 e6       	ldi	r25, 0x60	; 96
    1440:	05 dc       	rcall	.-2038   	; 0xc4c <Print::print(char const*) [clone .constprop.31]>
print():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:355
        Serial.print("0");
    1442:	40 e1       	ldi	r20, 0x10	; 16
    1444:	c7 01       	movw	r24, r14
    1446:	b6 01       	movw	r22, r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
    1448:	90 db       	rcall	.-2272   	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
println():
    144a:	82 db       	rcall	.-2300   	; 0xb50 <Print::println() [clone .constprop.53]>
    144c:	31 cf       	rjmp	.-414    	; 0x12b0 <main+0x304>
TWI_SlaveInit():
    144e:	80 32       	cpi	r24, 0x20	; 32
    1450:	99 40       	sbci	r25, 0x09	; 9
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    1452:	09 f0       	breq	.+2      	; 0x1456 <main+0x4aa>
    1454:	9e cf       	rjmp	.-196    	; 0x1392 <main+0x3e6>
TWI1_ClearPins():
    1456:	8c e0       	ldi	r24, 0x0C	; 12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi.c:105
  #endif

  #if defined(TWI1)
    if        (&TWI0 == _data->_module) {
      TWI0_ClearPins();
    } else if (&TWI1 == _data->_module) {
    1458:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
    145c:	9a cf       	rjmp	.-204    	; 0x1392 <main+0x3e6>
loop():
    145e:	80 91 94 61 	lds	r24, 0x6194	; 0x806194 <wake>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/twi_pins.c:354
    1462:	81 11       	cpse	r24, r1
    1464:	0c c0       	rjmp	.+24     	; 0x147e <main+0x4d2>
slaveTransactionOpen():
    1466:	e0 91 3c 62 	lds	r30, 0x623C	; 0x80623c <Wire+0xc>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:377
uint32_t ll = 0;
void loop() {
  while (!wake && Wire.slaveTransactionOpen()) {
    delay(1);
  }
  while (!wake && !Wire.slaveTransactionOpen()) {
    146a:	f0 91 3d 62 	lds	r31, 0x623D	; 0x80623d <Wire+0xd>
    146e:	83 85       	ldd	r24, Z+11	; 0x0b
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:615
 *              must be polled if it is necessary to know when this has concluded, as the
 *              onRequest handler is called at the start of a read only.
 */

uint8_t TwoWire::slaveTransactionOpen() {
  uint8_t status = vars._module->SSTATUS;
    1470:	80 fd       	sbrc	r24, 0
    1472:	05 c0       	rjmp	.+10     	; 0x147e <main+0x4d2>
loop():
    1474:	89 e9       	ldi	r24, 0x99	; 153
    1476:	91 e6       	ldi	r25, 0x61	; 97
    1478:	b7 d9       	rcall	.-3218   	; 0x7e8 <UartClass::flush()>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/libraries/Wire/src/Wire.cpp:616
  if (!(status & TWI_AP_bm)) return 0;  // If AP bit is cleared, last match was a stop condition -> not in transaction.
    147a:	88 95       	sleep
    147c:	f0 cf       	rjmp	.-32     	; 0x145e <main+0x4b2>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:378
    Serial.flush();
    147e:	10 92 94 61 	sts	0x6194, r1	; 0x806194 <wake>
    1482:	f8 94       	cli
    1484:	80 91 90 61 	lds	r24, 0x6190	; 0x806190 <ticks>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:379
    sleep_cpu();
    1488:	90 91 91 61 	lds	r25, 0x6191	; 0x806191 <ticks+0x1>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:382
    //delay(1);
  }
  wake = 0;
    148c:	a0 91 92 61 	lds	r26, 0x6192	; 0x806192 <ticks+0x2>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:384
  cli();
  uint32_t loop_ticks = ticks;
    1490:	b0 91 93 61 	lds	r27, 0x6193	; 0x806193 <ticks+0x3>
    1494:	78 94       	sei
    1496:	40 91 8c 61 	lds	r20, 0x618C	; 0x80618c <ll>
    149a:	50 91 8d 61 	lds	r21, 0x618D	; 0x80618d <ll+0x1>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:385
  sei();
    149e:	60 91 8e 61 	lds	r22, 0x618E	; 0x80618e <ll+0x2>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:386
  if (((loop_ticks - ll) >> 4) >= 5) {
    14a2:	70 91 8f 61 	lds	r23, 0x618F	; 0x80618f <ll+0x3>
    14a6:	8c 01       	movw	r16, r24
    14a8:	9d 01       	movw	r18, r26
    14aa:	04 1b       	sub	r16, r20
    14ac:	15 0b       	sbc	r17, r21
    14ae:	26 0b       	sbc	r18, r22
    14b0:	37 0b       	sbc	r19, r23
    14b2:	b9 01       	movw	r22, r18
    14b4:	a8 01       	movw	r20, r16
    14b6:	40 35       	cpi	r20, 0x50	; 80
    14b8:	51 05       	cpc	r21, r1
    14ba:	61 05       	cpc	r22, r1
    14bc:	71 05       	cpc	r23, r1
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <main+0x516>
    14c0:	82 cf       	rjmp	.-252    	; 0x13c6 <main+0x41a>
    14c2:	80 93 8c 61 	sts	0x618C, r24	; 0x80618c <ll>
    14c6:	90 93 8d 61 	sts	0x618D, r25	; 0x80618d <ll+0x1>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:387
    ll = loop_ticks;
    14ca:	a0 93 8e 61 	sts	0x618E, r26	; 0x80618e <ll+0x2>
    14ce:	b0 93 8f 61 	sts	0x618F, r27	; 0x80618f <ll+0x3>
    14d2:	3e db       	rcall	.-2436   	; 0xb50 <Print::println() [clone .constprop.53]>
    14d4:	93 e5       	ldi	r25, 0x53	; 83
    14d6:	c9 2e       	mov	r12, r25
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:388
    Serial.println();
    14d8:	91 e6       	ldi	r25, 0x61	; 97
    14da:	d9 2e       	mov	r13, r25
main():
    14dc:	f1 2c       	mov	r15, r1
    14de:	e1 2c       	mov	r14, r1
loop():
    14e0:	d6 01       	movw	r26, r12
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:389
    for (uint16_t i = 0; i < sizeof(ewdt_regs_t); i++) {
    14e2:	1d 91       	ld	r17, X+
    14e4:	6d 01       	movw	r12, r26
printHex():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:392
      if (i && !(i & 0xF))
        Serial.println(); // newline
      Serial.printHex(reg.r[i]);
    14e6:	61 2f       	mov	r22, r17
    14e8:	62 95       	swap	r22
    14ea:	6f 70       	andi	r22, 0x0F	; 15
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:672

  return 1;
}

void UartClass::printHex(const uint8_t b) {
  char x = (b >> 4) | '0';
    14ec:	60 63       	ori	r22, 0x30	; 48
    14ee:	6a 33       	cpi	r22, 0x3A	; 58
    14f0:	0c f0       	brlt	.+2      	; 0x14f4 <main+0x548>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:673
  if (x > '9')
    14f2:	69 5f       	subi	r22, 0xF9	; 249
write():
    14f4:	89 e9       	ldi	r24, 0x99	; 153
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.h:198
    virtual void           flush(void                                                       );
    virtual size_t         write(uint8_t b                                                  );
    inline  size_t         write(unsigned long n) {return                   write((uint8_t)n);}
    inline  size_t         write(long          n) {return                   write((uint8_t)n);}
    inline  size_t         write(unsigned int  n) {return                   write((uint8_t)n);}
    inline  size_t         write(int           n) {return                   write((uint8_t)n);}
    14f6:	91 e6       	ldi	r25, 0x61	; 97
    14f8:	0d d9       	rcall	.-3558   	; 0x714 <UartClass::write(unsigned char)>
printHex():
    14fa:	61 2f       	mov	r22, r17
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:676
    x += 7;
  write(x);
  x = (b & 0x0F) | '0';
    14fc:	6f 70       	andi	r22, 0x0F	; 15
    14fe:	60 63       	ori	r22, 0x30	; 48
    1500:	6a 33       	cpi	r22, 0x3A	; 58
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:677
  if (x > '9')
    1502:	08 f0       	brcs	.+2      	; 0x1506 <main+0x55a>
    1504:	69 5f       	subi	r22, 0xF9	; 249
write():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.cpp:678
    x += 7;
    1506:	89 e9       	ldi	r24, 0x99	; 153
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/UART.h:198
    1508:	91 e6       	ldi	r25, 0x61	; 97
    150a:	04 d9       	rcall	.-3576   	; 0x714 <UartClass::write(unsigned char)>
loop():
    150c:	bf ef       	ldi	r27, 0xFF	; 255
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:389
  uint32_t loop_ticks = ticks;
  sei();
  if (((loop_ticks - ll) >> 4) >= 5) {
    ll = loop_ticks;
    Serial.println();
    for (uint16_t i = 0; i < sizeof(ewdt_regs_t); i++) {
    150e:	eb 1a       	sub	r14, r27
    1510:	fb 0a       	sbc	r15, r27
    1512:	e9 e3       	ldi	r30, 0x39	; 57
    1514:	ee 16       	cp	r14, r30
    1516:	f1 04       	cpc	r15, r1
    1518:	09 f0       	breq	.+2      	; 0x151c <main+0x570>
    151a:	9b c0       	rjmp	.+310    	; 0x1652 <main+0x6a6>
    151c:	19 db       	rcall	.-2510   	; 0xb50 <Print::println() [clone .constprop.53]>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:394
      if (i && !(i & 0xF))
        Serial.println(); // newline
      Serial.printHex(reg.r[i]);
    }
    Serial.println();
    151e:	03 e5       	ldi	r16, 0x53	; 83
    1520:	11 e6       	ldi	r17, 0x61	; 97
    1522:	41 2c       	mov	r4, r1
    1524:	51 2c       	mov	r5, r1
    1526:	32 01       	movw	r6, r4
    1528:	43 94       	inc	r4
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:396
    for (int ch = 0; ch < 3; ch++) {
      Serial.print("ch");
    152a:	8e ee       	ldi	r24, 0xEE	; 238
    152c:	90 e6       	ldi	r25, 0x60	; 96
    152e:	8e db       	rcall	.-2276   	; 0xc4c <Print::print(char const*) [clone .constprop.31]>
print():
    1530:	4a e0       	ldi	r20, 0x0A	; 10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:78
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	c3 01       	movw	r24, r6
    1536:	b2 01       	movw	r22, r4
    1538:	55 db       	rcall	.-2390   	; 0xbe4 <Print::print(long, int) [clone .constprop.46]>
loop():
    153a:	81 ef       	ldi	r24, 0xF1	; 241
    153c:	90 e6       	ldi	r25, 0x60	; 96
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:398
      Serial.print(ch + 1);
      Serial.print(" bv:");
    153e:	86 db       	rcall	.-2292   	; 0xc4c <Print::print(char const*) [clone .constprop.31]>
print():
    1540:	d8 01       	movw	r26, r16
    1542:	14 96       	adiw	r26, 0x04	; 4
    1544:	6d 91       	ld	r22, X+
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:83
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1546:	7c 91       	ld	r23, X
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	4a e0       	ldi	r20, 0x0A	; 10
    154e:	0d db       	rcall	.-2534   	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
loop():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1550:	86 ef       	ldi	r24, 0xF6	; 246
    1552:	90 e6       	ldi	r25, 0x60	; 96
    1554:	7b db       	rcall	.-2314   	; 0xc4c <Print::print(char const*) [clone .constprop.31]>
print():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:400
      Serial.print(reg.d.pwr[ch].vbus);
      Serial.print(" sv:");
    1556:	f8 01       	movw	r30, r16
    1558:	66 81       	ldd	r22, Z+6	; 0x06
    155a:	77 81       	ldd	r23, Z+7	; 0x07
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:78
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    155c:	07 2e       	mov	r0, r23
    155e:	00 0c       	add	r0, r0
    1560:	88 0b       	sbc	r24, r24
    1562:	99 0b       	sbc	r25, r25
    1564:	4a e0       	ldi	r20, 0x0A	; 10
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	3d db       	rcall	.-2438   	; 0xbe4 <Print::print(long, int) [clone .constprop.46]>
loop():
    156a:	8b ef       	ldi	r24, 0xFB	; 251
    156c:	90 e6       	ldi	r25, 0x60	; 96
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:402
      Serial.print(reg.d.pwr[ch].vshunt);
      Serial.print(" ua:");
    156e:	6e db       	rcall	.-2340   	; 0xc4c <Print::print(char const*) [clone .constprop.31]>
    1570:	d8 01       	movw	r26, r16
    1572:	16 96       	adiw	r26, 0x06	; 6
    1574:	8d 91       	ld	r24, X+
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:403
      Serial.print(reg.d.pwr[ch].vshunt * 400);
    1576:	9c 91       	ld	r25, X
    1578:	e0 e9       	ldi	r30, 0x90	; 144
    157a:	f1 e0       	ldi	r31, 0x01	; 1
    157c:	8e 9f       	mul	r24, r30
    157e:	b0 01       	movw	r22, r0
    1580:	8f 9f       	mul	r24, r31
    1582:	70 0d       	add	r23, r0
    1584:	9e 9f       	mul	r25, r30
    1586:	70 0d       	add	r23, r0
    1588:	11 24       	eor	r1, r1
print():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:78
    158a:	07 2e       	mov	r0, r23
    158c:	00 0c       	add	r0, r0
    158e:	88 0b       	sbc	r24, r24
    1590:	99 0b       	sbc	r25, r25
    1592:	4a e0       	ldi	r20, 0x0A	; 10
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	26 db       	rcall	.-2484   	; 0xbe4 <Print::print(long, int) [clone .constprop.46]>
    1598:	18 01       	movw	r2, r16
    159a:	1b 82       	std	Y+3, r1	; 0x03
    159c:	1c 82       	std	Y+4, r1	; 0x04
    159e:	1d 82       	std	Y+5, r1	; 0x05
    15a0:	1e 82       	std	Y+6, r1	; 0x06
loop():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:405
      for (int a = 0; a < EWDT2_ACC_PER_CHA; a++) {
        Serial.print(" acc");
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	91 e6       	ldi	r25, 0x61	; 97
    15a6:	52 db       	rcall	.-2396   	; 0xc4c <Print::print(char const*) [clone .constprop.31]>
print():
    15a8:	4a e0       	ldi	r20, 0x0A	; 10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:78
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	6b 81       	ldd	r22, Y+3	; 0x03
    15ae:	7c 81       	ldd	r23, Y+4	; 0x04
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	17 db       	rcall	.-2514   	; 0xbe4 <Print::print(long, int) [clone .constprop.46]>
loop():
    15b6:	8a e3       	ldi	r24, 0x3A	; 58
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:407
        Serial.print(a);
        Serial.print(':');
    15b8:	13 d9       	rcall	.-3546   	; 0x7e0 <Print::print(char) [clone .constprop.48]>
    15ba:	d1 01       	movw	r26, r2
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:408
        Serial.print(reg.d.pwr[ch].acc[a].sv_sum);
    15bc:	18 96       	adiw	r26, 0x08	; 8
    15be:	6d 91       	ld	r22, X+
    15c0:	7d 91       	ld	r23, X+
    15c2:	8d 91       	ld	r24, X+
    15c4:	9c 91       	ld	r25, X
    15c6:	1b 97       	sbiw	r26, 0x0b	; 11
    15c8:	4a e0       	ldi	r20, 0x0A	; 10
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	0b db       	rcall	.-2538   	; 0xbe4 <Print::print(long, int) [clone .constprop.46]>
    15ce:	8f e2       	ldi	r24, 0x2F	; 47
    15d0:	07 d9       	rcall	.-3570   	; 0x7e0 <Print::print(char) [clone .constprop.48]>
print():
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:409
        Serial.print('/');
    15d2:	f1 01       	movw	r30, r2
    15d4:	64 85       	ldd	r22, Z+12	; 0x0c
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:83
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    15d6:	75 85       	ldd	r23, Z+13	; 0x0d
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	4a e0       	ldi	r20, 0x0A	; 10
    15de:	c5 da       	rcall	.-2678   	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
loop():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    15e0:	8d e3       	ldi	r24, 0x3D	; 61
    15e2:	fe d8       	rcall	.-3588   	; 0x7e0 <Print::print(char) [clone .constprop.48]>
    15e4:	d1 01       	movw	r26, r2
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:411
        Serial.print(reg.d.pwr[ch].acc[a].sv_cnt);
        Serial.print('=');
    15e6:	18 96       	adiw	r26, 0x08	; 8
    15e8:	6d 91       	ld	r22, X+
    15ea:	7d 91       	ld	r23, X+
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:412
        Serial.print((reg.d.pwr[ch].acc[a].sv_sum) / EWDT2_SVS_DIV_MAH);
    15ec:	8d 91       	ld	r24, X+
    15ee:	9c 91       	ld	r25, X
    15f0:	1b 97       	sbiw	r26, 0x0b	; 11
    15f2:	c1 d1       	rcall	.+898    	; 0x1976 <__floatsisf>
    15f4:	2f e9       	ldi	r18, 0x9F	; 159
    15f6:	33 e1       	ldi	r19, 0x13	; 19
    15f8:	4b ea       	ldi	r20, 0xAB	; 171
    15fa:	56 e4       	ldi	r21, 0x46	; 70
    15fc:	26 d1       	rcall	.+588    	; 0x184a <__divsf3>
    15fe:	6b 01       	movw	r12, r22
    1600:	7c 01       	movw	r14, r24
    1602:	4b 01       	movw	r8, r22
    1604:	5c 01       	movw	r10, r24
printFloat():
    1606:	ac 01       	movw	r20, r24
    1608:	9b 01       	movw	r18, r22
    160a:	cc d2       	rcall	.+1432   	; 0x1ba4 <__unordsf2>
    160c:	88 23       	and	r24, r24
    160e:	91 f1       	breq	.+100    	; 0x1674 <main+0x6c8>
write():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:255

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
    1610:	85 e0       	ldi	r24, 0x05	; 5
    1612:	91 e6       	ldi	r25, 0x61	; 97
    1614:	91 da       	rcall	.-2782   	; 0xb38 <Print::write(char const*) [clone .part.2] [clone .constprop.54]>
loop():
    1616:	81 e1       	ldi	r24, 0x11	; 17
    1618:	91 e6       	ldi	r25, 0x61	; 97
    161a:	18 db       	rcall	.-2512   	; 0xc4c <Print::print(char const*) [clone .constprop.31]>
    161c:	96 e0       	ldi	r25, 0x06	; 6
    161e:	29 0e       	add	r2, r25
    1620:	31 1c       	adc	r3, r1
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:413
        Serial.print("mah");
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	ad 81       	ldd	r26, Y+5	; 0x05
    1628:	be 81       	ldd	r27, Y+6	; 0x06
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	a1 05       	cpc	r26, r1
    162e:	b1 05       	cpc	r27, r1
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:404
      Serial.print(reg.d.pwr[ch].vbus);
      Serial.print(" sv:");
      Serial.print(reg.d.pwr[ch].vshunt);
      Serial.print(" ua:");
      Serial.print(reg.d.pwr[ch].vshunt * 400);
      for (int a = 0; a < EWDT2_ACC_PER_CHA; a++) {
    1630:	c1 f4       	brne	.+48     	; 0x1662 <main+0x6b6>
    1632:	8e da       	rcall	.-2788   	; 0xb50 <Print::println() [clone .constprop.53]>
    1634:	9f ef       	ldi	r25, 0xFF	; 255
    1636:	49 1a       	sub	r4, r25
    1638:	59 0a       	sbc	r5, r25
    163a:	69 0a       	sbc	r6, r25
    163c:	79 0a       	sbc	r7, r25
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:415
        Serial.print(reg.d.pwr[ch].acc[a].sv_cnt);
        Serial.print('=');
        Serial.print((reg.d.pwr[ch].acc[a].sv_sum) / EWDT2_SVS_DIV_MAH);
        Serial.print("mah");
      }
      Serial.println();
    163e:	00 5f       	subi	r16, 0xF0	; 240
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	a4 e0       	ldi	r26, 0x04	; 4
    1644:	4a 16       	cp	r4, r26
    1646:	51 04       	cpc	r5, r1
    1648:	61 04       	cpc	r6, r1
    164a:	71 04       	cpc	r7, r1
    164c:	09 f0       	breq	.+2      	; 0x1650 <main+0x6a4>
    164e:	6d cf       	rjmp	.-294    	; 0x152a <main+0x57e>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:395
      if (i && !(i & 0xF))
        Serial.println(); // newline
      Serial.printHex(reg.r[i]);
    }
    Serial.println();
    for (int ch = 0; ch < 3; ch++) {
    1650:	ba ce       	rjmp	.-652    	; 0x13c6 <main+0x41a>
    1652:	c7 01       	movw	r24, r14
    1654:	8f 70       	andi	r24, 0x0F	; 15
    1656:	99 27       	eor	r25, r25
    1658:	89 2b       	or	r24, r25
    165a:	09 f0       	breq	.+2      	; 0x165e <main+0x6b2>
    165c:	41 cf       	rjmp	.-382    	; 0x14e0 <main+0x534>
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:390
  sei();
  if (((loop_ticks - ll) >> 4) >= 5) {
    ll = loop_ticks;
    Serial.println();
    for (uint16_t i = 0; i < sizeof(ewdt_regs_t); i++) {
      if (i && !(i & 0xF))
    165e:	78 da       	rcall	.-2832   	; 0xb50 <Print::println() [clone .constprop.53]>
    1660:	3f cf       	rjmp	.-386    	; 0x14e0 <main+0x534>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e0       	ldi	r27, 0x00	; 0
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:391
        Serial.println(); // newline
    166a:	8b 83       	std	Y+3, r24	; 0x03
    166c:	9c 83       	std	Y+4, r25	; 0x04
/Users/gbr4/Documents/GitHub/DualMode/DualModeExample/DualModeExample.ino:404
      Serial.print(reg.d.pwr[ch].vbus);
      Serial.print(" sv:");
      Serial.print(reg.d.pwr[ch].vshunt);
      Serial.print(" ua:");
      Serial.print(reg.d.pwr[ch].vshunt * 400);
      for (int a = 0; a < EWDT2_ACC_PER_CHA; a++) {
    166e:	ad 83       	std	Y+5, r26	; 0x05
    1670:	be 83       	std	Y+6, r27	; 0x06
    1672:	97 cf       	rjmp	.-210    	; 0x15a2 <main+0x5f6>
printFloat():
    1674:	d7 01       	movw	r26, r14
    1676:	c6 01       	movw	r24, r12
    1678:	bf 77       	andi	r27, 0x7F	; 127
    167a:	8f 83       	std	Y+7, r24	; 0x07
    167c:	98 87       	std	Y+8, r25	; 0x08
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:256
  if (isinf(number)) return print("inf");
    167e:	a9 87       	std	Y+9, r26	; 0x09
    1680:	ba 87       	std	Y+10, r27	; 0x0a
    1682:	2f ef       	ldi	r18, 0xFF	; 255
    1684:	3f ef       	ldi	r19, 0xFF	; 255
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	5f e7       	ldi	r21, 0x7F	; 127
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	8a d2       	rcall	.+1300   	; 0x1ba4 <__unordsf2>
    1690:	81 11       	cpse	r24, r1
    1692:	0e c0       	rjmp	.+28     	; 0x16b0 <main+0x704>
    1694:	2f ef       	ldi	r18, 0xFF	; 255
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	5f e7       	ldi	r21, 0x7F	; 127
    169c:	6f 81       	ldd	r22, Y+7	; 0x07
    169e:	78 85       	ldd	r23, Y+8	; 0x08
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	ce d0       	rcall	.+412    	; 0x1842 <__cmpsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	1c f4       	brge	.+6      	; 0x16b0 <main+0x704>
write():
    16aa:	89 e0       	ldi	r24, 0x09	; 9
    16ac:	91 e6       	ldi	r25, 0x61	; 97
    16ae:	b2 cf       	rjmp	.-156    	; 0x1614 <main+0x668>
printFloat():
    16b0:	2f ef       	ldi	r18, 0xFF	; 255
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:257
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	5f e4       	ldi	r21, 0x4F	; 79
    16b8:	c7 01       	movw	r24, r14
    16ba:	b6 01       	movw	r22, r12
    16bc:	0c d2       	rcall	.+1048   	; 0x1ad6 <__gesf2>
    16be:	18 16       	cp	r1, r24
    16c0:	1c f4       	brge	.+6      	; 0x16c8 <main+0x71c>
write():
    16c2:	8d e0       	ldi	r24, 0x0D	; 13
    16c4:	91 e6       	ldi	r25, 0x61	; 97
    16c6:	a6 cf       	rjmp	.-180    	; 0x1614 <main+0x668>
printFloat():
    16c8:	2f ef       	ldi	r18, 0xFF	; 255
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:258
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	5f ec       	ldi	r21, 0xCF	; 207
    16d0:	c7 01       	movw	r24, r14
    16d2:	b6 01       	movw	r22, r12
    16d4:	b6 d0       	rcall	.+364    	; 0x1842 <__cmpsf2>
    16d6:	87 fd       	sbrc	r24, 7
    16d8:	f4 cf       	rjmp	.-24     	; 0x16c2 <main+0x716>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:261

  // Handle negative numbers
  if (number < 0.0)
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	a9 01       	movw	r20, r18
    16e0:	c7 01       	movw	r24, r14
    16e2:	b6 01       	movw	r22, r12
    16e4:	ae d0       	rcall	.+348    	; 0x1842 <__cmpsf2>
    16e6:	87 ff       	sbrs	r24, 7
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <main+0x74e>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:263
  {
     n += print('-');
    16ea:	8d e2       	ldi	r24, 0x2D	; 45
    16ec:	79 d8       	rcall	.-3854   	; 0x7e0 <Print::print(char) [clone .constprop.48]>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:264
     number = -number;
    16ee:	46 01       	movw	r8, r12
    16f0:	57 01       	movw	r10, r14
    16f2:	b7 fa       	bst	r11, 7
    16f4:	b0 94       	com	r11
    16f6:	b7 f8       	bld	r11, 7
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:272
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;

  number += rounding;
    16f8:	b0 94       	com	r11
    16fa:	2a e0       	ldi	r18, 0x0A	; 10
    16fc:	37 ed       	ldi	r19, 0xD7	; 215
    16fe:	43 ea       	ldi	r20, 0xA3	; 163
    1700:	5b e3       	ldi	r21, 0x3B	; 59
    1702:	c5 01       	movw	r24, r10
    1704:	b4 01       	movw	r22, r8
    1706:	39 d0       	rcall	.+114    	; 0x177a <__addsf3>
    1708:	4b 01       	movw	r8, r22
    170a:	5c 01       	movw	r10, r24
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:275

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    170c:	06 d1       	rcall	.+524    	; 0x191a <__fixunssfsi>
    170e:	6b 01       	movw	r12, r22
    1710:	7c 01       	movw	r14, r24
    1712:	2f d1       	rcall	.+606    	; 0x1972 <__floatunsisf>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:276
  double remainder = number - (double)int_part;
    1714:	9b 01       	movw	r18, r22
    1716:	ac 01       	movw	r20, r24
    1718:	c5 01       	movw	r24, r10
    171a:	b4 01       	movw	r22, r8
    171c:	2d d0       	rcall	.+90     	; 0x1778 <__subsf3>
    171e:	4b 01       	movw	r8, r22
    1720:	5c 01       	movw	r10, r24
print():
    1722:	4a e0       	ldi	r20, 0x0A	; 10
    1724:	c7 01       	movw	r24, r14
    1726:	b6 01       	movw	r22, r12
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1728:	20 da       	rcall	.-3008   	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
write():
    172a:	8f e8       	ldi	r24, 0x8F	; 143
    172c:	90 e6       	ldi	r25, 0x60	; 96
    172e:	04 da       	rcall	.-3064   	; 0xb38 <Print::write(char const*) [clone .part.2] [clone .constprop.54]>
printFloat():
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e2       	ldi	r20, 0x20	; 32
    1736:	51 e4       	ldi	r21, 0x41	; 65
    1738:	c5 01       	movw	r24, r10
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:287
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    173a:	b4 01       	movw	r22, r8
    173c:	d0 d1       	rcall	.+928    	; 0x1ade <__mulsf3>
    173e:	4b 01       	movw	r8, r22
    1740:	5c 01       	movw	r10, r24
    1742:	eb d0       	rcall	.+470    	; 0x191a <__fixunssfsi>
print():
    1744:	6b 01       	movw	r12, r22
    1746:	f1 2c       	mov	r15, r1
    1748:	e1 2c       	mov	r14, r1
    174a:	4a e0       	ldi	r20, 0x0A	; 10
    174c:	c7 01       	movw	r24, r14
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:288
    unsigned int toPrint = (unsigned int)remainder;
    174e:	b6 01       	movw	r22, r12
    1750:	0c da       	rcall	.-3048   	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
printFloat():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:83
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1752:	c7 01       	movw	r24, r14
    1754:	b6 01       	movw	r22, r12
    1756:	0d d1       	rcall	.+538    	; 0x1972 <__floatunsisf>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1758:	9b 01       	movw	r18, r22
    175a:	ac 01       	movw	r20, r24
    175c:	c5 01       	movw	r24, r10
    175e:	b4 01       	movw	r22, r8
    1760:	0b d0       	rcall	.+22     	; 0x1778 <__subsf3>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:290
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
    remainder -= toPrint;
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	b9 d1       	rcall	.+882    	; 0x1ade <__mulsf3>
    176c:	d6 d0       	rcall	.+428    	; 0x191a <__fixunssfsi>
print():
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	4a e0       	ldi	r20, 0x0A	; 10
    1774:	fa d9       	rcall	.-3084   	; 0xb6a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:287
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1776:	4f cf       	rjmp	.-354    	; 0x1616 <main+0x66a>

00001778 <__subsf3>:
__subsf3():
    1778:	50 58       	subi	r21, 0x80	; 128

0000177a <__addsf3>:
    177a:	bb 27       	eor	r27, r27
    177c:	aa 27       	eor	r26, r26
    177e:	0e d0       	rcall	.+28     	; 0x179c <__addsf3x>
    1780:	70 c1       	rjmp	.+736    	; 0x1a62 <__fp_round>
__addsf3():
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:288
    unsigned int toPrint = (unsigned int)remainder;
    1782:	61 d1       	rcall	.+706    	; 0x1a46 <__fp_pscA>
    1784:	30 f0       	brcs	.+12     	; 0x1792 <__addsf3+0x18>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:83
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1786:	66 d1       	rcall	.+716    	; 0x1a54 <__fp_pscB>
    1788:	20 f0       	brcs	.+8      	; 0x1792 <__addsf3+0x18>
/Users/gbr4/Library/Arduino15/packages/DxCore/hardware/megaavr/1.4.10/cores/dxcore/api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    178a:	31 f4       	brne	.+12     	; 0x1798 <__addsf3+0x1e>
    178c:	9f 3f       	cpi	r25, 0xFF	; 255
    178e:	11 f4       	brne	.+4      	; 0x1794 <__addsf3+0x1a>
    1790:	1e f4       	brtc	.+6      	; 0x1798 <__addsf3+0x1e>
    1792:	56 c1       	rjmp	.+684    	; 0x1a40 <__fp_nan>
    1794:	0e f4       	brtc	.+2      	; 0x1798 <__addsf3+0x1e>
    1796:	e0 95       	com	r30
    1798:	e7 fb       	bst	r30, 7
    179a:	4c c1       	rjmp	.+664    	; 0x1a34 <__fp_inf>

0000179c <__addsf3x>:
__addsf3x():
    179c:	e9 2f       	mov	r30, r25
    179e:	72 d1       	rcall	.+740    	; 0x1a84 <__fp_split3>
    17a0:	80 f3       	brcs	.-32     	; 0x1782 <__addsf3+0x8>
    17a2:	ba 17       	cp	r27, r26
    17a4:	62 07       	cpc	r22, r18
    17a6:	73 07       	cpc	r23, r19
    17a8:	84 07       	cpc	r24, r20
    17aa:	95 07       	cpc	r25, r21
    17ac:	18 f0       	brcs	.+6      	; 0x17b4 <__addsf3x+0x18>
    17ae:	71 f4       	brne	.+28     	; 0x17cc <__addsf3x+0x30>
    17b0:	9e f5       	brtc	.+102    	; 0x1818 <__addsf3x+0x7c>
    17b2:	8a c1       	rjmp	.+788    	; 0x1ac8 <__fp_zero>
    17b4:	0e f4       	brtc	.+2      	; 0x17b8 <__addsf3x+0x1c>
    17b6:	e0 95       	com	r30
    17b8:	0b 2e       	mov	r0, r27
    17ba:	ba 2f       	mov	r27, r26
    17bc:	a0 2d       	mov	r26, r0
    17be:	0b 01       	movw	r0, r22
    17c0:	b9 01       	movw	r22, r18
    17c2:	90 01       	movw	r18, r0
    17c4:	0c 01       	movw	r0, r24
    17c6:	ca 01       	movw	r24, r20
    17c8:	a0 01       	movw	r20, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	ff 27       	eor	r31, r31
    17ce:	59 1b       	sub	r21, r25
    17d0:	99 f0       	breq	.+38     	; 0x17f8 <__addsf3x+0x5c>
    17d2:	59 3f       	cpi	r21, 0xF9	; 249
    17d4:	50 f4       	brcc	.+20     	; 0x17ea <__addsf3x+0x4e>
    17d6:	50 3e       	cpi	r21, 0xE0	; 224
    17d8:	68 f1       	brcs	.+90     	; 0x1834 <__addsf3x+0x98>
    17da:	1a 16       	cp	r1, r26
    17dc:	f0 40       	sbci	r31, 0x00	; 0
    17de:	a2 2f       	mov	r26, r18
    17e0:	23 2f       	mov	r18, r19
    17e2:	34 2f       	mov	r19, r20
    17e4:	44 27       	eor	r20, r20
    17e6:	58 5f       	subi	r21, 0xF8	; 248
    17e8:	f3 cf       	rjmp	.-26     	; 0x17d0 <__addsf3x+0x34>
    17ea:	46 95       	lsr	r20
    17ec:	37 95       	ror	r19
    17ee:	27 95       	ror	r18
    17f0:	a7 95       	ror	r26
    17f2:	f0 40       	sbci	r31, 0x00	; 0
    17f4:	53 95       	inc	r21
    17f6:	c9 f7       	brne	.-14     	; 0x17ea <__addsf3x+0x4e>
    17f8:	7e f4       	brtc	.+30     	; 0x1818 <__addsf3x+0x7c>
    17fa:	1f 16       	cp	r1, r31
    17fc:	ba 0b       	sbc	r27, r26
    17fe:	62 0b       	sbc	r22, r18
    1800:	73 0b       	sbc	r23, r19
    1802:	84 0b       	sbc	r24, r20
    1804:	ba f0       	brmi	.+46     	; 0x1834 <__addsf3x+0x98>
    1806:	91 50       	subi	r25, 0x01	; 1
    1808:	a1 f0       	breq	.+40     	; 0x1832 <__addsf3x+0x96>
    180a:	ff 0f       	add	r31, r31
    180c:	bb 1f       	adc	r27, r27
    180e:	66 1f       	adc	r22, r22
    1810:	77 1f       	adc	r23, r23
    1812:	88 1f       	adc	r24, r24
    1814:	c2 f7       	brpl	.-16     	; 0x1806 <__addsf3x+0x6a>
    1816:	0e c0       	rjmp	.+28     	; 0x1834 <__addsf3x+0x98>
    1818:	ba 0f       	add	r27, r26
    181a:	62 1f       	adc	r22, r18
    181c:	73 1f       	adc	r23, r19
    181e:	84 1f       	adc	r24, r20
    1820:	48 f4       	brcc	.+18     	; 0x1834 <__addsf3x+0x98>
    1822:	87 95       	ror	r24
    1824:	77 95       	ror	r23
    1826:	67 95       	ror	r22
    1828:	b7 95       	ror	r27
    182a:	f7 95       	ror	r31
    182c:	9e 3f       	cpi	r25, 0xFE	; 254
    182e:	08 f0       	brcs	.+2      	; 0x1832 <__addsf3x+0x96>
    1830:	b3 cf       	rjmp	.-154    	; 0x1798 <__addsf3+0x1e>
    1832:	93 95       	inc	r25
    1834:	88 0f       	add	r24, r24
    1836:	08 f0       	brcs	.+2      	; 0x183a <__addsf3x+0x9e>
    1838:	99 27       	eor	r25, r25
    183a:	ee 0f       	add	r30, r30
    183c:	97 95       	ror	r25
    183e:	87 95       	ror	r24
    1840:	08 95       	ret

00001842 <__cmpsf2>:
    1842:	d4 d0       	rcall	.+424    	; 0x19ec <__fp_cmp>
    1844:	08 f4       	brcc	.+2      	; 0x1848 <__cmpsf2+0x6>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	08 95       	ret

0000184a <__divsf3>:
    184a:	0c d0       	rcall	.+24     	; 0x1864 <__divsf3x>
    184c:	0a c1       	rjmp	.+532    	; 0x1a62 <__fp_round>
    184e:	02 d1       	rcall	.+516    	; 0x1a54 <__fp_pscB>
    1850:	40 f0       	brcs	.+16     	; 0x1862 <__divsf3+0x18>
    1852:	f9 d0       	rcall	.+498    	; 0x1a46 <__fp_pscA>
    1854:	30 f0       	brcs	.+12     	; 0x1862 <__divsf3+0x18>
    1856:	21 f4       	brne	.+8      	; 0x1860 <__divsf3+0x16>
    1858:	5f 3f       	cpi	r21, 0xFF	; 255
    185a:	19 f0       	breq	.+6      	; 0x1862 <__divsf3+0x18>
    185c:	eb c0       	rjmp	.+470    	; 0x1a34 <__fp_inf>
    185e:	51 11       	cpse	r21, r1
    1860:	34 c1       	rjmp	.+616    	; 0x1aca <__fp_szero>
    1862:	ee c0       	rjmp	.+476    	; 0x1a40 <__fp_nan>

00001864 <__divsf3x>:
    1864:	0f d1       	rcall	.+542    	; 0x1a84 <__fp_split3>
    1866:	98 f3       	brcs	.-26     	; 0x184e <__divsf3+0x4>

00001868 <__divsf3_pse>:
__divsf3_pse():
    1868:	99 23       	and	r25, r25
    186a:	c9 f3       	breq	.-14     	; 0x185e <__divsf3+0x14>
    186c:	55 23       	and	r21, r21
    186e:	b1 f3       	breq	.-20     	; 0x185c <__divsf3+0x12>
    1870:	95 1b       	sub	r25, r21
    1872:	55 0b       	sbc	r21, r21
    1874:	bb 27       	eor	r27, r27
    1876:	aa 27       	eor	r26, r26
    1878:	62 17       	cp	r22, r18
    187a:	73 07       	cpc	r23, r19
    187c:	84 07       	cpc	r24, r20
    187e:	38 f0       	brcs	.+14     	; 0x188e <__divsf3_pse+0x26>
    1880:	9f 5f       	subi	r25, 0xFF	; 255
    1882:	5f 4f       	sbci	r21, 0xFF	; 255
    1884:	22 0f       	add	r18, r18
    1886:	33 1f       	adc	r19, r19
    1888:	44 1f       	adc	r20, r20
    188a:	aa 1f       	adc	r26, r26
    188c:	a9 f3       	breq	.-22     	; 0x1878 <__divsf3_pse+0x10>
    188e:	33 d0       	rcall	.+102    	; 0x18f6 <__divsf3_pse+0x8e>
    1890:	0e 2e       	mov	r0, r30
    1892:	3a f0       	brmi	.+14     	; 0x18a2 <__divsf3_pse+0x3a>
    1894:	e0 e8       	ldi	r30, 0x80	; 128
    1896:	30 d0       	rcall	.+96     	; 0x18f8 <__divsf3_pse+0x90>
    1898:	91 50       	subi	r25, 0x01	; 1
    189a:	50 40       	sbci	r21, 0x00	; 0
    189c:	e6 95       	lsr	r30
    189e:	00 1c       	adc	r0, r0
    18a0:	ca f7       	brpl	.-14     	; 0x1894 <__divsf3_pse+0x2c>
    18a2:	29 d0       	rcall	.+82     	; 0x18f6 <__divsf3_pse+0x8e>
    18a4:	fe 2f       	mov	r31, r30
    18a6:	27 d0       	rcall	.+78     	; 0x18f6 <__divsf3_pse+0x8e>
    18a8:	66 0f       	add	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	bb 1f       	adc	r27, r27
    18b0:	26 17       	cp	r18, r22
    18b2:	37 07       	cpc	r19, r23
    18b4:	48 07       	cpc	r20, r24
    18b6:	ab 07       	cpc	r26, r27
    18b8:	b0 e8       	ldi	r27, 0x80	; 128
    18ba:	09 f0       	breq	.+2      	; 0x18be <__divsf3_pse+0x56>
    18bc:	bb 0b       	sbc	r27, r27
    18be:	80 2d       	mov	r24, r0
    18c0:	bf 01       	movw	r22, r30
    18c2:	ff 27       	eor	r31, r31
    18c4:	93 58       	subi	r25, 0x83	; 131
    18c6:	5f 4f       	sbci	r21, 0xFF	; 255
    18c8:	2a f0       	brmi	.+10     	; 0x18d4 <__divsf3_pse+0x6c>
    18ca:	9e 3f       	cpi	r25, 0xFE	; 254
    18cc:	51 05       	cpc	r21, r1
    18ce:	68 f0       	brcs	.+26     	; 0x18ea <__divsf3_pse+0x82>
    18d0:	b1 c0       	rjmp	.+354    	; 0x1a34 <__fp_inf>
    18d2:	fb c0       	rjmp	.+502    	; 0x1aca <__fp_szero>
    18d4:	5f 3f       	cpi	r21, 0xFF	; 255
    18d6:	ec f3       	brlt	.-6      	; 0x18d2 <__divsf3_pse+0x6a>
    18d8:	98 3e       	cpi	r25, 0xE8	; 232
    18da:	dc f3       	brlt	.-10     	; 0x18d2 <__divsf3_pse+0x6a>
    18dc:	86 95       	lsr	r24
    18de:	77 95       	ror	r23
    18e0:	67 95       	ror	r22
    18e2:	b7 95       	ror	r27
    18e4:	f7 95       	ror	r31
    18e6:	9f 5f       	subi	r25, 0xFF	; 255
    18e8:	c9 f7       	brne	.-14     	; 0x18dc <__divsf3_pse+0x74>
    18ea:	88 0f       	add	r24, r24
    18ec:	91 1d       	adc	r25, r1
    18ee:	96 95       	lsr	r25
    18f0:	87 95       	ror	r24
    18f2:	97 f9       	bld	r25, 7
    18f4:	08 95       	ret
    18f6:	e1 e0       	ldi	r30, 0x01	; 1
    18f8:	66 0f       	add	r22, r22
    18fa:	77 1f       	adc	r23, r23
    18fc:	88 1f       	adc	r24, r24
    18fe:	bb 1f       	adc	r27, r27
    1900:	62 17       	cp	r22, r18
    1902:	73 07       	cpc	r23, r19
    1904:	84 07       	cpc	r24, r20
    1906:	ba 07       	cpc	r27, r26
    1908:	20 f0       	brcs	.+8      	; 0x1912 <__divsf3_pse+0xaa>
    190a:	62 1b       	sub	r22, r18
    190c:	73 0b       	sbc	r23, r19
    190e:	84 0b       	sbc	r24, r20
    1910:	ba 0b       	sbc	r27, r26
    1912:	ee 1f       	adc	r30, r30
    1914:	88 f7       	brcc	.-30     	; 0x18f8 <__divsf3_pse+0x90>
    1916:	e0 95       	com	r30
    1918:	08 95       	ret

0000191a <__fixunssfsi>:
__fixunssfsi():
    191a:	bc d0       	rcall	.+376    	; 0x1a94 <__fp_splitA>
    191c:	88 f0       	brcs	.+34     	; 0x1940 <__fixunssfsi+0x26>
    191e:	9f 57       	subi	r25, 0x7F	; 127
    1920:	90 f0       	brcs	.+36     	; 0x1946 <__fixunssfsi+0x2c>
    1922:	b9 2f       	mov	r27, r25
    1924:	99 27       	eor	r25, r25
    1926:	b7 51       	subi	r27, 0x17	; 23
    1928:	a0 f0       	brcs	.+40     	; 0x1952 <__fixunssfsi+0x38>
    192a:	d1 f0       	breq	.+52     	; 0x1960 <__fixunssfsi+0x46>
    192c:	66 0f       	add	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	88 1f       	adc	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	1a f0       	brmi	.+6      	; 0x193c <__fixunssfsi+0x22>
    1936:	ba 95       	dec	r27
    1938:	c9 f7       	brne	.-14     	; 0x192c <__fixunssfsi+0x12>
    193a:	12 c0       	rjmp	.+36     	; 0x1960 <__fixunssfsi+0x46>
    193c:	b1 30       	cpi	r27, 0x01	; 1
    193e:	81 f0       	breq	.+32     	; 0x1960 <__fixunssfsi+0x46>
    1940:	c3 d0       	rcall	.+390    	; 0x1ac8 <__fp_zero>
    1942:	b1 e0       	ldi	r27, 0x01	; 1
    1944:	08 95       	ret
    1946:	c0 c0       	rjmp	.+384    	; 0x1ac8 <__fp_zero>
    1948:	67 2f       	mov	r22, r23
    194a:	78 2f       	mov	r23, r24
    194c:	88 27       	eor	r24, r24
    194e:	b8 5f       	subi	r27, 0xF8	; 248
    1950:	39 f0       	breq	.+14     	; 0x1960 <__fixunssfsi+0x46>
    1952:	b9 3f       	cpi	r27, 0xF9	; 249
    1954:	cc f3       	brlt	.-14     	; 0x1948 <__fixunssfsi+0x2e>
    1956:	86 95       	lsr	r24
    1958:	77 95       	ror	r23
    195a:	67 95       	ror	r22
    195c:	b3 95       	inc	r27
    195e:	d9 f7       	brne	.-10     	; 0x1956 <__fixunssfsi+0x3c>
    1960:	3e f4       	brtc	.+14     	; 0x1970 <__fixunssfsi+0x56>
    1962:	90 95       	com	r25
    1964:	80 95       	com	r24
    1966:	70 95       	com	r23
    1968:	61 95       	neg	r22
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	8f 4f       	sbci	r24, 0xFF	; 255
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	08 95       	ret

00001972 <__floatunsisf>:
__floatunsisf():
    1972:	e8 94       	clt
    1974:	09 c0       	rjmp	.+18     	; 0x1988 <__floatsisf+0x12>

00001976 <__floatsisf>:
    1976:	97 fb       	bst	r25, 7
    1978:	3e f4       	brtc	.+14     	; 0x1988 <__floatsisf+0x12>
    197a:	90 95       	com	r25
    197c:	80 95       	com	r24
    197e:	70 95       	com	r23
    1980:	61 95       	neg	r22
    1982:	7f 4f       	sbci	r23, 0xFF	; 255
    1984:	8f 4f       	sbci	r24, 0xFF	; 255
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	99 23       	and	r25, r25
    198a:	a9 f0       	breq	.+42     	; 0x19b6 <__floatsisf+0x40>
    198c:	f9 2f       	mov	r31, r25
    198e:	96 e9       	ldi	r25, 0x96	; 150
    1990:	bb 27       	eor	r27, r27
    1992:	93 95       	inc	r25
    1994:	f6 95       	lsr	r31
    1996:	87 95       	ror	r24
    1998:	77 95       	ror	r23
    199a:	67 95       	ror	r22
    199c:	b7 95       	ror	r27
    199e:	f1 11       	cpse	r31, r1
    19a0:	f8 cf       	rjmp	.-16     	; 0x1992 <__floatsisf+0x1c>
    19a2:	fa f4       	brpl	.+62     	; 0x19e2 <__floatsisf+0x6c>
    19a4:	bb 0f       	add	r27, r27
    19a6:	11 f4       	brne	.+4      	; 0x19ac <__floatsisf+0x36>
    19a8:	60 ff       	sbrs	r22, 0
    19aa:	1b c0       	rjmp	.+54     	; 0x19e2 <__floatsisf+0x6c>
    19ac:	6f 5f       	subi	r22, 0xFF	; 255
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	8f 4f       	sbci	r24, 0xFF	; 255
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	16 c0       	rjmp	.+44     	; 0x19e2 <__floatsisf+0x6c>
    19b6:	88 23       	and	r24, r24
    19b8:	11 f0       	breq	.+4      	; 0x19be <__floatsisf+0x48>
    19ba:	96 e9       	ldi	r25, 0x96	; 150
    19bc:	11 c0       	rjmp	.+34     	; 0x19e0 <__floatsisf+0x6a>
    19be:	77 23       	and	r23, r23
    19c0:	21 f0       	breq	.+8      	; 0x19ca <__floatsisf+0x54>
    19c2:	9e e8       	ldi	r25, 0x8E	; 142
    19c4:	87 2f       	mov	r24, r23
    19c6:	76 2f       	mov	r23, r22
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <__floatsisf+0x5e>
    19ca:	66 23       	and	r22, r22
    19cc:	71 f0       	breq	.+28     	; 0x19ea <__floatsisf+0x74>
    19ce:	96 e8       	ldi	r25, 0x86	; 134
    19d0:	86 2f       	mov	r24, r22
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	2a f0       	brmi	.+10     	; 0x19e2 <__floatsisf+0x6c>
    19d8:	9a 95       	dec	r25
    19da:	66 0f       	add	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	da f7       	brpl	.-10     	; 0x19d8 <__floatsisf+0x62>
    19e2:	88 0f       	add	r24, r24
    19e4:	96 95       	lsr	r25
    19e6:	87 95       	ror	r24
    19e8:	97 f9       	bld	r25, 7
    19ea:	08 95       	ret

000019ec <__fp_cmp>:
__fp_cmp():
    19ec:	99 0f       	add	r25, r25
    19ee:	00 08       	sbc	r0, r0
    19f0:	55 0f       	add	r21, r21
    19f2:	aa 0b       	sbc	r26, r26
    19f4:	e0 e8       	ldi	r30, 0x80	; 128
    19f6:	fe ef       	ldi	r31, 0xFE	; 254
    19f8:	16 16       	cp	r1, r22
    19fa:	17 06       	cpc	r1, r23
    19fc:	e8 07       	cpc	r30, r24
    19fe:	f9 07       	cpc	r31, r25
    1a00:	c0 f0       	brcs	.+48     	; 0x1a32 <__fp_cmp+0x46>
    1a02:	12 16       	cp	r1, r18
    1a04:	13 06       	cpc	r1, r19
    1a06:	e4 07       	cpc	r30, r20
    1a08:	f5 07       	cpc	r31, r21
    1a0a:	98 f0       	brcs	.+38     	; 0x1a32 <__fp_cmp+0x46>
    1a0c:	62 1b       	sub	r22, r18
    1a0e:	73 0b       	sbc	r23, r19
    1a10:	84 0b       	sbc	r24, r20
    1a12:	95 0b       	sbc	r25, r21
    1a14:	39 f4       	brne	.+14     	; 0x1a24 <__fp_cmp+0x38>
    1a16:	0a 26       	eor	r0, r26
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <__fp_cmp+0x46>
    1a1a:	23 2b       	or	r18, r19
    1a1c:	24 2b       	or	r18, r20
    1a1e:	25 2b       	or	r18, r21
    1a20:	21 f4       	brne	.+8      	; 0x1a2a <__fp_cmp+0x3e>
    1a22:	08 95       	ret
    1a24:	0a 26       	eor	r0, r26
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <__fp_cmp+0x3e>
    1a28:	a1 40       	sbci	r26, 0x01	; 1
    1a2a:	a6 95       	lsr	r26
    1a2c:	8f ef       	ldi	r24, 0xFF	; 255
    1a2e:	81 1d       	adc	r24, r1
    1a30:	81 1d       	adc	r24, r1
    1a32:	08 95       	ret

00001a34 <__fp_inf>:
__fp_inf():
    1a34:	97 f9       	bld	r25, 7
    1a36:	9f 67       	ori	r25, 0x7F	; 127
    1a38:	80 e8       	ldi	r24, 0x80	; 128
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	08 95       	ret

00001a40 <__fp_nan>:
__fp_nan():
    1a40:	9f ef       	ldi	r25, 0xFF	; 255
    1a42:	80 ec       	ldi	r24, 0xC0	; 192
    1a44:	08 95       	ret

00001a46 <__fp_pscA>:
__fp_pscA():
    1a46:	00 24       	eor	r0, r0
    1a48:	0a 94       	dec	r0
    1a4a:	16 16       	cp	r1, r22
    1a4c:	17 06       	cpc	r1, r23
    1a4e:	18 06       	cpc	r1, r24
    1a50:	09 06       	cpc	r0, r25
    1a52:	08 95       	ret

00001a54 <__fp_pscB>:
__fp_pscB():
    1a54:	00 24       	eor	r0, r0
    1a56:	0a 94       	dec	r0
    1a58:	12 16       	cp	r1, r18
    1a5a:	13 06       	cpc	r1, r19
    1a5c:	14 06       	cpc	r1, r20
    1a5e:	05 06       	cpc	r0, r21
    1a60:	08 95       	ret

00001a62 <__fp_round>:
__fp_round():
    1a62:	09 2e       	mov	r0, r25
    1a64:	03 94       	inc	r0
    1a66:	00 0c       	add	r0, r0
    1a68:	11 f4       	brne	.+4      	; 0x1a6e <__fp_round+0xc>
    1a6a:	88 23       	and	r24, r24
    1a6c:	52 f0       	brmi	.+20     	; 0x1a82 <__fp_round+0x20>
    1a6e:	bb 0f       	add	r27, r27
    1a70:	40 f4       	brcc	.+16     	; 0x1a82 <__fp_round+0x20>
    1a72:	bf 2b       	or	r27, r31
    1a74:	11 f4       	brne	.+4      	; 0x1a7a <__fp_round+0x18>
    1a76:	60 ff       	sbrs	r22, 0
    1a78:	04 c0       	rjmp	.+8      	; 0x1a82 <__fp_round+0x20>
    1a7a:	6f 5f       	subi	r22, 0xFF	; 255
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	08 95       	ret

00001a84 <__fp_split3>:
__fp_split3():
    1a84:	57 fd       	sbrc	r21, 7
    1a86:	90 58       	subi	r25, 0x80	; 128
    1a88:	44 0f       	add	r20, r20
    1a8a:	55 1f       	adc	r21, r21
    1a8c:	59 f0       	breq	.+22     	; 0x1aa4 <__fp_splitA+0x10>
    1a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a90:	71 f0       	breq	.+28     	; 0x1aae <__fp_splitA+0x1a>
    1a92:	47 95       	ror	r20

00001a94 <__fp_splitA>:
    1a94:	88 0f       	add	r24, r24
    1a96:	97 fb       	bst	r25, 7
    1a98:	99 1f       	adc	r25, r25
    1a9a:	61 f0       	breq	.+24     	; 0x1ab4 <__fp_splitA+0x20>
    1a9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a9e:	79 f0       	breq	.+30     	; 0x1abe <__fp_splitA+0x2a>
    1aa0:	87 95       	ror	r24
    1aa2:	08 95       	ret
    1aa4:	12 16       	cp	r1, r18
    1aa6:	13 06       	cpc	r1, r19
    1aa8:	14 06       	cpc	r1, r20
    1aaa:	55 1f       	adc	r21, r21
    1aac:	f2 cf       	rjmp	.-28     	; 0x1a92 <__fp_split3+0xe>
    1aae:	46 95       	lsr	r20
    1ab0:	f1 df       	rcall	.-30     	; 0x1a94 <__fp_splitA>
    1ab2:	08 c0       	rjmp	.+16     	; 0x1ac4 <__fp_splitA+0x30>
    1ab4:	16 16       	cp	r1, r22
    1ab6:	17 06       	cpc	r1, r23
    1ab8:	18 06       	cpc	r1, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	f1 cf       	rjmp	.-30     	; 0x1aa0 <__fp_splitA+0xc>
    1abe:	86 95       	lsr	r24
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	61 05       	cpc	r22, r1
    1ac4:	08 94       	sec
    1ac6:	08 95       	ret

00001ac8 <__fp_zero>:
__fp_zero():
    1ac8:	e8 94       	clt

00001aca <__fp_szero>:
    1aca:	bb 27       	eor	r27, r27
    1acc:	66 27       	eor	r22, r22
    1ace:	77 27       	eor	r23, r23
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	97 f9       	bld	r25, 7
    1ad4:	08 95       	ret

00001ad6 <__gesf2>:
__gesf2():
    1ad6:	8a df       	rcall	.-236    	; 0x19ec <__fp_cmp>
    1ad8:	08 f4       	brcc	.+2      	; 0x1adc <__gesf2+0x6>
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	08 95       	ret

00001ade <__mulsf3>:
__mulsf3():
    1ade:	0b d0       	rcall	.+22     	; 0x1af6 <__mulsf3x>
    1ae0:	c0 cf       	rjmp	.-128    	; 0x1a62 <__fp_round>
    1ae2:	b1 df       	rcall	.-158    	; 0x1a46 <__fp_pscA>
    1ae4:	28 f0       	brcs	.+10     	; 0x1af0 <__mulsf3+0x12>
    1ae6:	b6 df       	rcall	.-148    	; 0x1a54 <__fp_pscB>
    1ae8:	18 f0       	brcs	.+6      	; 0x1af0 <__mulsf3+0x12>
    1aea:	95 23       	and	r25, r21
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <__mulsf3+0x12>
    1aee:	a2 cf       	rjmp	.-188    	; 0x1a34 <__fp_inf>
    1af0:	a7 cf       	rjmp	.-178    	; 0x1a40 <__fp_nan>
    1af2:	11 24       	eor	r1, r1
    1af4:	ea cf       	rjmp	.-44     	; 0x1aca <__fp_szero>

00001af6 <__mulsf3x>:
__mulsf3x():
    1af6:	c6 df       	rcall	.-116    	; 0x1a84 <__fp_split3>
    1af8:	a0 f3       	brcs	.-24     	; 0x1ae2 <__mulsf3+0x4>

00001afa <__mulsf3_pse>:
    1afa:	95 9f       	mul	r25, r21
    1afc:	d1 f3       	breq	.-12     	; 0x1af2 <__mulsf3+0x14>
    1afe:	95 0f       	add	r25, r21
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	55 1f       	adc	r21, r21
    1b04:	62 9f       	mul	r22, r18
    1b06:	f0 01       	movw	r30, r0
    1b08:	72 9f       	mul	r23, r18
    1b0a:	bb 27       	eor	r27, r27
    1b0c:	f0 0d       	add	r31, r0
    1b0e:	b1 1d       	adc	r27, r1
    1b10:	63 9f       	mul	r22, r19
    1b12:	aa 27       	eor	r26, r26
    1b14:	f0 0d       	add	r31, r0
    1b16:	b1 1d       	adc	r27, r1
    1b18:	aa 1f       	adc	r26, r26
    1b1a:	64 9f       	mul	r22, r20
    1b1c:	66 27       	eor	r22, r22
    1b1e:	b0 0d       	add	r27, r0
    1b20:	a1 1d       	adc	r26, r1
    1b22:	66 1f       	adc	r22, r22
    1b24:	82 9f       	mul	r24, r18
    1b26:	22 27       	eor	r18, r18
    1b28:	b0 0d       	add	r27, r0
    1b2a:	a1 1d       	adc	r26, r1
    1b2c:	62 1f       	adc	r22, r18
    1b2e:	73 9f       	mul	r23, r19
    1b30:	b0 0d       	add	r27, r0
    1b32:	a1 1d       	adc	r26, r1
    1b34:	62 1f       	adc	r22, r18
    1b36:	83 9f       	mul	r24, r19
    1b38:	a0 0d       	add	r26, r0
    1b3a:	61 1d       	adc	r22, r1
    1b3c:	22 1f       	adc	r18, r18
    1b3e:	74 9f       	mul	r23, r20
    1b40:	33 27       	eor	r19, r19
    1b42:	a0 0d       	add	r26, r0
    1b44:	61 1d       	adc	r22, r1
    1b46:	23 1f       	adc	r18, r19
    1b48:	84 9f       	mul	r24, r20
    1b4a:	60 0d       	add	r22, r0
    1b4c:	21 1d       	adc	r18, r1
    1b4e:	82 2f       	mov	r24, r18
    1b50:	76 2f       	mov	r23, r22
    1b52:	6a 2f       	mov	r22, r26
    1b54:	11 24       	eor	r1, r1
    1b56:	9f 57       	subi	r25, 0x7F	; 127
    1b58:	50 40       	sbci	r21, 0x00	; 0
    1b5a:	8a f0       	brmi	.+34     	; 0x1b7e <__mulsf3_pse+0x84>
    1b5c:	e1 f0       	breq	.+56     	; 0x1b96 <__mulsf3_pse+0x9c>
    1b5e:	88 23       	and	r24, r24
    1b60:	4a f0       	brmi	.+18     	; 0x1b74 <__mulsf3_pse+0x7a>
    1b62:	ee 0f       	add	r30, r30
    1b64:	ff 1f       	adc	r31, r31
    1b66:	bb 1f       	adc	r27, r27
    1b68:	66 1f       	adc	r22, r22
    1b6a:	77 1f       	adc	r23, r23
    1b6c:	88 1f       	adc	r24, r24
    1b6e:	91 50       	subi	r25, 0x01	; 1
    1b70:	50 40       	sbci	r21, 0x00	; 0
    1b72:	a9 f7       	brne	.-22     	; 0x1b5e <__mulsf3_pse+0x64>
    1b74:	9e 3f       	cpi	r25, 0xFE	; 254
    1b76:	51 05       	cpc	r21, r1
    1b78:	70 f0       	brcs	.+28     	; 0x1b96 <__mulsf3_pse+0x9c>
    1b7a:	5c cf       	rjmp	.-328    	; 0x1a34 <__fp_inf>
    1b7c:	a6 cf       	rjmp	.-180    	; 0x1aca <__fp_szero>
    1b7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b80:	ec f3       	brlt	.-6      	; 0x1b7c <__mulsf3_pse+0x82>
    1b82:	98 3e       	cpi	r25, 0xE8	; 232
    1b84:	dc f3       	brlt	.-10     	; 0x1b7c <__mulsf3_pse+0x82>
    1b86:	86 95       	lsr	r24
    1b88:	77 95       	ror	r23
    1b8a:	67 95       	ror	r22
    1b8c:	b7 95       	ror	r27
    1b8e:	f7 95       	ror	r31
    1b90:	e7 95       	ror	r30
    1b92:	9f 5f       	subi	r25, 0xFF	; 255
    1b94:	c1 f7       	brne	.-16     	; 0x1b86 <__mulsf3_pse+0x8c>
    1b96:	fe 2b       	or	r31, r30
    1b98:	88 0f       	add	r24, r24
    1b9a:	91 1d       	adc	r25, r1
    1b9c:	96 95       	lsr	r25
    1b9e:	87 95       	ror	r24
    1ba0:	97 f9       	bld	r25, 7
    1ba2:	08 95       	ret

00001ba4 <__unordsf2>:
    1ba4:	23 df       	rcall	.-442    	; 0x19ec <__fp_cmp>
    1ba6:	88 0b       	sbc	r24, r24
    1ba8:	99 0b       	sbc	r25, r25
    1baa:	08 95       	ret

00001bac <__udivmodsi4>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1bac:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1bae:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1bb0:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1bb2:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1bb4:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1bb6:	0d c0       	rjmp	.+26     	; 0x1bd2 <__udivmodsi4_ep>

00001bb8 <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1bb8:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1bba:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1bbc:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1bbe:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1bc0:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1bc2:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1bc4:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1bc6:	f5 07       	cpc	r31, r21
__udivmodsi4_loop():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1bc8:	20 f0       	brcs	.+8      	; 0x1bd2 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1bca:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1bcc:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1bce:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1bd0:	f5 0b       	sbc	r31, r21

00001bd2 <__udivmodsi4_ep>:
__udivmodsi4_ep():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1bd2:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1bd4:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1bd6:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1bd8:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1bda:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1bde:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1be0:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1be2:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1be4:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1be6:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1be8:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1bea:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1bec:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1bee:	08 95       	ret

00001bf0 <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1bf0:	0f d0       	rcall	.+30     	; 0x1c10 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1bf2:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1bf4:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1bf6:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1bf8:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1bfa:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1bfc:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1bfe:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1c00:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1c02:	08 95       	ret

00001c04 <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1c04:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1c06:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1c08:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1c0a:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1c0c:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1c0e:	09 94       	ijmp

00001c10 <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1c10:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1c12:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1c14:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1c16:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1c18:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1c1a:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1c1c:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1c1e:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1c20:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1c22:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1c24:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1c26:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1c28:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1c2a:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1c2c:	08 95       	ret

00001c2e <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1c2e:	f8 94       	cli

00001c30 <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega2/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1c30:	ff cf       	rjmp	.-2      	; 0x1c30 <__stop_program>
